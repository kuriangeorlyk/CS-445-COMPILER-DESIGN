=================================================
Output of Building User Code
Exploding tar files
20230413024737-geor5198-CS445-S23-A6.tar
parser.l
parser.y
makefile
TokenTree.cpp
ourgetopt.c
symbolTable.cpp
yyerror.cpp
semantic.cpp
TokenTree.h
ourgetopt.h
symbolTable.h
semantic.h
yyerror.h
Undossing tarred files assumes all files are ascii and not binary
undosing parser.l
undosing parser.y
undosing makefile
undosing TokenTree.cpp
undosing ourgetopt.c
undosing symbolTable.cpp
undosing yyerror.cpp
undosing semantic.cpp
undosing TokenTree.h
undosing ourgetopt.h
undosing symbolTable.h
undosing semantic.h
undosing yyerror.h
Extracting test files
a2a.c-
allbad.c-
allgood.c-
array2.c-
array.c-
arrayex.c-
arrayops.c-
arrays2.c-
arrays.c-
arrayx.c-
assignb.c-
assignBool.c-
assignChar.c-
assignInt.c-
assignSmall.c-
badarray.c-
badcontrol.c-
basicAll5.c-
basicExtra.c-
break2.c-
break3.c-
break4.c-
break.c-
call2.c-
call3.c-
call4.c-
call.c-
callconst.c-
callerr.c-
callframes.c-
callglobal.c-
calllocal.c-
callparam.c-
callstatic.c-
chararray.c-
compfunc.c-
const2.c-
constants.c-
const.c-
control2.c-
control.c-
cover.c-
decl.c-
declinitreset.c-
decllists.c-
defused.c-
elsif.c-
emptyline.c-
errormessages.c-
everythingS23.c-
exampleScope.c-
exp2.c-
exp3.c-
exp4.c-
exp.c-
expL.c-
expR.c-
fact.c-
factor.c-
factorial2.c-
factorial.c-
factorialr.c-
fail.c-
for2.c-
fora.c-
forb.c-
for.c-
forerr.c-
forscope.c-
funcscope.c-
gcd2.c-
gcd.c-
gcdsm2.c-
gcdsm.c-
id.c-
if2.c-
if.c-
ifevil.c-
ifNest.c-
init2.c-
init3.c-
init4.c-
init5.c-
initbad2.c-
initbad.c-
init.c-
initconst.c-
initsm.c-
initused.c-
invalidChar.c-
io.c-
lec01.c-
lec02.c-
lec03.c-
lec04.c-
lhs.c-
loops.c-
loopscope2.c-
loopscope.c-
matchunmatch.c-
mem2.c-
mem.c-
memcall.c-
memory2.c-
memory.c-
memtype.c-
minus.c-
mixed.c-
mixedControl2.c-
mixedControl3.c-
mixedControl.c-
nano.c-
nest.c-
nested.c-
nestedfors.c-
nestedmem.c-
notused.c-
oparray.c-
op.c-
ops.c-
optype.c-
overkill.c-
overlapArray.c-
overlap.c-
overlapStatic.c-
overlayArray.c-
overlay.c-
overlayCall.c-
overlayTmp2.c-
overlayTmp3.c-
overlayTmp.c-
param.c-
paramerr2.c-
paramerr3.c-
paramerr.c-
parmtiny.c-
part2.c-
peek.c-
precassoc.c-
randomRoll.c-
rangeifwhile.c-
redefined.c-
returnbad.c-
return.c-
scope35.c-
scope3.c-
scope4.c-
scope5.c-
scope6.c-
scope.c-
scopes.c-
simple.c-
simpleDefine.c-
small.c-
static.c-
strange.c-
stress.c-
string.c-
testExample.c-
tinybad.c-
tiny.c-
tinygood.c-
tinyMixed2.c-
tinyMixed.c-
tinyMixedControl2.c-
tinyMixedControl3.c-
tinyMixedControl.c-
tinyOverlap.c-
tinyscope.c-
types3.c-
types.c-
unary.c-
unarystar.c-
undeclared.c-
undefined.c-
uninit2.c-
uninit.c-
uninitialized.c-
unused.c-
varAssign.c-
var.c-
varPair.c-
vars.c-
walsh.c-
while.c-
whileif.c-
remove Tmp dir contents
Now start the build process

find makefile (lowercase)
makefile
A makefile is here and you compiler will be built with it
make the program
Alter compiler with special development tool set including g++ 4.9
parser.y: warning: 10 shift/reduce conflicts [-Wconflicts-sr]
parser.y: warning: 21 reduce/reduce conflicts [-Wconflicts-rr]
Output from build is 5 lines long
Output from build will be trimmed to 1000 lines if it is too long.
bison -v -t -d parser.y
flex parser.l
g++    -c -o lex.yy.o lex.yy.c
g++    -c -o parser.tab.o parser.tab.c
g++ lex.yy.o parser.tab.o TokenTree.cpp ourgetopt.c  symbolTable.cpp semantic.cpp yyerror.cpp  -o c-
was a program called c- built?
c- is here and you compiler will now be tested
-rwx--x--x. 1 rs-cs-heckendo domain_users 239968 Apr 13 02:48 c-

END OF BUILD
=================================================
Complete Output of Testing
Run Tests
Limited to 30 seconds total run time and 18000 lines of output

* ================================================ *
|      Tests for CS445 Assignment  6               |
|       Comparison with Expected Output            |
|         Find the Memory Locations                |
|  Errors and Warnings will be sorted by line num  |
|                                                  |
* ================================================ *

/home/rs-cs-heckendo/TestWorld
-rwxrwxrwx jp/jp           182 2022-06-02 10:04 a2a.c-
-rwxrwxrwx jp/jp          1522 2022-06-02 10:04 allbad.c-
-rwxrwxrwx jp/jp          1288 2022-06-02 10:04 allgood.c-
-rwxrwxrwx jp/jp           363 2022-06-02 10:04 array2.c-
-rwxrwxrwx jp/jp           175 2022-06-02 10:04 array.c-
-rwxrwxrwx jp/jp            85 2022-06-02 10:04 arrayex.c-
-rwxrwxrwx jp/jp           860 2022-06-02 10:04 arrayops.c-
-rwxrwxrwx jp/jp           493 2022-06-02 10:04 arrays2.c-
-rwxrwxrwx jp/jp          1569 2022-06-02 10:04 arrays.c-
-rwxrwxrwx jp/jp           273 2022-06-02 10:04 arrayx.c-
-rwxrwxrwx jp/jp           175 2022-06-02 10:04 assignb.c-
-rwxrwxrwx jp/jp           492 2022-06-02 10:04 assignBool.c-
-rwxrwxrwx jp/jp           483 2022-06-02 10:04 assignChar.c-
-rwxrwxrwx jp/jp           470 2022-06-02 10:04 assignInt.c-
-rwxrwxrwx jp/jp           162 2022-06-02 10:04 assignSmall.c-
-rwxrwxrwx jp/jp            76 2022-06-02 10:04 badarray.c-
-rwxrwxrwx jp/jp          1008 2022-06-02 10:04 badcontrol.c-
-rwxrwxrwx jp/jp          6336 2022-06-02 10:04 basicAll5.c-
-rwxrwxrwx jp/jp           529 2022-06-02 10:04 basicExtra.c-
-rwxrwxrwx jp/jp           281 2022-06-02 10:04 break2.c-
-rwxrwxrwx jp/jp           110 2022-06-02 10:04 break3.c-
-rwxrwxrwx jp/jp           155 2022-06-02 10:04 break4.c-
-rwxrwxrwx jp/jp           122 2022-06-02 10:04 break.c-
-rwxrwxrwx jp/jp           340 2022-06-02 10:04 call2.c-
-rwxrwxrwx jp/jp           415 2022-06-02 10:04 call3.c-
-rwxrwxrwx jp/jp          1515 2022-06-02 10:04 call4.c-
-rwxrwxrwx jp/jp           929 2022-06-02 10:04 call.c-
-rwxrwxrwx jp/jp           284 2022-06-02 10:04 callconst.c-
-rwxrwxrwx jp/jp           293 2022-06-02 10:04 callerr.c-
-rwxrwxrwx jp/jp           332 2022-06-02 10:04 callframes.c-
-rwxrwxrwx jp/jp           460 2022-06-02 10:04 callglobal.c-
-rwxrwxrwx jp/jp           468 2022-06-02 10:04 calllocal.c-
-rwxrwxrwx jp/jp           575 2022-06-02 10:04 callparam.c-
-rwxrwxrwx jp/jp           482 2022-06-02 10:04 callstatic.c-
-rwxrwxrwx jp/jp           178 2022-06-02 10:04 chararray.c-
-rwxrwxrwx jp/jp           334 2022-06-02 10:04 compfunc.c-
-rwxrwxrwx jp/jp           128 2022-06-02 10:04 const2.c-
-rwxrwxrwx jp/jp           117 2022-06-02 10:04 constants.c-
-rwxrwxrwx jp/jp            59 2022-06-02 10:04 const.c-
-rwxrwxrwx jp/jp           480 2022-06-02 10:04 control2.c-
-rwxrwxrwx jp/jp           252 2022-06-02 10:04 control.c-
-rwxrwxrwx jp/jp          1150 2022-06-02 10:04 cover.c-
-rwxrwxrwx jp/jp            62 2022-06-02 10:04 decl.c-
-rwxrwxrwx jp/jp            78 2022-06-02 10:04 declinitreset.c-
-rwxrwxrwx jp/jp           141 2022-06-02 10:04 decllists.c-
-rwxrwxrwx jp/jp           528 2022-06-02 10:04 defused.c-
-rwxrwxrwx jp/jp           281 2022-06-02 10:04 elsif.c-
-rwxrwxrwx jp/jp           206 2022-06-02 10:04 emptyline.c-
-rwxrwxrwx jp/jp           394 2022-06-02 10:04 errormessages.c-
-rwxrwxrwx jp/jp          3292 2022-06-02 10:04 everythingS23.c-
-rwxrwxrwx jp/jp           240 2022-06-02 10:04 exampleScope.c-
-rwxrwxrwx jp/jp           699 2022-06-02 10:04 exp2.c-
-rwxrwxrwx jp/jp           893 2022-06-02 10:04 exp3.c-
-rwxrwxrwx jp/jp          1267 2022-06-02 10:04 exp4.c-
-rwxrwxrwx jp/jp          1079 2022-06-02 10:04 exp.c-
-rwxrwxrwx jp/jp            59 2022-06-02 10:04 expL.c-
-rwxrwxrwx jp/jp            59 2022-06-02 10:04 expR.c-
-rwxrwxrwx jp/jp           281 2022-06-02 10:04 fact.c-
-rwxrwxrwx jp/jp           914 2022-06-02 10:04 factor.c-
-rwxrwxrwx jp/jp           356 2022-06-02 10:04 factorial2.c-
-rwxrwxrwx jp/jp           353 2022-06-02 10:04 factorial.c-
-rwxrwxrwx jp/jp           269 2022-06-02 10:04 factorialr.c-
-rwxrwxrwx jp/jp           171 2022-06-02 10:04 fail.c-
-rwxrwxrwx jp/jp           164 2022-06-02 10:04 for2.c-
-rwxrwxrwx jp/jp           204 2022-06-02 10:04 fora.c-
-rwxrwxrwx jp/jp           139 2022-06-02 10:04 forb.c-
-rwxrwxrwx jp/jp           465 2022-06-02 10:04 for.c-
-rwxrwxrwx jp/jp           262 2022-06-02 10:04 forerr.c-
-rwxrwxrwx jp/jp           984 2022-06-02 10:04 forscope.c-
-rwxrwxrwx jp/jp           763 2022-06-02 10:04 funcscope.c-
-rwxrwxrwx jp/jp           280 2022-06-02 10:04 gcd2.c-
-rwxrwxrwx jp/jp           335 2022-06-02 10:04 gcd.c-
-rwxrwxrwx jp/jp           150 2022-06-02 10:04 gcdsm2.c-
-rwxrwxrwx jp/jp           189 2022-06-02 10:04 gcdsm.c-
-rwxrwxrwx jp/jp           307 2022-06-02 10:04 id.c-
-rwxrwxrwx jp/jp           398 2022-06-02 10:04 if2.c-
-rwxrwxrwx jp/jp           112 2022-06-02 10:04 if.c-
-rwxrwxrwx jp/jp           242 2022-06-02 10:04 ifevil.c-
-rwxrwxrwx jp/jp           299 2022-06-02 10:04 ifNest.c-
-rwxrwxrwx jp/jp           272 2022-06-02 10:04 init2.c-
-rwxrwxrwx jp/jp           411 2022-06-02 10:04 init3.c-
-rwxrwxrwx jp/jp           105 2022-06-02 10:04 init4.c-
-rwxrwxrwx jp/jp           528 2022-06-02 10:04 init5.c-
-rwxrwxrwx jp/jp           112 2022-06-02 10:04 initbad2.c-
-rwxrwxrwx jp/jp           186 2022-06-02 10:04 initbad.c-
-rwxrwxrwx jp/jp           146 2022-06-02 10:04 init.c-
-rwxrwxrwx jp/jp           118 2022-06-02 10:04 initconst.c-
-rwxrwxrwx jp/jp            72 2022-06-02 10:04 initsm.c-
-rwxrwxrwx jp/jp           146 2022-06-02 10:04 initused.c-
-rwxrwxrwx jp/jp            42 2022-06-02 10:04 invalidChar.c-
-rwxrwxrwx jp/jp           848 2022-06-02 10:04 io.c-
-rwxrwxrwx jp/jp           147 2022-06-02 10:04 lec01.c-
-rwxrwxrwx jp/jp            64 2022-06-02 10:04 lec02.c-
-rwxrwxrwx jp/jp            77 2022-06-02 10:04 lec03.c-
-rwxrwxrwx jp/jp           114 2022-06-02 10:04 lec04.c-
-rwxrwxrwx jp/jp           449 2022-06-02 10:04 lhs.c-
-rwxrwxrwx jp/jp           482 2022-06-02 10:04 loops.c-
-rwxrwxrwx jp/jp           549 2022-06-02 10:04 loopscope2.c-
-rwxrwxrwx jp/jp           163 2022-06-02 10:04 loopscope.c-
-rwxrwxrwx jp/jp           386 2022-06-02 10:04 matchunmatch.c-
-rwxrwxrwx jp/jp           261 2022-06-02 10:04 mem2.c-
-rwxrwxrwx jp/jp           772 2022-06-02 10:04 mem.c-
-rwxrwxrwx jp/jp           297 2022-06-02 10:04 memcall.c-
-rwxrwxrwx jp/jp           336 2022-06-02 10:04 memory2.c-
-rwxrwxrwx jp/jp           440 2022-06-02 10:04 memory.c-
-rwxrwxrwx jp/jp            79 2022-06-02 10:04 memtype.c-
-rwxrwxrwx jp/jp           112 2022-06-02 10:04 minus.c-
-rwxrwxrwx jp/jp           505 2022-06-02 10:04 mixed.c-
-rwxrwxrwx jp/jp           298 2022-06-02 10:04 mixedControl2.c-
-rwxrwxrwx jp/jp           364 2022-06-02 10:04 mixedControl3.c-
-rwxrwxrwx jp/jp           490 2022-06-02 10:04 mixedControl.c-
-rwxrwxrwx jp/jp            53 2022-06-02 10:04 nano.c-
-rwxrwxrwx jp/jp          1547 2022-06-02 10:04 nest.c-
-rwxrwxrwx jp/jp           472 2022-06-02 10:04 nested.c-
-rwxrwxrwx jp/jp           174 2022-06-02 10:04 nestedfors.c-
-rwxrwxrwx jp/jp          1289 2022-06-02 10:04 nestedmem.c-
-rwxrwxrwx jp/jp           265 2022-06-02 10:04 notused.c-
-rwxrwxrwx jp/jp           551 2022-06-02 10:04 oparray.c-
-rwxrwxrwx jp/jp           235 2022-06-02 10:04 op.c-
-rwxrwxrwx jp/jp          4230 2022-06-02 10:04 ops.c-
-rwxrwxrwx jp/jp           226 2022-06-02 10:04 optype.c-
-rwxrwxrwx jp/jp          9763 2022-06-02 10:04 overkill.c-
-rwxrwxrwx jp/jp           445 2022-06-02 10:04 overlapArray.c-
-rwxrwxrwx jp/jp           408 2022-06-02 10:04 overlap.c-
-rwxrwxrwx jp/jp           672 2022-06-02 10:04 overlapStatic.c-
-rwxrwxrwx jp/jp           142 2022-06-02 10:04 overlayArray.c-
-rwxrwxrwx jp/jp           432 2022-06-02 10:04 overlay.c-
-rwxrwxrwx jp/jp           118 2022-06-02 10:04 overlayCall.c-
-rwxrwxrwx jp/jp           383 2022-06-02 10:04 overlayTmp2.c-
-rwxrwxrwx jp/jp           481 2022-06-02 10:04 overlayTmp3.c-
-rwxrwxrwx jp/jp           363 2022-06-02 10:04 overlayTmp.c-
-rwxrwxrwx jp/jp           789 2022-06-02 10:04 param.c-
-rwxrwxrwx jp/jp           222 2022-06-02 10:04 paramerr2.c-
-rwxrwxrwx jp/jp           794 2022-06-02 10:04 paramerr3.c-
-rwxrwxrwx jp/jp          1059 2022-06-02 10:04 paramerr.c-
-rwxrwxrwx jp/jp           310 2022-06-02 10:04 parmtiny.c-
-rwxrwxrwx jp/jp           539 2022-06-02 10:04 part2.c-
-rwxrwxrwx jp/jp            91 2022-06-02 10:04 peek.c-
-rwxrwxrwx jp/jp           272 2022-06-02 10:04 precassoc.c-
-rwxrwxrwx jp/jp           321 2022-06-02 10:04 randomRoll.c-
-rwxrwxrwx jp/jp           209 2022-06-02 10:04 rangeifwhile.c-
-rwxrwxrwx jp/jp           508 2022-06-02 10:04 redefined.c-
-rwxrwxrwx jp/jp           164 2022-06-02 10:04 returnbad.c-
-rwxrwxrwx jp/jp           483 2022-06-02 10:04 return.c-
-rwxrwxrwx jp/jp          1489 2022-06-02 10:04 scope35.c-
-rwxrwxrwx jp/jp           981 2022-06-02 10:04 scope3.c-
-rwxrwxrwx jp/jp          1402 2022-06-02 10:04 scope4.c-
-rwxrwxrwx jp/jp           434 2022-06-02 10:04 scope5.c-
-rwxrwxrwx jp/jp           252 2022-06-02 10:04 scope6.c-
-rwxrwxrwx jp/jp           650 2022-06-02 10:04 scope.c-
-rwxrwxrwx jp/jp           121 2022-06-02 10:04 scopes.c-
-rwxrwxrwx jp/jp            63 2022-06-02 10:04 simple.c-
-rwxrwxrwx jp/jp           260 2022-06-02 10:04 simpleDefine.c-
-rwxrwxrwx jp/jp           362 2022-06-02 10:04 small.c-
-rwxrwxrwx jp/jp            93 2022-06-02 10:04 static.c-
-rwxrwxrwx jp/jp           464 2022-06-02 10:04 strange.c-
-rwxrwxrwx jp/jp           501 2022-06-02 10:04 stress.c-
-rwxrwxrwx jp/jp            73 2022-06-02 10:04 string.c-
-rwxrwxrwx jp/jp          1035 2022-06-02 10:04 testExample.c-
-rwxrwxrwx jp/jp           216 2022-06-02 10:04 tinybad.c-
-rwxrwxrwx jp/jp           182 2022-06-02 10:04 tiny.c-
-rwxrwxrwx jp/jp           162 2022-06-02 10:04 tinygood.c-
-rwxrwxrwx jp/jp           239 2022-06-02 10:04 tinyMixed2.c-
-rwxrwxrwx jp/jp           133 2022-06-02 10:04 tinyMixed.c-
-rwxrwxrwx jp/jp           308 2022-06-02 10:04 tinyMixedControl2.c-
-rwxrwxrwx jp/jp           380 2022-06-02 10:04 tinyMixedControl3.c-
-rwxrwxrwx jp/jp           490 2022-06-02 10:04 tinyMixedControl.c-
-rwxrwxrwx jp/jp           444 2022-06-02 10:04 tinyOverlap.c-
-rwxrwxrwx jp/jp           190 2022-06-02 10:04 tinyscope.c-
-rwxrwxrwx jp/jp           244 2022-06-02 10:04 types3.c-
-rwxrwxrwx jp/jp          1748 2022-06-02 10:04 types.c-
-rwxrwxrwx jp/jp           641 2022-06-02 10:04 unary.c-
-rwxrwxrwx jp/jp           305 2022-06-02 10:04 unarystar.c-
-rwxrwxrwx jp/jp           101 2022-06-02 10:04 undeclared.c-
-rwxrwxrwx jp/jp           658 2022-06-02 10:04 undefined.c-
-rwxrwxrwx jp/jp           217 2022-06-02 10:04 uninit2.c-
-rwxrwxrwx jp/jp           201 2022-06-02 10:04 uninit.c-
-rwxrwxrwx jp/jp           347 2022-06-02 10:04 uninitialized.c-
-rwxrwxrwx jp/jp           104 2022-06-02 10:04 unused.c-
-rwxrwxrwx jp/jp           947 2022-06-02 10:04 varAssign.c-
-rwxrwxrwx jp/jp           216 2022-06-02 10:04 var.c-
-rwxrwxrwx jp/jp           664 2022-06-02 10:04 varPair.c-
-rwxrwxrwx jp/jp           262 2022-06-02 10:04 vars.c-
-rwxrwxrwx jp/jp          1623 2022-06-02 10:04 walsh.c-
-rwxrwxrwx jp/jp            75 2022-06-02 10:04 while.c-
-rwxrwxrwx jp/jp          1792 2022-06-02 10:04 whileif.c-

==============
==============
./c- -M a2a.c-
WARNING(12): The variable 'endOfGlobals' seems not to be used.
Var: g of array of type char [mem: Global loc: -12 size: 11] [line: 1]
.   Child: 0  Const "pipsissewa" of array of type char [mem: Global loc: -1 size: 11] [line: 1]
Sibling: 1  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -24] [line: 3]
.   .   Child: 0  Var: a of array of type char [mem: Local loc: -3 size: 11] [line: 4]
.   .   Sibling: 1  Var: b of array of type char [mem: Local loc: -14 size: 11] [line: 4]
.   .   Child: 1  Assign: <= of array of type char [line: 6]
.   .   .   Child: 0  Id: a of array of type char [mem: Local loc: -3 size: 11] [line: 6]
.   .   .   Child: 1  Const "manifested" of array of type char [mem: Global loc: -23 size: 11] [line: 6]
.   .   Sibling: 1  Assign: <= of array of type char [line: 7]
.   .   .   Child: 0  Id: b of array of type char [mem: Local loc: -14 size: 11] [line: 7]
.   .   .   Child: 1  Id: g of array of type char [mem: Global loc: -12 size: 11] [line: 7]
.   .   Sibling: 2  Assign: <= of array of type char [line: 8]
.   .   .   Child: 0  Id: b of array of type char [mem: Local loc: -14 size: 11] [line: 8]
.   .   .   Child: 1  Id: a of array of type char [mem: Local loc: -3 size: 11] [line: 8]
.   .   Sibling: 3  Op: = of type bool [line: 9]
.   .   .   Child: 0  Id: b of array of type char [mem: Local loc: -14 size: 11] [line: 9]
.   .   .   Child: 1  Id: a of array of type char [mem: Local loc: -3 size: 11] [line: 9]
.   .   Sibling: 4  Op: > of type bool [line: 10]
.   .   .   Child: 0  Const "unquestionable" of array of type char [mem: Global loc: -34 size: 15] [line: 10]
.   .   .   Child: 1  Const "transformation" of array of type char [mem: Global loc: -49 size: 15] [line: 10]
Sibling: 2  Var: endOfGlobals of type int [mem: Global loc: -63 size: 1] [line: 12]
Offset for end of global space: -64
Number of warnings: 1
Number of errors: 0

==============
==============
./c- -M allbad.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
ERROR(2): Function 'ant' at line 2 is expecting to return type char but returns type int.
ERROR(7): '<=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(8): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(9): '<=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(11): '>' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(12): '<' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(13): '!<' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(13): '!>' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(14): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(15): 'and' requires operands of type bool but lhs is of type int.
ERROR(15): Expecting Boolean test condition in if statement but got type int.
ERROR(15): Unary 'not' requires an operand of type bool but was given type int.
ERROR(16): Expecting Boolean test condition in if statement but got type int.
ERROR(16): 'or' requires operands of type bool but lhs is of type int.
ERROR(16): Unary 'not' requires an operand of type bool but was given type int.
ERROR(17): Expecting Boolean test condition in if statement but got type int.
ERROR(17): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(21): '+' requires operands of type int but lhs is of type bool.
ERROR(22): '-' requires operands of type int but rhs is of type bool.
ERROR(23): '*' requires operands of type int but lhs is of type bool.
ERROR(24): '/' requires operands of type int but rhs is of type bool.
ERROR(25): '%' requires operands of type int but lhs is of type bool.
ERROR(27): '+=' requires operands of type int but lhs is of type bool.
ERROR(28): '-=' requires operands of type int but lhs is of type bool.
ERROR(29): '*=' requires operands of type int but lhs is of type bool.
ERROR(30): '/=' requires operands of type int but lhs is of type bool.
ERROR(32): Unary 'chsign' requires an operand of type int but was given type bool.
ERROR(33): Unary 'not' requires an operand of type bool but was given type int.
ERROR(34): Unary '?' requires an operand of type int but was given type bool.
WARNING(42): Variable 'aa' may be uninitialized when used here.
ERROR(43): Array 'ba' should be indexed by type int but got type char.
ERROR(43): '<=' requires operands of the same type but lhs is type char and rhs is type int.
WARNING(43): Variable 'b' may be uninitialized when used here.
ERROR(44): Array 'ca' should be indexed by type int but got type bool.
ERROR(44): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
WARNING(44): Variable 'c' may be uninitialized when used here.
ERROR(45): Array 'aa' should be indexed by type int but got type bool.
ERROR(45): Array index is the unindexed array 'aa'.
ERROR(46): Cannot index nonarray 'cat'.
ERROR(46): Cannot use function 'cat' as a variable.
ERROR(47): Cannot use function 'cat' as a variable.
ERROR(47): Too many parameters passed for function 'cat' declared on line 37.
ERROR(54): '<=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(65): '<=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(67): Cannot return an array.
WARNING(73): Variable 'i' may be uninitialized when used here.
ERROR(79): Symbol 'a' is already declared at line 79.
WARNING(79): The function 'elk' seems not to be used.
ERROR(81): Symbol 'a' is already declared at line 79.
ERROR(82): Symbol 'b' is not declared.
WARNING(84): The variable 'a' seems not to be used.
ERROR(85): Symbol 'c' is not declared.
ERROR(85): Symbol 'c' is not declared.
ERROR(86): Symbol 'c' is not declared.
WARNING(86): Variable 'b' may be uninitialized when used here.
WARNING(91): The function 'mane' seems not to be used.
ERROR(96): The operation '?' does not work with arrays.
ERROR(96): Unary '?' requires an operand of type int but was given type char.
ERROR(97): '/' requires operands of type int but lhs is of type char.
ERROR(97): '/' requires operands of type int but rhs is of type char.
ERROR(97): The operation '/' does not work with arrays.
ERROR(98): The operation 'sizeof' only works with arrays.
ERROR(99): 'bbb' is a simple variable and cannot be called.
ERROR(101): Expecting type bool in parameter 1 of call to 'bat' declared on line 4 but got type int.
ERROR(101): Expecting type int in parameter 2 of call to 'bat' declared on line 4 but got type char.
ERROR(102): '<=' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(103): Expecting type bool in parameter 1 of call to 'bat' declared on line 4 but got type char.
ERROR(103): Expecting type int in parameter 2 of call to 'bat' declared on line 4 but got type bool.
ERROR(105): '+' requires operands of type int but lhs is of type void.
ERROR(105): '+' requires operands of type int but rhs is of type bool.
ERROR(105): Too few parameters passed for function 'dog' declared on line 70.
ERROR(107): '+' requires operands of type int but lhs is of type char.
ERROR(110): Symbol 'mane' is already declared at line 91.
Number of warnings: 8
Number of errors: 66

==============
==============
./c- -M allgood.c-
WARNING(40): Variable 'aa' may be uninitialized when used here.
WARNING(41): Variable 'b' may be uninitialized when used here.
WARNING(42): Variable 'c' may be uninitialized when used here.
ERROR(47): Cannot use array in position 1 in range of for statement.
ERROR(47): Cannot use array in position 2 in range of for statement.
ERROR(48): Cannot use array in position 1 in range of for statement.
ERROR(48): Cannot use array in position 2 in range of for statement.
ERROR(48): Cannot use array in position 3 in range of for statement.
ERROR(48): Expecting type int in position 1 in range of for statement but got type bool.
WARNING(48): The variable 'z' seems not to be used.
WARNING(67): The function 'dog' seems not to be used.
WARNING(70): Variable 'i' may be uninitialized when used here.
Number of warnings: 6
Number of errors: 6

==============
==============
./c- -M array2.c-
WARNING(24): Variable 'y' may be uninitialized when used here.
Var: w of array of type int [mem: Global loc: -1 size: 34] [line: 2]
Sibling: 1  Func: dog returns type int [mem: Global loc: 0 size: -3] [line: 4]
.   Child: 0  Parm: x of type int [mem: Parameter loc: -2 size: 1] [line: 4]
.   Child: 1  Compound [mem: None loc: 0 size: -27] [line: 4]
.   .   Child: 0  Var: y of array of type int [mem: Local loc: -4 size: 23] [line: 5]
.   .   Sibling: 1  Var: z of type int [mem: Local loc: -26 size: 1] [line: 5]
.   .   Child: 1  Assign: <= of type int [line: 7]
.   .   .   Child: 0  Op: [ of type int [line: 7]
.   .   .   .   Child: 0  Id: y of array of type int [mem: Local loc: -4 size: 23] [line: 7]
.   .   .   .   Child: 1  Const 11 of type int [line: 7]
.   .   .   Child: 1  Op: + of type int [line: 7]
.   .   .   .   Child: 0  Op: * of type int [line: 7]
.   .   .   .   .   Child: 0  Id: x of type int [mem: Parameter loc: -2 size: 1] [line: 7]
.   .   .   .   .   Child: 1  Const 111 of type int [line: 7]
.   .   .   .   Child: 1  Const 222 of type int [line: 7]
.   .   Sibling: 1  Assign: <= of type int [line: 8]
.   .   .   Child: 0  Id: z of type int [mem: Local loc: -26 size: 1] [line: 8]
.   .   .   Child: 1  Op: [ of type int [line: 8]
.   .   .   .   Child: 0  Id: y of array of type int [mem: Local loc: -4 size: 23] [line: 8]
.   .   .   .   Child: 1  Const 11 of type int [line: 8]
.   .   Sibling: 2  Assign: <= of type int [line: 9]
.   .   .   Child: 0  Op: [ of type int [line: 9]
.   .   .   .   Child: 0  Id: w of array of type int [mem: Global loc: -1 size: 34] [line: 9]
.   .   .   .   Child: 1  Const 13 of type int [line: 9]
.   .   .   Child: 1  Op: * of type int [line: 9]
.   .   .   .   Child: 0  Op: * of type int [line: 9]
.   .   .   .   .   Child: 0  Op: * of type int [line: 9]
.   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 9]
.   .   .   .   .   .   .   Child: 0  Op: [ of type int [line: 9]
.   .   .   .   .   .   .   .   Child: 0  Id: w of array of type int [mem: Global loc: -1 size: 34] [line: 9]
.   .   .   .   .   .   .   .   Child: 1  Const 15 of type int [line: 9]
.   .   .   .   .   .   Child: 1  Id: x of type int [mem: Parameter loc: -2 size: 1] [line: 9]
.   .   .   .   .   Child: 1  Op: [ of type int [line: 9]
.   .   .   .   .   .   Child: 0  Id: y of array of type int [mem: Local loc: -4 size: 23] [line: 9]
.   .   .   .   .   .   Child: 1  Const 17 of type int [line: 9]
.   .   .   .   Child: 1  Id: z of type int [mem: Local loc: -26 size: 1] [line: 9]
.   .   Sibling: 3  Return [line: 11]
.   .   .   Child: 0  Op: * of type int [line: 11]
.   .   .   .   Child: 0  Id: z of type int [mem: Local loc: -26 size: 1] [line: 11]
.   .   .   .   Child: 1  Op: [ of type int [line: 11]
.   .   .   .   .   Child: 0  Id: y of array of type int [mem: Local loc: -4 size: 23] [line: 11]
.   .   .   .   .   Child: 1  Const 11 of type int [line: 11]
Sibling: 2  Func: cat returns type void [mem: Global loc: 0 size: -4] [line: 14]
.   Child: 0  Parm: x of array of type int [mem: Parameter loc: -2 size: 1] [line: 14]
.   Sibling: 1  Parm: z of type int [mem: Parameter loc: -3 size: 1] [line: 14]
.   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 14]
.   .   Child: 1  Assign: <= of type int [line: 15]
.   .   .   Child: 0  Op: [ of type int [line: 15]
.   .   .   .   Child: 0  Id: x of array of type int [mem: Parameter loc: -2 size: 1] [line: 15]
.   .   .   .   Child: 1  Const 10 of type int [line: 15]
.   .   .   Child: 1  Const 333 of type int [line: 15]
.   .   Sibling: 1  Assign: <= of type int [line: 16]
.   .   .   Child: 0  Op: [ of type int [line: 16]
.   .   .   .   Child: 0  Id: w of array of type int [mem: Global loc: -1 size: 34] [line: 16]
.   .   .   .   Child: 1  Const 11 of type int [line: 16]
.   .   .   Child: 1  Const 444 of type int [line: 16]
.   .   Sibling: 2  For [mem: None loc: 0 size: -5] [line: 17]
.   .   .   Child: 0  Var: i of type int [mem: Local loc: -4 size: 1] [line: 17]
.   .   .   Child: 1  Range [line: 17]
.   .   .   .   Child: 0  Const 1 of type int [line: 17]
.   .   .   .   Child: 1  Op: sizeof of type int [line: 17]
.   .   .   .   .   Child: 0  Id: x of array of type int [mem: Parameter loc: -2 size: 1] [line: 17]
.   .   .   Child: 2  Assign: += of type int [line: 18]
.   .   .   .   Child: 0  Op: [ of type int [line: 18]
.   .   .   .   .   Child: 0  Id: w of array of type int [mem: Global loc: -1 size: 34] [line: 18]
.   .   .   .   .   Child: 1  Op: [ of type int [line: 18]
.   .   .   .   .   .   Child: 0  Id: x of array of type int [mem: Parameter loc: -2 size: 1] [line: 18]
.   .   .   .   .   .   Child: 1  Id: i of type int [mem: Local loc: -4 size: 1] [line: 18]
.   .   .   .   Child: 1  Op: * of type int [line: 18]
.   .   .   .   .   Child: 0  Op: [ of type int [line: 18]
.   .   .   .   .   .   Child: 0  Id: w of array of type int [mem: Global loc: -1 size: 34] [line: 18]
.   .   .   .   .   .   Child: 1  Op: [ of type int [line: 18]
.   .   .   .   .   .   .   Child: 0  Id: x of array of type int [mem: Parameter loc: -2 size: 1] [line: 18]
.   .   .   .   .   .   .   Child: 1  Op: - of type int [line: 18]
.   .   .   .   .   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -4 size: 1] [line: 18]
.   .   .   .   .   .   .   .   Child: 1  Const 1 of type int [line: 18]
.   .   .   .   .   Child: 1  Id: z of type int [mem: Parameter loc: -3 size: 1] [line: 18]
Sibling: 3  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 21]
.   Child: 1  Compound [mem: None loc: 0 size: -23] [line: 21]
.   .   Child: 0  Var: y of array of type int [mem: Local loc: -3 size: 21] [line: 22]
.   .   Child: 1  Call: cat of type void [line: 24]
.   .   .   Child: 0  Id: y of array of type int [mem: Local loc: -3 size: 21] [line: 24]
.   .   .   Sibling: 1  Const 12 of type int [line: 24]
.   .   Sibling: 1  Call: dog of type int [line: 25]
.   .   .   Child: 0  Const 666 of type int [line: 25]
Offset for end of global space: -34
Number of warnings: 1
Number of errors: 0

==============
==============
./c- -M array.c-
WARNING(12): Variable 'b' may be uninitialized when used here.
Var: a of array of type int [mem: Global loc: -1 size: 12] [line: 2]
Sibling: 1  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 4]
.   Child: 1  Compound [mem: None loc: 0 size: -25] [line: 5]
.   .   Child: 0  Var: b of array of type int [mem: Local loc: -3 size: 23] [line: 6]
.   .   Sibling: 1  Var: c of static array of type int [mem: LocalStatic loc: -13 size: 34] [line: 7]
.   .   Child: 1  Op: [ of type int [line: 9]
.   .   .   Child: 0  Id: c of static array of type int [mem: LocalStatic loc: -13 size: 34] [line: 9]
.   .   .   Child: 1  Const 22 of type int [line: 9]
.   .   Sibling: 1  Const 999 of type int [line: 10]
.   .   Sibling: 2  Call: output of type void [line: 11]
.   .   .   Child: 0  Op: sizeof of type int [line: 11]
.   .   .   .   Child: 0  Id: a of array of type int [mem: Global loc: -1 size: 12] [line: 11]
.   .   Sibling: 3  Call: output of type void [line: 12]
.   .   .   Child: 0  Op: sizeof of type int [line: 12]
.   .   .   .   Child: 0  Id: b of array of type int [mem: Local loc: -3 size: 23] [line: 12]
.   .   Sibling: 4  Call: output of type void [line: 13]
.   .   .   Child: 0  Op: sizeof of type int [line: 13]
.   .   .   .   Child: 0  Id: c of static array of type int [mem: LocalStatic loc: -13 size: 34] [line: 13]
Offset for end of global space: -46
Number of warnings: 1
Number of errors: 0

==============
==============
./c- -M arrayex.c-
WARNING(5): Variable 'b' may be uninitialized when used here.
Func: main returns type void [mem: Global loc: 0 size: -2] [line: 1]
.   Child: 1  Compound [mem: None loc: 0 size: -29] [line: 2]
.   .   Child: 0  Var: a of array of type int [mem: Local loc: -3 size: 11] [line: 3]
.   .   Sibling: 1  Var: b of array of type int [mem: Local loc: -14 size: 16] [line: 3]
.   .   Child: 1  Assign: <= of array of type int [line: 5]
.   .   .   Child: 0  Id: a of array of type int [mem: Local loc: -3 size: 11] [line: 5]
.   .   .   Child: 1  Id: b of array of type int [mem: Local loc: -14 size: 16] [line: 5]
.   .   Sibling: 1  Assign: <= of array of type int [line: 6]
.   .   .   Child: 0  Id: b of array of type int [mem: Local loc: -14 size: 16] [line: 6]
.   .   .   Child: 1  Id: a of array of type int [mem: Local loc: -3 size: 11] [line: 6]
.   .   Sibling: 2  Op: = of type bool [line: 7]
.   .   .   Child: 0  Id: b of array of type int [mem: Local loc: -14 size: 16] [line: 7]
.   .   .   Child: 1  Id: a of array of type int [mem: Local loc: -3 size: 11] [line: 7]
.   .   Sibling: 3  Op: !< of type bool [line: 8]
.   .   .   Child: 0  Id: b of array of type int [mem: Local loc: -14 size: 16] [line: 8]
.   .   .   Child: 1  Id: a of array of type int [mem: Local loc: -3 size: 11] [line: 8]
Offset for end of global space: 0
Number of warnings: 1
Number of errors: 0

==============
==============
./c- -M arrayops.c-
ERROR(13): '<=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(14): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(18): The operation 'chsign' does not work with arrays.
ERROR(19): The operation 'chsign' does not work with arrays.
ERROR(21): Cannot index nonarray 'a'.
ERROR(22): Array index is the unindexed array 'aa'.
ERROR(22): Cannot index nonarray 'a'.
ERROR(24): Array index is the unindexed array 'aa'.
ERROR(26): The operation 'sizeof' only works with arrays.
ERROR(29): The operation '?' does not work with arrays.
ERROR(31): The operation 'not' does not work with arrays.
ERROR(33): The operation '++' does not work with arrays.
ERROR(36): The operation '+' does not work with arrays.
ERROR(37): The operation '+' does not work with arrays.
ERROR(38): The operation '+' does not work with arrays.
ERROR(41): The operation 'and' does not work with arrays.
ERROR(42): The operation 'and' does not work with arrays.
ERROR(43): The operation 'and' does not work with arrays.
ERROR(45): Cannot index nonarray 'c'.
WARNING(45): Variable 'c' may be uninitialized when used here.
WARNING(46): Variable 'cc' may be uninitialized when used here.
ERROR(47): Cannot index nonarray 'c'.
ERROR(47): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(48): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(51): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(56): '=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(57): '=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(58): '=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(63): '!<' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(64): '!<' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(65): '!<' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(70): '<' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(71): '<' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(72): '<' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(75): '<' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(75): '<' requires operands of the same type but lhs is type char and rhs is type int.
Number of warnings: 2
Number of errors: 34

==============
==============
./c- -M arrays2.c-
WARNING(5): The variable 'bbb' seems not to be used.
WARNING(5): The variable 'bb' seems not to be used.
WARNING(5): The variable 'b' seems not to be used.
WARNING(8): Variable 'aa' may be uninitialized when used here.
ERROR(9): '<=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(10): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
WARNING(14): Variable 'cc' may be uninitialized when used here.
ERROR(15): '<=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(16): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(20): '<=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(21): '<=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(21): '<=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(22): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(22): '<=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(23): '<=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(24): '<=' requires operands of the same type but lhs is type int and rhs is type char.
Number of warnings: 5
Number of errors: 11

==============
==============
./c- -M arrays.c-
WARNING(10): The variable 'ya' seems not to be used.
WARNING(10): The variable 'y' seems not to be used.
WARNING(12): Variable 'xa' may be uninitialized when used here.
WARNING(13): Variable 'ca' may be uninitialized when used here.
WARNING(14): Variable 'ba' may be uninitialized when used here.
ERROR(15): '<=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(16): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(17): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(19): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
WARNING(19): Variable 'x' may be uninitialized when used here.
ERROR(20): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
WARNING(20): Variable 'c' may be uninitialized when used here.
ERROR(21): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
WARNING(21): Variable 'b' may be uninitialized when used here.
ERROR(22): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(22): '<=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(23): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(23): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(25): '<=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(26): '<=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(27): '<=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(28): '<=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(28): '<=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(29): '<=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(29): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(31): '=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(31): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(32): '=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(32): '=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(34): '!=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(34): '!=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(35): '!=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(35): '!=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(44): '>' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(45): '>' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(47): The operation '?' does not work with arrays.
ERROR(50): The operation 'sizeof' only works with arrays.
ERROR(51): Cannot index nonarray 'x'.
ERROR(52): Cannot index nonarray 'x'.
ERROR(52): The operation 'sizeof' only works with arrays.
ERROR(54): The operation 'sizeof' only works with arrays.
Number of warnings: 8
Number of errors: 33

==============
==============
./c- -M arrayx.c-
WARNING(2): The variable 'e' seems not to be used.
ERROR(6): Initializer for variable 'bb' requires both operands be arrays or not but variable is an array and rhs is not an array.
ERROR(7): Initializer for variable 'cc' requires both operands be arrays or not but variable is an array and rhs is not an array.
ERROR(8): Initializer for variable 'ii' requires both operands be arrays or not but variable is an array and rhs is not an array.
ERROR(10): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(11): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(12): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
WARNING(19): Variable 'd' may be uninitialized when used here.
Number of warnings: 2
Number of errors: 6

==============
==============
./c- -M assignb.c-
WARNING(5): The variable 'c' seems not to be used.
ERROR(7): Symbol 'x' is not declared.
ERROR(7): Symbol 'x' is not declared.
ERROR(8): Symbol 'x' is not declared.
WARNING(9): Variable 'aa' may be uninitialized when used here.
WARNING(10): Variable 'b' may be uninitialized when used here.
WARNING(12): Variable 'cc' may be uninitialized when used here.
Number of warnings: 4
Number of errors: 3

==============
==============
./c- -M assignBool.c-
WARNING(34): Variable 'zx' may be uninitialized when used here.
WARNING(34): Variable 'zy' may be uninitialized when used here.
Var: gx of type bool [mem: Global loc: 0 size: 1] [line: 2]
Sibling: 1  Var: gy of array of type bool [mem: Global loc: -2 size: 11] [line: 2]
Sibling: 2  Func: esperanza returns type void [mem: Global loc: 0 size: -4] [line: 4]
.   Child: 0  Parm: px of type bool [mem: Parameter loc: -2 size: 1] [line: 4]
.   Sibling: 1  Parm: py of array of type bool [mem: Parameter loc: -3 size: 1] [line: 4]
.   Child: 1  Compound [mem: None loc: 0 size: -16] [line: 5]
.   .   Child: 0  Var: x of type bool [mem: Local loc: -4 size: 1] [line: 6]
.   .   Sibling: 1  Var: y of array of type bool [mem: Local loc: -6 size: 11] [line: 6]
.   .   Sibling: 2  Var: sx of static type bool [mem: LocalStatic loc: -12 size: 1] [line: 7]
.   .   Sibling: 3  Var: sy of static array of type bool [mem: LocalStatic loc: -14 size: 11] [line: 7]
.   .   Child: 1  Assign: <= of type bool [line: 9]
.   .   .   Child: 0  Id: gx of type bool [mem: Global loc: 0 size: 1] [line: 9]
.   .   .   Child: 1  Const true of type bool [line: 9]
.   .   Sibling: 1  Call: outputb of type void [line: 10]
.   .   .   Child: 0  Id: gx of type bool [mem: Global loc: 0 size: 1] [line: 10]
.   .   Sibling: 2  Assign: <= of type bool [line: 11]
.   .   .   Child: 0  Op: [ of type bool [line: 11]
.   .   .   .   Child: 0  Id: gy of array of type bool [mem: Global loc: -2 size: 11] [line: 11]
.   .   .   .   Child: 1  Const 9 of type int [line: 11]
.   .   .   Child: 1  Const true of type bool [line: 11]
.   .   Sibling: 3  Call: outputb of type void [line: 12]
.   .   .   Child: 0  Op: [ of type bool [line: 12]
.   .   .   .   Child: 0  Id: gy of array of type bool [mem: Global loc: -2 size: 11] [line: 12]
.   .   .   .   Child: 1  Const 9 of type int [line: 12]
.   .   Sibling: 4  Assign: <= of type bool [line: 13]
.   .   .   Child: 0  Id: x of type bool [mem: Local loc: -4 size: 1] [line: 13]
.   .   .   Child: 1  Const true of type bool [line: 13]
.   .   Sibling: 5  Call: outputb of type void [line: 14]
.   .   .   Child: 0  Id: x of type bool [mem: Local loc: -4 size: 1] [line: 14]
.   .   Sibling: 6  Assign: <= of type bool [line: 15]
.   .   .   Child: 0  Op: [ of type bool [line: 15]
.   .   .   .   Child: 0  Id: y of array of type bool [mem: Local loc: -6 size: 11] [line: 15]
.   .   .   .   Child: 1  Const 9 of type int [line: 15]
.   .   .   Child: 1  Const true of type bool [line: 15]
.   .   Sibling: 7  Call: outputb of type void [line: 16]
.   .   .   Child: 0  Op: [ of type bool [line: 16]
.   .   .   .   Child: 0  Id: y of array of type bool [mem: Local loc: -6 size: 11] [line: 16]
.   .   .   .   Child: 1  Const 9 of type int [line: 16]
.   .   Sibling: 8  Call: outnl of type void [line: 17]
.   .   Sibling: 9  Assign: <= of type bool [line: 19]
.   .   .   Child: 0  Id: px of type bool [mem: Parameter loc: -2 size: 1] [line: 19]
.   .   .   Child: 1  Const true of type bool [line: 19]
.   .   Sibling: 10  Call: outputb of type void [line: 20]
.   .   .   Child: 0  Id: px of type bool [mem: Parameter loc: -2 size: 1] [line: 20]
.   .   Sibling: 11  Assign: <= of type bool [line: 21]
.   .   .   Child: 0  Op: [ of type bool [line: 21]
.   .   .   .   Child: 0  Id: py of array of type bool [mem: Parameter loc: -3 size: 1] [line: 21]
.   .   .   .   Child: 1  Const 9 of type int [line: 21]
.   .   .   Child: 1  Const true of type bool [line: 21]
.   .   Sibling: 12  Call: outputb of type void [line: 22]
.   .   .   Child: 0  Op: [ of type bool [line: 22]
.   .   .   .   Child: 0  Id: py of array of type bool [mem: Parameter loc: -3 size: 1] [line: 22]
.   .   .   .   Child: 1  Const 9 of type int [line: 22]
.   .   Sibling: 13  Assign: <= of type bool [line: 23]
.   .   .   Child: 0  Id: sx of static type bool [mem: LocalStatic loc: -12 size: 1] [line: 23]
.   .   .   Child: 1  Const true of type bool [line: 23]
.   .   Sibling: 14  Call: outputb of type void [line: 24]
.   .   .   Child: 0  Id: sx of static type bool [mem: LocalStatic loc: -12 size: 1] [line: 24]
.   .   Sibling: 15  Assign: <= of type bool [line: 25]
.   .   .   Child: 0  Op: [ of type bool [line: 25]
.   .   .   .   Child: 0  Id: sy of static array of type bool [mem: LocalStatic loc: -14 size: 11] [line: 25]
.   .   .   .   Child: 1  Const 9 of type int [line: 25]
.   .   .   Child: 1  Const true of type bool [line: 25]
.   .   Sibling: 16  Call: outputb of type void [line: 26]
.   .   .   Child: 0  Op: [ of type bool [line: 26]
.   .   .   .   Child: 0  Id: sy of static array of type bool [mem: LocalStatic loc: -14 size: 11] [line: 26]
.   .   .   .   Child: 1  Const 9 of type int [line: 26]
.   .   Sibling: 17  Call: outnl of type void [line: 27]
Sibling: 3  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 31]
.   Child: 1  Compound [mem: None loc: 0 size: -14] [line: 32]
.   .   Child: 0  Var: zx of type bool [mem: Local loc: -2 size: 1] [line: 33]
.   .   Sibling: 1  Var: zy of array of type bool [mem: Local loc: -4 size: 11] [line: 33]
.   .   Child: 1  Call: esperanza of type void [line: 34]
.   .   .   Child: 0  Id: zx of type bool [mem: Local loc: -2 size: 1] [line: 34]
.   .   .   Sibling: 1  Id: zy of array of type bool [mem: Local loc: -4 size: 11] [line: 34]
Offset for end of global space: -24
Number of warnings: 2
Number of errors: 0

==============
==============
./c- -M assignChar.c-
WARNING(33): Variable 'zx' may be uninitialized when used here.
WARNING(33): Variable 'zy' may be uninitialized when used here.
Var: gx of type char [mem: Global loc: 0 size: 1] [line: 2]
Sibling: 1  Var: gy of array of type char [mem: Global loc: -2 size: 11] [line: 2]
Sibling: 2  Func: esperanza returns type void [mem: Global loc: 0 size: -4] [line: 4]
.   Child: 0  Parm: px of type char [mem: Parameter loc: -2 size: 1] [line: 4]
.   Sibling: 1  Parm: py of array of type char [mem: Parameter loc: -3 size: 1] [line: 4]
.   Child: 1  Compound [mem: None loc: 0 size: -16] [line: 5]
.   .   Child: 0  Var: x of type char [mem: Local loc: -4 size: 1] [line: 6]
.   .   Sibling: 1  Var: y of array of type char [mem: Local loc: -6 size: 11] [line: 6]
.   .   Sibling: 2  Var: sx of static type char [mem: LocalStatic loc: -12 size: 1] [line: 7]
.   .   Sibling: 3  Var: sy of static array of type char [mem: LocalStatic loc: -14 size: 11] [line: 7]
.   .   Child: 1  Assign: <= of type char [line: 9]
.   .   .   Child: 0  Id: gx of type char [mem: Global loc: 0 size: 1] [line: 9]
.   .   .   Child: 1  Const 'a' of type char [line: 9]
.   .   Sibling: 1  Call: outputc of type void [line: 10]
.   .   .   Child: 0  Id: gx of type char [mem: Global loc: 0 size: 1] [line: 10]
.   .   Sibling: 2  Assign: <= of type char [line: 11]
.   .   .   Child: 0  Op: [ of type char [line: 11]
.   .   .   .   Child: 0  Id: gy of array of type char [mem: Global loc: -2 size: 11] [line: 11]
.   .   .   .   Child: 1  Const 9 of type int [line: 11]
.   .   .   Child: 1  Const 'b' of type char [line: 11]
.   .   Sibling: 3  Call: outputc of type void [line: 12]
.   .   .   Child: 0  Op: [ of type char [line: 12]
.   .   .   .   Child: 0  Id: gy of array of type char [mem: Global loc: -2 size: 11] [line: 12]
.   .   .   .   Child: 1  Const 9 of type int [line: 12]
.   .   Sibling: 4  Assign: <= of type char [line: 13]
.   .   .   Child: 0  Id: x of type char [mem: Local loc: -4 size: 1] [line: 13]
.   .   .   Child: 1  Const 'c' of type char [line: 13]
.   .   Sibling: 5  Call: outputc of type void [line: 14]
.   .   .   Child: 0  Id: x of type char [mem: Local loc: -4 size: 1] [line: 14]
.   .   Sibling: 6  Assign: <= of type char [line: 15]
.   .   .   Child: 0  Op: [ of type char [line: 15]
.   .   .   .   Child: 0  Id: y of array of type char [mem: Local loc: -6 size: 11] [line: 15]
.   .   .   .   Child: 1  Const 9 of type int [line: 15]
.   .   .   Child: 1  Const 'd' of type char [line: 15]
.   .   Sibling: 7  Call: outputc of type void [line: 16]
.   .   .   Child: 0  Op: [ of type char [line: 16]
.   .   .   .   Child: 0  Id: y of array of type char [mem: Local loc: -6 size: 11] [line: 16]
.   .   .   .   Child: 1  Const 9 of type int [line: 16]
.   .   Sibling: 8  Call: outnl of type void [line: 17]
.   .   Sibling: 9  Assign: <= of type char [line: 18]
.   .   .   Child: 0  Id: px of type char [mem: Parameter loc: -2 size: 1] [line: 18]
.   .   .   Child: 1  Const 'e' of type char [line: 18]
.   .   Sibling: 10  Call: outputc of type void [line: 19]
.   .   .   Child: 0  Id: px of type char [mem: Parameter loc: -2 size: 1] [line: 19]
.   .   Sibling: 11  Assign: <= of type char [line: 20]
.   .   .   Child: 0  Op: [ of type char [line: 20]
.   .   .   .   Child: 0  Id: py of array of type char [mem: Parameter loc: -3 size: 1] [line: 20]
.   .   .   .   Child: 1  Const 9 of type int [line: 20]
.   .   .   Child: 1  Const 'f' of type char [line: 20]
.   .   Sibling: 12  Call: outputc of type void [line: 21]
.   .   .   Child: 0  Op: [ of type char [line: 21]
.   .   .   .   Child: 0  Id: py of array of type char [mem: Parameter loc: -3 size: 1] [line: 21]
.   .   .   .   Child: 1  Const 9 of type int [line: 21]
.   .   Sibling: 13  Assign: <= of type char [line: 22]
.   .   .   Child: 0  Id: sx of static type char [mem: LocalStatic loc: -12 size: 1] [line: 22]
.   .   .   Child: 1  Const 'f' of type char [line: 22]
.   .   Sibling: 14  Call: outputc of type void [line: 23]
.   .   .   Child: 0  Id: sx of static type char [mem: LocalStatic loc: -12 size: 1] [line: 23]
.   .   Sibling: 15  Assign: <= of type char [line: 24]
.   .   .   Child: 0  Op: [ of type char [line: 24]
.   .   .   .   Child: 0  Id: sy of static array of type char [mem: LocalStatic loc: -14 size: 11] [line: 24]
.   .   .   .   Child: 1  Const 9 of type int [line: 24]
.   .   .   Child: 1  Const 'h' of type char [line: 24]
.   .   Sibling: 16  Call: outputc of type void [line: 25]
.   .   .   Child: 0  Op: [ of type char [line: 25]
.   .   .   .   Child: 0  Id: sy of static array of type char [mem: LocalStatic loc: -14 size: 11] [line: 25]
.   .   .   .   Child: 1  Const 9 of type int [line: 25]
.   .   Sibling: 17  Call: outnl of type void [line: 26]
Sibling: 3  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 30]
.   Child: 1  Compound [mem: None loc: 0 size: -14] [line: 31]
.   .   Child: 0  Var: zx of type char [mem: Local loc: -2 size: 1] [line: 32]
.   .   Sibling: 1  Var: zy of array of type char [mem: Local loc: -4 size: 11] [line: 32]
.   .   Child: 1  Call: esperanza of type void [line: 33]
.   .   .   Child: 0  Id: zx of type char [mem: Local loc: -2 size: 1] [line: 33]
.   .   .   Sibling: 1  Id: zy of array of type char [mem: Local loc: -4 size: 11] [line: 33]
Offset for end of global space: -24
Number of warnings: 2
Number of errors: 0

==============
==============
./c- -M assignInt.c-
WARNING(33): Variable 'zx' may be uninitialized when used here.
WARNING(33): Variable 'zy' may be uninitialized when used here.
Var: gx of type int [mem: Global loc: 0 size: 1] [line: 2]
Sibling: 1  Var: gy of array of type int [mem: Global loc: -2 size: 11] [line: 2]
Sibling: 2  Func: esperanza returns type void [mem: Global loc: 0 size: -4] [line: 4]
.   Child: 0  Parm: px of type int [mem: Parameter loc: -2 size: 1] [line: 4]
.   Sibling: 1  Parm: py of array of type int [mem: Parameter loc: -3 size: 1] [line: 4]
.   Child: 1  Compound [mem: None loc: 0 size: -16] [line: 5]
.   .   Child: 0  Var: x of type int [mem: Local loc: -4 size: 1] [line: 6]
.   .   Sibling: 1  Var: y of array of type int [mem: Local loc: -6 size: 11] [line: 6]
.   .   Sibling: 2  Var: sx of static type int [mem: LocalStatic loc: -12 size: 1] [line: 7]
.   .   Sibling: 3  Var: sy of static array of type int [mem: LocalStatic loc: -14 size: 11] [line: 7]
.   .   Child: 1  Assign: <= of type int [line: 9]
.   .   .   Child: 0  Id: gx of type int [mem: Global loc: 0 size: 1] [line: 9]
.   .   .   Child: 1  Const 111 of type int [line: 9]
.   .   Sibling: 1  Call: output of type void [line: 10]
.   .   .   Child: 0  Id: gx of type int [mem: Global loc: 0 size: 1] [line: 10]
.   .   Sibling: 2  Assign: <= of type int [line: 11]
.   .   .   Child: 0  Op: [ of type int [line: 11]
.   .   .   .   Child: 0  Id: gy of array of type int [mem: Global loc: -2 size: 11] [line: 11]
.   .   .   .   Child: 1  Const 9 of type int [line: 11]
.   .   .   Child: 1  Const 222 of type int [line: 11]
.   .   Sibling: 3  Call: output of type void [line: 12]
.   .   .   Child: 0  Op: [ of type int [line: 12]
.   .   .   .   Child: 0  Id: gy of array of type int [mem: Global loc: -2 size: 11] [line: 12]
.   .   .   .   Child: 1  Const 9 of type int [line: 12]
.   .   Sibling: 4  Assign: <= of type int [line: 13]
.   .   .   Child: 0  Id: x of type int [mem: Local loc: -4 size: 1] [line: 13]
.   .   .   Child: 1  Const 333 of type int [line: 13]
.   .   Sibling: 5  Call: output of type void [line: 14]
.   .   .   Child: 0  Id: x of type int [mem: Local loc: -4 size: 1] [line: 14]
.   .   Sibling: 6  Assign: <= of type int [line: 15]
.   .   .   Child: 0  Op: [ of type int [line: 15]
.   .   .   .   Child: 0  Id: y of array of type int [mem: Local loc: -6 size: 11] [line: 15]
.   .   .   .   Child: 1  Const 9 of type int [line: 15]
.   .   .   Child: 1  Const 444 of type int [line: 15]
.   .   Sibling: 7  Call: output of type void [line: 16]
.   .   .   Child: 0  Op: [ of type int [line: 16]
.   .   .   .   Child: 0  Id: y of array of type int [mem: Local loc: -6 size: 11] [line: 16]
.   .   .   .   Child: 1  Const 9 of type int [line: 16]
.   .   Sibling: 8  Call: outnl of type void [line: 17]
.   .   Sibling: 9  Assign: <= of type int [line: 18]
.   .   .   Child: 0  Id: px of type int [mem: Parameter loc: -2 size: 1] [line: 18]
.   .   .   Child: 1  Const 555 of type int [line: 18]
.   .   Sibling: 10  Call: output of type void [line: 19]
.   .   .   Child: 0  Id: px of type int [mem: Parameter loc: -2 size: 1] [line: 19]
.   .   Sibling: 11  Assign: <= of type int [line: 20]
.   .   .   Child: 0  Op: [ of type int [line: 20]
.   .   .   .   Child: 0  Id: py of array of type int [mem: Parameter loc: -3 size: 1] [line: 20]
.   .   .   .   Child: 1  Const 9 of type int [line: 20]
.   .   .   Child: 1  Const 666 of type int [line: 20]
.   .   Sibling: 12  Call: output of type void [line: 21]
.   .   .   Child: 0  Op: [ of type int [line: 21]
.   .   .   .   Child: 0  Id: py of array of type int [mem: Parameter loc: -3 size: 1] [line: 21]
.   .   .   .   Child: 1  Const 9 of type int [line: 21]
.   .   Sibling: 13  Assign: <= of type int [line: 22]
.   .   .   Child: 0  Id: sx of static type int [mem: LocalStatic loc: -12 size: 1] [line: 22]
.   .   .   Child: 1  Const 777 of type int [line: 22]
.   .   Sibling: 14  Call: output of type void [line: 23]
.   .   .   Child: 0  Id: sx of static type int [mem: LocalStatic loc: -12 size: 1] [line: 23]
.   .   Sibling: 15  Assign: <= of type int [line: 24]
.   .   .   Child: 0  Op: [ of type int [line: 24]
.   .   .   .   Child: 0  Id: sy of static array of type int [mem: LocalStatic loc: -14 size: 11] [line: 24]
.   .   .   .   Child: 1  Const 9 of type int [line: 24]
.   .   .   Child: 1  Const 888 of type int [line: 24]
.   .   Sibling: 16  Call: output of type void [line: 25]
.   .   .   Child: 0  Op: [ of type int [line: 25]
.   .   .   .   Child: 0  Id: sy of static array of type int [mem: LocalStatic loc: -14 size: 11] [line: 25]
.   .   .   .   Child: 1  Const 9 of type int [line: 25]
.   .   Sibling: 17  Call: outnl of type void [line: 26]
Sibling: 3  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 30]
.   Child: 1  Compound [mem: None loc: 0 size: -14] [line: 31]
.   .   Child: 0  Var: zx of type int [mem: Local loc: -2 size: 1] [line: 32]
.   .   Sibling: 1  Var: zy of array of type int [mem: Local loc: -4 size: 11] [line: 32]
.   .   Child: 1  Call: esperanza of type void [line: 33]
.   .   .   Child: 0  Id: zx of type int [mem: Local loc: -2 size: 1] [line: 33]
.   .   .   Sibling: 1  Id: zy of array of type int [mem: Local loc: -4 size: 11] [line: 33]
Offset for end of global space: -24
Number of warnings: 2
Number of errors: 0

==============
==============
./c- -M assignSmall.c-
WARNING(6): Variable 'v' may be uninitialized when used here.
WARNING(8): Variable 'w' may be uninitialized when used here.
WARNING(11): Variable 'x' may be uninitialized when used here.
WARNING(13): Variable 'y' may be uninitialized when used here.
Func: main returns type void [mem: Global loc: 0 size: -2] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -7] [line: 3]
.   .   Child: 0  Var: v of type int [mem: Local loc: -2 size: 1] [line: 4]
.   .   Sibling: 1  Var: w of type int [mem: Local loc: -3 size: 1] [line: 4]
.   .   Sibling: 2  Var: x of type int [mem: Local loc: -4 size: 1] [line: 4]
.   .   Sibling: 3  Var: y of type int [mem: Local loc: -5 size: 1] [line: 4]
.   .   Sibling: 4  Var: z of type int [mem: Local loc: -6 size: 1] [line: 4]
.   .   Child: 1  Assign: <= of type int [line: 6]
.   .   .   Child: 0  Id: v of type int [mem: Local loc: -2 size: 1] [line: 6]
.   .   .   Child: 1  Op: + of type int [line: 6]
.   .   .   .   Child: 0  Id: v of type int [mem: Local loc: -2 size: 1] [line: 6]
.   .   .   .   Child: 1  Const 1 of type int [line: 6]
.   .   Sibling: 1  Assign: <= of type int [line: 7]
.   .   .   Child: 0  Id: v of type int [mem: Local loc: -2 size: 1] [line: 7]
.   .   .   Child: 1  Op: + of type int [line: 7]
.   .   .   .   Child: 0  Id: v of type int [mem: Local loc: -2 size: 1] [line: 7]
.   .   .   .   Child: 1  Const 1 of type int [line: 7]
.   .   Sibling: 2  Id: w of type int [mem: Local loc: -3 size: 1] [line: 8]
.   .   Sibling: 3  Id: w of type int [mem: Local loc: -3 size: 1] [line: 9]
.   .   Sibling: 4  Assign: <= of type int [line: 10]
.   .   .   Child: 0  Id: v of type int [mem: Local loc: -2 size: 1] [line: 10]
.   .   .   Child: 1  Id: w of type int [mem: Local loc: -3 size: 1] [line: 10]
.   .   Sibling: 5  Assign: ++ of type int [line: 11]
.   .   .   Child: 0  Id: x of type int [mem: Local loc: -4 size: 1] [line: 11]
.   .   Sibling: 6  Assign: ++ of type int [line: 12]
.   .   .   Child: 0  Id: x of type int [mem: Local loc: -4 size: 1] [line: 12]
.   .   Sibling: 7  Assign: -- of type int [line: 13]
.   .   .   Child: 0  Id: y of type int [mem: Local loc: -5 size: 1] [line: 13]
.   .   Sibling: 8  Assign: -- of type int [line: 14]
.   .   .   Child: 0  Id: y of type int [mem: Local loc: -5 size: 1] [line: 14]
.   .   Sibling: 9  Assign: += of type int [line: 15]
.   .   .   Child: 0  Id: z of type int [mem: Local loc: -6 size: 1] [line: 15]
.   .   .   Child: 1  Const 35 of type int [line: 15]
.   .   Sibling: 10  Assign: += of type int [line: 16]
.   .   .   Child: 0  Id: z of type int [mem: Local loc: -6 size: 1] [line: 16]
.   .   .   Child: 1  Const 35 of type int [line: 16]
Offset for end of global space: 0
Number of warnings: 4
Number of errors: 0

==============
==============
./c- -M badarray.c-
ERROR(3): Cannot return an array.
WARNING(3): Variable 'x' may be uninitialized when used here.
Number of warnings: 1
Number of errors: 1

==============
==============
./c- -M badcontrol.c-
ERROR(6): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(7): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(9): Expecting Boolean test condition in if statement but got type int.
ERROR(11): Expecting Boolean test condition in if statement but got type int.
ERROR(14): Expecting Boolean test condition in if statement but got type int.
ERROR(14): Expecting Boolean test condition in if statement but got type int.
ERROR(17): Expecting Boolean test condition in if statement but got type int.
ERROR(18): Expecting Boolean test condition in if statement but got type int.
ERROR(19): Expecting Boolean test condition in if statement but got type int.
ERROR(20): Expecting Boolean test condition in if statement but got type int.
ERROR(21): Expecting Boolean test condition in if statement but got type int.
ERROR(23): Expecting Boolean test condition in while statement but got type int.
ERROR(25): Expecting Boolean test condition in while statement but got type void.
ERROR(33): Expecting Boolean test condition in while statement but got type int.
ERROR(36): Expecting Boolean test condition in while statement but got type int.
ERROR(44): Cannot have a break statement outside of loop.
WARNING(46): The variable 'z' seems not to be used.
WARNING(48): The variable 'i' seems not to be used.
ERROR(50): Expecting type int in position 1 in range of for statement but got type bool.
WARNING(50): The variable 'i' seems not to be used.
ERROR(52): Expecting type int in position 1 in range of for statement but got type void.
ERROR(52): Symbol 'zog' is not declared.
WARNING(52): The variable 'i' seems not to be used.
ERROR(54): '<=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(56): Expecting type int in position 3 in range of for statement but got type bool.
WARNING(56): The variable 'i' seems not to be used.
ERROR(58): Expecting type int in position 3 in range of for statement but got type void.
WARNING(58): The variable 'i' seems not to be used.
ERROR(60): Symbol 'zog' is not declared.
WARNING(60): The variable 'i' seems not to be used.
ERROR(62): Symbol 'zog' is not declared.
WARNING(62): The variable 'i' seems not to be used.
Number of warnings: 8
Number of errors: 24

==============
==============
./c- -M basicAll5.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(11): The parameter 'x' seems not to be used.
ERROR(13): Symbol 'x' is already declared at line 11.
ERROR(17): Symbol 'cat' is not declared.
ERROR(19): Function 'dog' at line 11 is expecting to return type char but returns type int.
WARNING(19): Variable 'b' may be uninitialized when used here.
ERROR(22): Symbol 'dog' is already declared at line 11.
WARNING(22): Expecting to return type int but function 'dog' has no return statement.
WARNING(22): The parameter 'x' seems not to be used.
WARNING(25): The variable 'x' seems not to be used.
WARNING(29): The parameter 'x' seems not to be used.
ERROR(31): Initializer for variable 'b' of type int is of type char
WARNING(32): The variable 'c' seems not to be used.
ERROR(33): Initializer for variable 'd' is not a constant expression.
WARNING(33): The variable 'd' seems not to be used.
ERROR(34): Initializer for variable 'e' is not a constant expression.
WARNING(34): The variable 'e' seems not to be used.
ERROR(36): Function 'cat' at line 29 is expecting to return type char but return has no value.
ERROR(39): Symbol 'cat' is already declared at line 29.
WARNING(40): The variable 'unusedGlobal' seems not to be used.
WARNING(42): The parameter 'x' seems not to be used.
WARNING(44): The variable 'unusedLocal' seems not to be used.
ERROR(45): Function 'ibex' at line 42 is expecting to return type int but returns type bool.
WARNING(48): The parameter 'y' seems not to be used.
ERROR(50): Function 'ox' at line 48 is expecting no return value, but return has a value.
WARNING(53): Expecting to return type char but function 'emu' has no return statement.
WARNING(53): The parameter 'x' seems not to be used.
WARNING(53): The parameter 'y' seems not to be used.
WARNING(53): The parameter 'z' seems not to be used.
WARNING(57): The function 'mane' seems not to be used.
WARNING(59): The variable 'yuri' seems not to be used.
ERROR(60): Symbol 'x' is already declared at line 59.
ERROR(61): Symbol 'x' is already declared at line 59.
WARNING(68): The variable 'c' seems not to be used.
ERROR(70): Symbol 'v' is not declared.
ERROR(72): Expecting Boolean test condition in if statement but got type char.
WARNING(72): Variable 'x' may be uninitialized when used here.
ERROR(73): Expecting Boolean test condition in if statement but got type char.
ERROR(74): Expecting Boolean test condition in while statement but got type char.
ERROR(75): Expecting Boolean test condition in while statement but got type void.
ERROR(75): Expecting type char in parameter 1 of call to 'ox' declared on line 48 but got type int.
WARNING(77): The variable 'z' seems not to be used.
ERROR(78): Expecting type int in position 2 in range of for statement but got type bool.
WARNING(78): The variable 'i' seems not to be used.
ERROR(79): Expecting type int in position 1 in range of for statement but got type char.
WARNING(79): The variable 'i' seems not to be used.
ERROR(80): Expecting type int in position 3 in range of for statement but got type char.
WARNING(80): The variable 'i' seems not to be used.
ERROR(82): Cannot use function 'cat' as a variable.
ERROR(83): '<=' requires operands of the same type but lhs is type char and rhs is type int.
WARNING(83): Variable 'b' may be uninitialized when used here.
ERROR(84): '+=' requires operands of type int but lhs is of type char.
ERROR(85): '-=' requires operands of type int but rhs is of type char.
ERROR(86): '>' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(89): Cannot use array as test condition in if statement.
ERROR(89): Expecting Boolean test condition in if statement but got type int.
WARNING(89): Variable 'bb' may be uninitialized when used here.
ERROR(90): Cannot use array as test condition in if statement.
ERROR(90): Expecting Boolean test condition in if statement but got type int.
ERROR(91): Cannot use array as test condition in while statement.
ERROR(91): Expecting Boolean test condition in while statement but got type int.
ERROR(93): Cannot have a break statement outside of loop.
ERROR(95): Expecting Boolean test condition in while statement but got type int.
ERROR(96): Expecting Boolean test condition in while statement but got type int.
ERROR(96): Expecting Boolean test condition in while statement but got type int.
ERROR(98): '+' requires operands of type int but lhs is of type char.
ERROR(98): The operation '+' does not work with arrays.
WARNING(98): Variable 'aa' may be uninitialized when used here.
WARNING(99): Variable 'zz' may be uninitialized when used here.
WARNING(100): Variable 'cc' may be uninitialized when used here.
ERROR(102): '=' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(103): '=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(104): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(106): '+' requires operands of type int but lhs is of type bool.
ERROR(106): '+' requires operands of type int but rhs is of type char.
ERROR(108): '*' requires operands of type int but lhs is of type char.
ERROR(108): '*' requires operands of type int but rhs is of type bool.
ERROR(110): Unary 'not' requires an operand of type bool but was given type char.
ERROR(111): '+' requires operands of type int but lhs is of type char.
ERROR(111): Unary 'not' requires an operand of type bool but was given type int.
ERROR(114): Cannot index nonarray 'x'.
ERROR(116): 'and' requires operands of type bool but lhs is of type char.
ERROR(116): 'and' requires operands of type bool but rhs is of type char.
ERROR(116): '=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(116): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(116): '*' requires operands of type int but lhs is of type char.
ERROR(116): '+' requires operands of type int but lhs is of type char.
ERROR(116): '*' requires operands of type int but rhs is of type bool.
ERROR(117): 'and' requires operands of type bool but lhs is of type char.
ERROR(117): '=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(117): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(117): '*' requires operands of type int but lhs is of type char.
ERROR(117): '+' requires operands of type int but lhs is of type char.
ERROR(117): '*' requires operands of type int but rhs is of type bool.
ERROR(117): Symbol 'y' is not declared.
ERROR(118): 'and' requires operands of type bool but lhs is of type char.
ERROR(118): 'and' requires operands of type bool but rhs is of type char.
ERROR(118): 'or' requires operands of type bool but rhs is of type int.
ERROR(118): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(118): '*' requires operands of type int but lhs is of type char.
ERROR(118): '*' requires operands of type int but rhs is of type bool.
ERROR(120): The operation 'sizeof' only works with arrays.
ERROR(121): 'and' requires operands of type bool but lhs is of type int.
ERROR(121): 'and' requires operands of type bool but rhs is of type int.
ERROR(127): Cannot use function 'cat' as a variable.
ERROR(129): Array 'aa' should be indexed by type int but got type char.
ERROR(129): Array index is the unindexed array 'aa'.
ERROR(130): Cannot index nonarray 'AA'.
ERROR(130): Symbol 'AA' is not declared.
ERROR(132): Symbol 'meerkat' is not declared.
ERROR(134): Symbol 'xyzzy' is not declared.
ERROR(135): Symbol 'meerkat' is not declared.
ERROR(136): 'and' requires operands of type bool but rhs is of type int.
ERROR(136): Symbol 'xyzzy' is not declared.
ERROR(138): '*' requires operands of type int but lhs is of type char.
ERROR(138): '+' requires operands of type int but lhs is of type char.
ERROR(138): Symbol 'flight' is not declared.
ERROR(138): Symbol 'uu' is not declared.
ERROR(138): Symbol 'y' is not declared.
ERROR(138): Unary 'chsign' requires an operand of type int but was given type bool.
ERROR(138): Unary 'not' requires an operand of type bool but was given type int.
ERROR(140): 'x' is a simple variable and cannot be called.
ERROR(142): Expecting type char in parameter 1 of call to 'dog' declared on line 11 but got type int.
ERROR(142): Too many parameters passed for function 'dog' declared on line 11.
ERROR(143): Too few parameters passed for function 'ibex' declared on line 42.
ERROR(145): Expecting type char in parameter 1 of call to 'dog' declared on line 11 but got type bool.
ERROR(147): Not expecting array in parameter 1 of call to 'cat' declared on line 29.
ERROR(148): Expecting type char in parameter 1 of call to 'cat' declared on line 29 but got type bool.
ERROR(148): Not expecting array in parameter 1 of call to 'cat' declared on line 29.
WARNING(148): Variable 'ba' may be uninitialized when used here.
ERROR(150): Expecting array in parameter 1 of call to 'ibex' declared on line 42.
ERROR(151): Expecting type char in parameter 1 of call to 'ibex' declared on line 42 but got type int.
ERROR(152): Cannot index nonarray 'ibex'.
ERROR(152): Cannot use function 'ibex' as a variable.
ERROR(154): Cannot use function 'ibex' as a variable.
ERROR(155): Cannot use function 'ibex' as a variable.
ERROR(157): Array 'aa' should be indexed by type int but got type char.
ERROR(158): Array 'aa' should be indexed by type int but got type char.
ERROR(158): Array index is the unindexed array 'zz'.
ERROR(159): Array 'aa' should be indexed by type int but got type void.
ERROR(159): Expecting type char in parameter 1 of call to 'ox' declared on line 48 but got type bool.
ERROR(160): Array 'aa' should be indexed by type int but got type char.
ERROR(161): Array 'aa' should be indexed by type int but got type bool.
ERROR(162): Cannot use function 'ox' as a variable.
ERROR(163): Cannot use function 'ibex' as a variable.
ERROR(165): Expecting type char in parameter 1 of call to 'ox' declared on line 48 but got type int.
ERROR(165): '<=' requires operands of the same type but lhs is type char and rhs is type void.
ERROR(166): Expecting type char in parameter 1 of call to 'ox' declared on line 48 but got type int.
ERROR(166): '<=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(166): '+' requires operands of type int but lhs is of type char.
ERROR(166): '+' requires operands of type int but rhs is of type void.
ERROR(167): Expecting type char in parameter 1 of call to 'cat' declared on line 29 but got type void.
ERROR(167): Expecting type char in parameter 1 of call to 'ox' declared on line 48 but got type int.
ERROR(168): Expecting type char in parameter 1 of call to 'cat' declared on line 29 but got type bool.
ERROR(169): Expecting type char in parameter 1 of call to 'cat' declared on line 29 but got type int.
ERROR(171): '<=' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(173): '<=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(173): '<=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(173): '<=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(175): 'and' requires operands of type bool but lhs is of type int.
ERROR(175): 'and' requires operands of type bool but rhs is of type int.
ERROR(175): '*' requires operands of type int but lhs is of type char.
ERROR(175): '*' requires operands of type int but rhs is of type char.
ERROR(177): 'and' requires operands of type bool but lhs is of type int.
ERROR(177): 'and' requires operands of type bool but rhs is of type char.
ERROR(177): Expecting type char in parameter 1 of call to 'emu' declared on line 53 but got type int.
ERROR(177): Expecting type char in parameter 3 of call to 'emu' declared on line 53 but got type bool.
ERROR(177): '+' requires operands of type int but lhs is of type char.
ERROR(177): Symbol 'parrot' is not declared.
ERROR(178): 'and' requires operands of type bool but lhs is of type int.
ERROR(178): 'and' requires operands of type bool but rhs is of type char.
ERROR(178): 'and' requires operands of type bool but rhs is of type char.
ERROR(178): Expecting type char in parameter 1 of call to 'emu' declared on line 53 but got type bool.
ERROR(178): Expecting type char in parameter 1 of call to 'emu' declared on line 53 but got type int.
ERROR(178): Expecting type char in parameter 2 of call to 'emu' declared on line 53 but got type bool.
ERROR(178): Expecting type char in parameter 3 of call to 'emu' declared on line 53 but got type bool.
ERROR(178): Expecting type char in parameter 3 of call to 'emu' declared on line 53 but got type bool.
ERROR(178): '*' requires operands of type int but lhs is of type char.
ERROR(178): '+' requires operands of type int but lhs is of type char.
ERROR(178): Symbol 'parrot' is not declared.
ERROR(178): Too many parameters passed for function 'emu' declared on line 53.
ERROR(182): Cannot return an array.
Number of warnings: 31
Number of errors: 151

==============
==============
./c- -M basicExtra.c-
WARNING(2): Expecting to return type char but function 'toads' has no return statement.
WARNING(8): The variable 'j' seems not to be used.
WARNING(11): Variable 'bb' may be uninitialized when used here.
WARNING(12): Variable 'jj' may be uninitialized when used here.
WARNING(17): Variable 'a' may be uninitialized when used here.
WARNING(17): Variable 'b' may be uninitialized when used here.
ERROR(18): '/' requires operands of type int but lhs is of type bool.
WARNING(18): Variable 'i' may be uninitialized when used here.
ERROR(19): '/' requires operands of type int but rhs is of type bool.
ERROR(20): '%' requires operands of type int but lhs is of type bool.
ERROR(21): '%' requires operands of type int but rhs is of type bool.
ERROR(22): '-' requires operands of type int but lhs is of type bool.
ERROR(23): '-' requires operands of type int but rhs is of type bool.
ERROR(24): Symbol 'frogs' is not declared.
ERROR(24): Symbol 'frogs' is not declared.
ERROR(26): Symbol 'frogs' is not declared.
ERROR(27): Symbol 'frogs' is not declared.
ERROR(29): Symbol 'k' is not declared.
ERROR(30): Symbol 'k' is not declared.
ERROR(31): Symbol 'k' is not declared.
ERROR(31): Symbol 'k' is not declared.
ERROR(32): Symbol 'k' is not declared.
ERROR(33): 'i' is a simple variable and cannot be called.
Number of warnings: 7
Number of errors: 16

==============
==============
./c- -M break2.c-
Func: main returns type void [mem: Global loc: 0 size: -2] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 3]
.   .   Child: 0  Var: i of type int [mem: Local loc: -2 size: 1] [line: 4]
.   .   Child: 1  Assign: <= of type int [line: 6]
.   .   .   Child: 0  Id: i of type int [mem: Local loc: -2 size: 1] [line: 6]
.   .   .   Child: 1  Const 0 of type int [line: 6]
.   .   Sibling: 1  While [line: 7]
.   .   .   Child: 0  Const true of type bool [line: 7]
.   .   .   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 7]
.   .   .   .   Child: 1  While [line: 8]
.   .   .   .   .   Child: 0  Const true of type bool [line: 8]
.   .   .   .   .   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 8]
.   .   .   .   .   .   Child: 1  Assign: ++ of type int [line: 9]
.   .   .   .   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -2 size: 1] [line: 9]
.   .   .   .   .   .   Sibling: 1  Call: output of type void [line: 10]
.   .   .   .   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -2 size: 1] [line: 10]
.   .   .   .   .   .   Sibling: 2  If [line: 11]
.   .   .   .   .   .   .   Child: 0  Op: > of type bool [line: 11]
.   .   .   .   .   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -2 size: 1] [line: 11]
.   .   .   .   .   .   .   .   Child: 1  Const 4 of type int [line: 11]
.   .   .   .   .   .   .   Child: 1  Break [line: 11]
.   .   .   .   .   .   Sibling: 3  Call: outnl of type void [line: 12]
.   .   .   .   Sibling: 1  If [line: 14]
.   .   .   .   .   Child: 0  Op: > of type bool [line: 14]
.   .   .   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -2 size: 1] [line: 14]
.   .   .   .   .   .   Child: 1  Const 8 of type int [line: 14]
.   .   .   .   .   Child: 1  Break [line: 14]
.   .   Sibling: 2  Call: output of type void [line: 16]
.   .   .   Child: 0  Id: i of type int [mem: Local loc: -2 size: 1] [line: 16]
.   .   Sibling: 3  Call: outnl of type void [line: 17]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M break3.c-
WARNING(4): The variable 'x' seems not to be used.
Func: main returns type void [mem: Global loc: 0 size: -2] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 3]
.   .   Child: 0  Var: x of type int [mem: Local loc: -2 size: 1] [line: 4]
.   .   Child: 1  While [line: 5]
.   .   .   Child: 0  Const true of type bool [line: 5]
.   .   .   Child: 1  For [mem: None loc: 0 size: -4] [line: 5]
.   .   .   .   Child: 0  Var: x of type int [mem: Local loc: -3 size: 1] [line: 5]
.   .   .   .   Child: 1  Range [line: 5]
.   .   .   .   .   Child: 0  Const 1 of type int [line: 5]
.   .   .   .   .   Child: 1  Id: x of type int [mem: Local loc: -3 size: 1] [line: 5]
.   .   .   .   Child: 2  If [line: 5]
.   .   .   .   .   Child: 0  Op: > of type bool [line: 5]
.   .   .   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -3 size: 1] [line: 5]
.   .   .   .   .   .   Child: 1  Const 1 of type int [line: 5]
.   .   .   .   .   Child: 1  Break [line: 5]
.   .   .   .   .   Child: 2  Break [line: 5]
Offset for end of global space: 0
Number of warnings: 1
Number of errors: 0

==============
==============
./c- -M break4.c-
ERROR(10): Cannot have a break statement outside of loop.
Number of warnings: 0
Number of errors: 1

==============
==============
./c- -M break.c-
Func: main returns type void [mem: Global loc: 0 size: -2] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 3]
.   .   Child: 1  While [line: 4]
.   .   .   Child: 0  Const true of type bool [line: 4]
.   .   .   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 4]
.   .   .   .   Child: 1  Const 666 of type int [line: 5]
.   .   .   .   Sibling: 1  Break [line: 6]
.   .   .   .   Sibling: 2  Const 777 of type int [line: 7]
.   .   .   .   Sibling: 3  Break [line: 8]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M call2.c-
Func: three returns type void [mem: Global loc: 0 size: -3] [line: 2]
.   Child: 0  Parm: z of array of type int [mem: Parameter loc: -2 size: 1] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 2]
.   .   Child: 1  Call: output of type void [line: 3]
.   .   .   Child: 0  Op: [ of type int [line: 3]
.   .   .   .   Child: 0  Id: z of array of type int [mem: Parameter loc: -2 size: 1] [line: 3]
.   .   .   .   Child: 1  Const 7 of type int [line: 3]
.   .   Sibling: 1  Assign: <= of type int [line: 4]
.   .   .   Child: 0  Op: [ of type int [line: 4]
.   .   .   .   Child: 0  Id: z of array of type int [mem: Parameter loc: -2 size: 1] [line: 4]
.   .   .   .   Child: 1  Const 7 of type int [line: 4]
.   .   .   Child: 1  Const 666 of type int [line: 4]
.   .   Sibling: 2  Call: outnl of type void [line: 5]
Sibling: 1  Func: two returns type void [mem: Global loc: 0 size: -3] [line: 9]
.   Child: 0  Parm: y of array of type int [mem: Parameter loc: -2 size: 1] [line: 9]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 9]
.   .   Child: 1  Call: output of type void [line: 10]
.   .   .   Child: 0  Op: [ of type int [line: 10]
.   .   .   .   Child: 0  Id: y of array of type int [mem: Parameter loc: -2 size: 1] [line: 10]
.   .   .   .   Child: 1  Const 7 of type int [line: 10]
.   .   Sibling: 1  Call: three of type void [line: 11]
.   .   .   Child: 0  Id: y of array of type int [mem: Parameter loc: -2 size: 1] [line: 11]
.   .   Sibling: 2  Call: output of type void [line: 12]
.   .   .   Child: 0  Op: [ of type int [line: 12]
.   .   .   .   Child: 0  Id: y of array of type int [mem: Parameter loc: -2 size: 1] [line: 12]
.   .   .   .   Child: 1  Const 7 of type int [line: 12]
Sibling: 2  Func: one returns type void [mem: Global loc: 0 size: -3] [line: 16]
.   Child: 0  Parm: x of array of type int [mem: Parameter loc: -2 size: 1] [line: 16]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 16]
.   .   Child: 1  Call: output of type void [line: 17]
.   .   .   Child: 0  Op: [ of type int [line: 17]
.   .   .   .   Child: 0  Id: x of array of type int [mem: Parameter loc: -2 size: 1] [line: 17]
.   .   .   .   Child: 1  Const 7 of type int [line: 17]
.   .   Sibling: 1  Call: two of type void [line: 18]
.   .   .   Child: 0  Id: x of array of type int [mem: Parameter loc: -2 size: 1] [line: 18]
.   .   Sibling: 2  Call: output of type void [line: 19]
.   .   .   Child: 0  Op: [ of type int [line: 19]
.   .   .   .   Child: 0  Id: x of array of type int [mem: Parameter loc: -2 size: 1] [line: 19]
.   .   .   .   Child: 1  Const 7 of type int [line: 19]
Sibling: 3  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 23]
.   Child: 1  Compound [mem: None loc: 0 size: -13] [line: 24]
.   .   Child: 0  Var: w of array of type int [mem: Local loc: -3 size: 11] [line: 25]
.   .   Child: 1  Assign: <= of type int [line: 27]
.   .   .   Child: 0  Op: [ of type int [line: 27]
.   .   .   .   Child: 0  Id: w of array of type int [mem: Local loc: -3 size: 11] [line: 27]
.   .   .   .   Child: 1  Const 7 of type int [line: 27]
.   .   .   Child: 1  Const 42 of type int [line: 27]
.   .   Sibling: 1  Call: one of type void [line: 28]
.   .   .   Child: 0  Id: w of array of type int [mem: Local loc: -3 size: 11] [line: 28]
.   .   Sibling: 2  Call: output of type void [line: 29]
.   .   .   Child: 0  Op: [ of type int [line: 29]
.   .   .   .   Child: 0  Id: w of array of type int [mem: Local loc: -3 size: 11] [line: 29]
.   .   .   .   Child: 1  Const 7 of type int [line: 29]
.   .   Sibling: 3  Call: outnl of type void [line: 30]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M call3.c-
Func: three returns type int [mem: Global loc: 0 size: -3] [line: 2]
.   Child: 0  Parm: z of array of type int [mem: Parameter loc: -2 size: 1] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 2]
.   .   Child: 1  Call: output of type void [line: 3]
.   .   .   Child: 0  Op: [ of type int [line: 3]
.   .   .   .   Child: 0  Id: z of array of type int [mem: Parameter loc: -2 size: 1] [line: 3]
.   .   .   .   Child: 1  Const 7 of type int [line: 3]
.   .   Sibling: 1  Assign: <= of type int [line: 4]
.   .   .   Child: 0  Op: [ of type int [line: 4]
.   .   .   .   Child: 0  Id: z of array of type int [mem: Parameter loc: -2 size: 1] [line: 4]
.   .   .   .   Child: 1  Const 7 of type int [line: 4]
.   .   .   Child: 1  Const 666 of type int [line: 4]
.   .   Sibling: 2  Call: outnl of type void [line: 5]
.   .   Sibling: 3  Return [line: 7]
.   .   .   Child: 0  Op: [ of type int [line: 7]
.   .   .   .   Child: 0  Id: z of array of type int [mem: Parameter loc: -2 size: 1] [line: 7]
.   .   .   .   Child: 1  Const 7 of type int [line: 7]
Sibling: 1  Func: two returns type int [mem: Global loc: 0 size: -3] [line: 11]
.   Child: 0  Parm: y of array of type int [mem: Parameter loc: -2 size: 1] [line: 11]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 11]
.   .   Child: 1  Call: output of type void [line: 12]
.   .   .   Child: 0  Op: [ of type int [line: 12]
.   .   .   .   Child: 0  Id: y of array of type int [mem: Parameter loc: -2 size: 1] [line: 12]
.   .   .   .   Child: 1  Const 7 of type int [line: 12]
.   .   Sibling: 1  Call: three of type int [line: 13]
.   .   .   Child: 0  Id: y of array of type int [mem: Parameter loc: -2 size: 1] [line: 13]
.   .   Sibling: 2  Call: output of type void [line: 14]
.   .   .   Child: 0  Op: [ of type int [line: 14]
.   .   .   .   Child: 0  Id: y of array of type int [mem: Parameter loc: -2 size: 1] [line: 14]
.   .   .   .   Child: 1  Const 7 of type int [line: 14]
.   .   Sibling: 3  Return [line: 16]
.   .   .   Child: 0  Op: [ of type int [line: 16]
.   .   .   .   Child: 0  Id: y of array of type int [mem: Parameter loc: -2 size: 1] [line: 16]
.   .   .   .   Child: 1  Const 7 of type int [line: 16]
Sibling: 2  Func: one returns type int [mem: Global loc: 0 size: -3] [line: 20]
.   Child: 0  Parm: x of array of type int [mem: Parameter loc: -2 size: 1] [line: 20]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 20]
.   .   Child: 1  Call: output of type void [line: 21]
.   .   .   Child: 0  Op: [ of type int [line: 21]
.   .   .   .   Child: 0  Id: x of array of type int [mem: Parameter loc: -2 size: 1] [line: 21]
.   .   .   .   Child: 1  Const 7 of type int [line: 21]
.   .   Sibling: 1  Call: two of type int [line: 22]
.   .   .   Child: 0  Id: x of array of type int [mem: Parameter loc: -2 size: 1] [line: 22]
.   .   Sibling: 2  Call: output of type void [line: 23]
.   .   .   Child: 0  Op: [ of type int [line: 23]
.   .   .   .   Child: 0  Id: x of array of type int [mem: Parameter loc: -2 size: 1] [line: 23]
.   .   .   .   Child: 1  Const 7 of type int [line: 23]
.   .   Sibling: 3  Return [line: 25]
.   .   .   Child: 0  Op: [ of type int [line: 25]
.   .   .   .   Child: 0  Id: x of array of type int [mem: Parameter loc: -2 size: 1] [line: 25]
.   .   .   .   Child: 1  Const 7 of type int [line: 25]
Sibling: 3  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 29]
.   Child: 1  Compound [mem: None loc: 0 size: -13] [line: 30]
.   .   Child: 0  Var: w of array of type int [mem: Local loc: -3 size: 11] [line: 31]
.   .   Child: 1  Assign: <= of type int [line: 33]
.   .   .   Child: 0  Op: [ of type int [line: 33]
.   .   .   .   Child: 0  Id: w of array of type int [mem: Local loc: -3 size: 11] [line: 33]
.   .   .   .   Child: 1  Const 7 of type int [line: 33]
.   .   .   Child: 1  Const 42 of type int [line: 33]
.   .   Sibling: 1  Call: output of type void [line: 34]
.   .   .   Child: 0  Call: one of type int [line: 34]
.   .   .   .   Child: 0  Id: w of array of type int [mem: Local loc: -3 size: 11] [line: 34]
.   .   Sibling: 2  Call: output of type void [line: 35]
.   .   .   Child: 0  Op: [ of type int [line: 35]
.   .   .   .   Child: 0  Id: w of array of type int [mem: Local loc: -3 size: 11] [line: 35]
.   .   .   .   Child: 1  Const 7 of type int [line: 35]
.   .   Sibling: 3  Call: outnl of type void [line: 36]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M call4.c-
WARNING(2): Expecting to return type int but function 'showInt' has no return statement.
WARNING(8): Expecting to return type int but function 'showIntArray' has no return statement.
WARNING(19): Expecting to return type int but function 'showBool' has no return statement.
WARNING(30): The function 'magic' seems not to be used.
Func: showInt returns type int [mem: Global loc: 0 size: -3] [line: 2]
.   Child: 0  Parm: x of type int [mem: Parameter loc: -2 size: 1] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 3]
.   .   Child: 1  Call: output of type void [line: 4]
.   .   .   Child: 0  Id: x of type int [mem: Parameter loc: -2 size: 1] [line: 4]
.   .   Sibling: 1  Call: outnl of type void [line: 5]
Sibling: 1  Func: showIntArray returns type int [mem: Global loc: 0 size: -4] [line: 8]
.   Child: 0  Parm: x of array of type int [mem: Parameter loc: -2 size: 1] [line: 8]
.   Sibling: 1  Parm: size of type int [mem: Parameter loc: -3 size: 1] [line: 8]
.   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 9]
.   .   Child: 0  Var: i of type int [mem: Local loc: -4 size: 1] [line: 10]
.   .   Child: 1  Assign: <= of type int [line: 11]
.   .   .   Child: 0  Id: i of type int [mem: Local loc: -4 size: 1] [line: 11]
.   .   .   Child: 1  Const 0 of type int [line: 11]
.   .   Sibling: 1  While [line: 12]
.   .   .   Child: 0  Op: < of type bool [line: 12]
.   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -4 size: 1] [line: 12]
.   .   .   .   Child: 1  Id: size of type int [mem: Parameter loc: -3 size: 1] [line: 12]
.   .   .   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 12]
.   .   .   .   Child: 1  Call: output of type void [line: 13]
.   .   .   .   .   Child: 0  Op: [ of type int [line: 13]
.   .   .   .   .   .   Child: 0  Id: x of array of type int [mem: Parameter loc: -2 size: 1] [line: 13]
.   .   .   .   .   .   Child: 1  Id: i of type int [mem: Local loc: -4 size: 1] [line: 13]
.   .   .   .   Sibling: 1  Assign: <= of type int [line: 14]
.   .   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -4 size: 1] [line: 14]
.   .   .   .   .   Child: 1  Op: + of type int [line: 14]
.   .   .   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -4 size: 1] [line: 14]
.   .   .   .   .   .   Child: 1  Const 1 of type int [line: 14]
.   .   Sibling: 2  Call: outnl of type void [line: 16]
Sibling: 2  Func: showBool returns type int [mem: Global loc: 0 size: -3] [line: 19]
.   Child: 0  Parm: x of type bool [mem: Parameter loc: -2 size: 1] [line: 19]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 20]
.   .   Child: 1  Call: outputb of type void [line: 21]
.   .   .   Child: 0  Id: x of type bool [mem: Parameter loc: -2 size: 1] [line: 21]
.   .   Sibling: 1  Call: outnl of type void [line: 22]
Sibling: 3  Func: truth returns type bool [mem: Global loc: 0 size: -2] [line: 25]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 26]
.   .   Child: 1  Return [line: 27]
.   .   .   Child: 0  Const true of type bool [line: 27]
Sibling: 4  Func: magic returns type int [mem: Global loc: 0 size: -2] [line: 30]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 31]
.   .   Child: 1  Return [line: 32]
.   .   .   Child: 0  Const 666 of type int [line: 32]
Sibling: 5  Func: sqr returns type int [mem: Global loc: 0 size: -3] [line: 35]
.   Child: 0  Parm: x of type int [mem: Parameter loc: -2 size: 1] [line: 35]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 36]
.   .   Child: 1  Return [line: 37]
.   .   .   Child: 0  Op: * of type int [line: 37]
.   .   .   .   Child: 0  Id: x of type int [mem: Parameter loc: -2 size: 1] [line: 37]
.   .   .   .   Child: 1  Id: x of type int [mem: Parameter loc: -2 size: 1] [line: 37]
Sibling: 6  Func: add returns type int [mem: Global loc: 0 size: -4] [line: 40]
.   Child: 0  Parm: x of type int [mem: Parameter loc: -2 size: 1] [line: 40]
.   Sibling: 1  Parm: y of type int [mem: Parameter loc: -3 size: 1] [line: 40]
.   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 41]
.   .   Child: 1  Return [line: 42]
.   .   .   Child: 0  Op: + of type int [line: 42]
.   .   .   .   Child: 0  Id: x of type int [mem: Parameter loc: -2 size: 1] [line: 42]
.   .   .   .   Child: 1  Id: y of type int [mem: Parameter loc: -3 size: 1] [line: 42]
Sibling: 7  Func: mul returns type int [mem: Global loc: 0 size: -4] [line: 45]
.   Child: 0  Parm: x of type int [mem: Parameter loc: -2 size: 1] [line: 45]
.   Sibling: 1  Parm: y of type int [mem: Parameter loc: -3 size: 1] [line: 45]
.   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 46]
.   .   Child: 1  Return [line: 47]
.   .   .   Child: 0  Op: * of type int [line: 47]
.   .   .   .   Child: 0  Id: x of type int [mem: Parameter loc: -2 size: 1] [line: 47]
.   .   .   .   Child: 1  Id: y of type int [mem: Parameter loc: -3 size: 1] [line: 47]
Sibling: 8  Var: g of type int [mem: Global loc: 0 size: 1] [line: 50]
Sibling: 9  Func: caller returns type void [mem: Global loc: 0 size: -4] [line: 52]
.   Child: 0  Parm: x of type int [mem: Parameter loc: -2 size: 1] [line: 52]
.   Sibling: 1  Parm: y of array of type int [mem: Parameter loc: -3 size: 1] [line: 52]
.   Child: 1  Compound [mem: None loc: 0 size: -6] [line: 53]
.   .   Child: 0  Var: z of type int [mem: Local loc: -4 size: 1] [line: 54]
.   .   Sibling: 1  Var: a of type int [mem: Local loc: -5 size: 1] [line: 55]
.   .   Child: 1  Assign: <= of type int [line: 57]
.   .   .   Child: 0  Id: a of type int [mem: Local loc: -5 size: 1] [line: 57]
.   .   .   Child: 1  Const 666 of type int [line: 57]
.   .   Sibling: 1  Assign: <= of type int [line: 58]
.   .   .   Child: 0  Id: g of type int [mem: Global loc: 0 size: 1] [line: 58]
.   .   .   Child: 1  Const 777 of type int [line: 58]
.   .   Sibling: 2  Assign: <= of type int [line: 60]
.   .   .   Child: 0  Id: z of type int [mem: Local loc: -4 size: 1] [line: 60]
.   .   .   Child: 1  Call: sqr of type int [line: 60]
.   .   .   .   Child: 0  Id: x of type int [mem: Parameter loc: -2 size: 1] [line: 60]
.   .   Sibling: 3  Call: output of type void [line: 61]
.   .   .   Child: 0  Id: z of type int [mem: Local loc: -4 size: 1] [line: 61]
.   .   Sibling: 4  Call: outnl of type void [line: 62]
.   .   Sibling: 5  Assign: <= of type int [line: 64]
.   .   .   Child: 0  Id: z of type int [mem: Local loc: -4 size: 1] [line: 64]
.   .   .   Child: 1  Call: sqr of type int [line: 64]
.   .   .   .   Child: 0  Op: [ of type int [line: 64]
.   .   .   .   .   Child: 0  Id: y of array of type int [mem: Parameter loc: -3 size: 1] [line: 64]
.   .   .   .   .   Child: 1  Const 7 of type int [line: 64]
.   .   Sibling: 6  Call: output of type void [line: 65]
.   .   .   Child: 0  Id: z of type int [mem: Local loc: -4 size: 1] [line: 65]
.   .   Sibling: 7  Call: outnl of type void [line: 66]
.   .   Sibling: 8  Assign: <= of type int [line: 68]
.   .   .   Child: 0  Id: z of type int [mem: Local loc: -4 size: 1] [line: 68]
.   .   .   Child: 1  Call: sqr of type int [line: 68]
.   .   .   .   Child: 0  Id: a of type int [mem: Local loc: -5 size: 1] [line: 68]
.   .   Sibling: 9  Call: output of type void [line: 69]
.   .   .   Child: 0  Id: z of type int [mem: Local loc: -4 size: 1] [line: 69]
.   .   Sibling: 10  Call: outnl of type void [line: 70]
.   .   Sibling: 11  Assign: <= of type int [line: 72]
.   .   .   Child: 0  Id: z of type int [mem: Local loc: -4 size: 1] [line: 72]
.   .   .   Child: 1  Call: sqr of type int [line: 72]
.   .   .   .   Child: 0  Id: g of type int [mem: Global loc: 0 size: 1] [line: 72]
.   .   Sibling: 12  Call: output of type void [line: 73]
.   .   .   Child: 0  Id: z of type int [mem: Local loc: -4 size: 1] [line: 73]
.   .   Sibling: 13  Call: outnl of type void [line: 74]
Sibling: 10  Func: swap returns type void [mem: Global loc: 0 size: -5] [line: 77]
.   Child: 0  Parm: x of array of type int [mem: Parameter loc: -2 size: 1] [line: 77]
.   Sibling: 1  Parm: z1 of type int [mem: Parameter loc: -3 size: 1] [line: 77]
.   Sibling: 2  Parm: z2 of type int [mem: Parameter loc: -4 size: 1] [line: 77]
.   Child: 1  Compound [mem: None loc: 0 size: -6] [line: 78]
.   .   Child: 0  Var: tmp of type int [mem: Local loc: -5 size: 1] [line: 79]
.   .   Child: 1  Assign: <= of type int [line: 80]
.   .   .   Child: 0  Id: tmp of type int [mem: Local loc: -5 size: 1] [line: 80]
.   .   .   Child: 1  Op: [ of type int [line: 80]
.   .   .   .   Child: 0  Id: x of array of type int [mem: Parameter loc: -2 size: 1] [line: 80]
.   .   .   .   Child: 1  Id: z1 of type int [mem: Parameter loc: -3 size: 1] [line: 80]
.   .   Sibling: 1  Assign: <= of type int [line: 81]
.   .   .   Child: 0  Op: [ of type int [line: 81]
.   .   .   .   Child: 0  Id: x of array of type int [mem: Parameter loc: -2 size: 1] [line: 81]
.   .   .   .   Child: 1  Id: z1 of type int [mem: Parameter loc: -3 size: 1] [line: 81]
.   .   .   Child: 1  Op: [ of type int [line: 81]
.   .   .   .   Child: 0  Id: x of array of type int [mem: Parameter loc: -2 size: 1] [line: 81]
.   .   .   .   Child: 1  Id: z2 of type int [mem: Parameter loc: -4 size: 1] [line: 81]
.   .   Sibling: 2  Assign: <= of type int [line: 82]
.   .   .   Child: 0  Op: [ of type int [line: 82]
.   .   .   .   Child: 0  Id: x of array of type int [mem: Parameter loc: -2 size: 1] [line: 82]
.   .   .   .   Child: 1  Id: z2 of type int [mem: Parameter loc: -4 size: 1] [line: 82]
.   .   .   Child: 1  Id: tmp of type int [mem: Local loc: -5 size: 1] [line: 82]
Sibling: 11  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 85]
.   Child: 1  Compound [mem: None loc: 0 size: -26] [line: 86]
.   .   Child: 0  Var: p of type int [mem: Local loc: -2 size: 1] [line: 87]
.   .   Sibling: 1  Var: q of type int [mem: Local loc: -3 size: 1] [line: 87]
.   .   Sibling: 2  Var: r of array of type int [mem: Local loc: -5 size: 11] [line: 87]
.   .   Sibling: 3  Var: s of array of type int [mem: Local loc: -16 size: 11] [line: 87]
.   .   Child: 1  Assign: <= of type int [line: 89]
.   .   .   Child: 0  Id: p of type int [mem: Local loc: -2 size: 1] [line: 89]
.   .   .   Child: 1  Const 0 of type int [line: 89]
.   .   Sibling: 1  While [line: 90]
.   .   .   Child: 0  Op: < of type bool [line: 90]
.   .   .   .   Child: 0  Id: p of type int [mem: Local loc: -2 size: 1] [line: 90]
.   .   .   .   Child: 1  Const 10 of type int [line: 90]
.   .   .   Child: 1  Compound [mem: None loc: 0 size: -26] [line: 90]
.   .   .   .   Child: 1  Assign: <= of type int [line: 91]
.   .   .   .   .   Child: 0  Op: [ of type int [line: 91]
.   .   .   .   .   .   Child: 0  Id: r of array of type int [mem: Local loc: -5 size: 11] [line: 91]
.   .   .   .   .   .   Child: 1  Id: p of type int [mem: Local loc: -2 size: 1] [line: 91]
.   .   .   .   .   Child: 1  Id: p of type int [mem: Local loc: -2 size: 1] [line: 91]
.   .   .   .   Sibling: 1  Assign: ++ of type int [line: 92]
.   .   .   .   .   Child: 0  Id: p of type int [mem: Local loc: -2 size: 1] [line: 92]
.   .   Sibling: 2  Assign: <= of type int [line: 95]
.   .   .   Child: 0  Id: p of type int [mem: Local loc: -2 size: 1] [line: 95]
.   .   .   Child: 1  Const 111 of type int [line: 95]
.   .   Sibling: 3  Assign: <= of type int [line: 96]
.   .   .   Child: 0  Id: q of type int [mem: Local loc: -3 size: 1] [line: 96]
.   .   .   Child: 1  Const 222 of type int [line: 96]
.   .   Sibling: 4  Assign: <= of type int [line: 97]
.   .   .   Child: 0  Op: [ of type int [line: 97]
.   .   .   .   Child: 0  Id: r of array of type int [mem: Local loc: -5 size: 11] [line: 97]
.   .   .   .   Child: 1  Const 7 of type int [line: 97]
.   .   .   Child: 1  Const 333 of type int [line: 97]
.   .   Sibling: 5  Assign: <= of type int [line: 98]
.   .   .   Child: 0  Op: [ of type int [line: 98]
.   .   .   .   Child: 0  Id: s of array of type int [mem: Local loc: -16 size: 11] [line: 98]
.   .   .   .   Child: 1  Const 7 of type int [line: 98]
.   .   .   Child: 1  Const 444 of type int [line: 98]
.   .   Sibling: 6  Call: showInt of type int [line: 100]
.   .   .   Child: 0  Id: p of type int [mem: Local loc: -2 size: 1] [line: 100]
.   .   Sibling: 7  Call: showIntArray of type int [line: 102]
.   .   .   Child: 0  Id: r of array of type int [mem: Local loc: -5 size: 11] [line: 102]
.   .   .   Sibling: 1  Const 10 of type int [line: 102]
.   .   Sibling: 8  Call: showBool of type int [line: 104]
.   .   .   Child: 0  Call: truth of type bool [line: 104]
.   .   Sibling: 9  Call: output of type void [line: 106]
.   .   .   Child: 0  Call: showInt of type int [line: 106]
.   .   .   .   Child: 0  Id: p of type int [mem: Local loc: -2 size: 1] [line: 106]
.   .   Sibling: 10  Call: output of type void [line: 107]
.   .   .   Child: 0  Call: showBool of type int [line: 107]
.   .   .   .   Child: 0  Call: truth of type bool [line: 107]
.   .   Sibling: 11  Call: caller of type void [line: 109]
.   .   .   Child: 0  Id: p of type int [mem: Local loc: -2 size: 1] [line: 109]
.   .   .   Sibling: 1  Id: r of array of type int [mem: Local loc: -5 size: 11] [line: 109]
.   .   Sibling: 12  Call: output of type void [line: 111]
.   .   .   Child: 0  Call: add of type int [line: 111]
.   .   .   .   Child: 0  Call: add of type int [line: 111]
.   .   .   .   .   Child: 0  Id: p of type int [mem: Local loc: -2 size: 1] [line: 111]
.   .   .   .   .   Sibling: 1  Id: q of type int [mem: Local loc: -3 size: 1] [line: 111]
.   .   .   .   Sibling: 1  Call: mul of type int [line: 111]
.   .   .   .   .   Child: 0  Id: p of type int [mem: Local loc: -2 size: 1] [line: 111]
.   .   .   .   .   Sibling: 1  Id: q of type int [mem: Local loc: -3 size: 1] [line: 111]
.   .   Sibling: 13  Call: outnl of type void [line: 112]
.   .   Sibling: 14  Assign: <= of type int [line: 113]
.   .   .   Child: 0  Op: [ of type int [line: 113]
.   .   .   .   Child: 0  Id: r of array of type int [mem: Local loc: -5 size: 11] [line: 113]
.   .   .   .   Child: 1  Const 9 of type int [line: 113]
.   .   .   Child: 1  Const 555 of type int [line: 113]
.   .   Sibling: 15  Call: swap of type void [line: 114]
.   .   .   Child: 0  Id: r of array of type int [mem: Local loc: -5 size: 11] [line: 114]
.   .   .   Sibling: 1  Const 7 of type int [line: 114]
.   .   .   Sibling: 2  Const 9 of type int [line: 114]
.   .   Sibling: 16  Call: output of type void [line: 115]
.   .   .   Child: 0  Op: [ of type int [line: 115]
.   .   .   .   Child: 0  Id: r of array of type int [mem: Local loc: -5 size: 11] [line: 115]
.   .   .   .   Child: 1  Const 9 of type int [line: 115]
.   .   Sibling: 17  Call: outnl of type void [line: 116]
.   .   Sibling: 18  Call: output of type void [line: 117]
.   .   .   Child: 0  Op: * of type int [line: 117]
.   .   .   .   Child: 0  Const 2 of type int [line: 117]
.   .   .   .   Child: 1  Call: add of type int [line: 117]
.   .   .   .   .   Child: 0  Op: * of type int [line: 117]
.   .   .   .   .   .   Child: 0  Call: add of type int [line: 117]
.   .   .   .   .   .   .   Child: 0  Op: * of type int [line: 117]
.   .   .   .   .   .   .   .   Child: 0  Const 3 of type int [line: 117]
.   .   .   .   .   .   .   .   Child: 1  Const 4 of type int [line: 117]
.   .   .   .   .   .   .   Sibling: 1  Op: * of type int [line: 117]
.   .   .   .   .   .   .   .   Child: 0  Const 5 of type int [line: 117]
.   .   .   .   .   .   .   .   Child: 1  Const 6 of type int [line: 117]
.   .   .   .   .   .   Child: 1  Const 7 of type int [line: 117]
.   .   .   .   .   Sibling: 1  Op: * of type int [line: 117]
.   .   .   .   .   .   Child: 0  Call: add of type int [line: 117]
.   .   .   .   .   .   .   Child: 0  Op: * of type int [line: 117]
.   .   .   .   .   .   .   .   Child: 0  Const 9 of type int [line: 117]
.   .   .   .   .   .   .   .   Child: 1  Const 10 of type int [line: 117]
.   .   .   .   .   .   .   Sibling: 1  Op: * of type int [line: 117]
.   .   .   .   .   .   .   .   Child: 0  Const 11 of type int [line: 117]
.   .   .   .   .   .   .   .   Child: 1  Const 12 of type int [line: 117]
.   .   .   .   .   .   Child: 1  Const 13 of type int [line: 117]
.   .   Sibling: 19  Call: outnl of type void [line: 118]
Offset for end of global space: -1
Number of warnings: 4
Number of errors: 0

==============
==============
./c- -M call.c-
Func: cheyenne returns type void [mem: Global loc: 0 size: -5] [line: 2]
.   Child: 0  Parm: a of type int [mem: Parameter loc: -2 size: 1] [line: 2]
.   Sibling: 1  Parm: b of type bool [mem: Parameter loc: -3 size: 1] [line: 2]
.   Sibling: 2  Parm: c of type char [mem: Parameter loc: -4 size: 1] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 3]
.   .   Child: 1  Call: output of type void [line: 4]
.   .   .   Child: 0  Id: a of type int [mem: Parameter loc: -2 size: 1] [line: 4]
.   .   Sibling: 1  Call: outputb of type void [line: 5]
.   .   .   Child: 0  Id: b of type bool [mem: Parameter loc: -3 size: 1] [line: 5]
.   .   Sibling: 2  Call: outputc of type void [line: 6]
.   .   .   Child: 0  Id: c of type char [mem: Parameter loc: -4 size: 1] [line: 6]
.   .   Sibling: 3  Call: outnl of type void [line: 7]
Sibling: 1  Func: sioux returns type void [mem: Global loc: 0 size: -5] [line: 11]
.   Child: 0  Parm: a of array of type int [mem: Parameter loc: -2 size: 1] [line: 11]
.   Sibling: 1  Parm: b of array of type bool [mem: Parameter loc: -3 size: 1] [line: 11]
.   Sibling: 2  Parm: c of array of type char [mem: Parameter loc: -4 size: 1] [line: 11]
.   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 12]
.   .   Child: 1  Call: output of type void [line: 13]
.   .   .   Child: 0  Op: [ of type int [line: 13]
.   .   .   .   Child: 0  Id: a of array of type int [mem: Parameter loc: -2 size: 1] [line: 13]
.   .   .   .   Child: 1  Const 1 of type int [line: 13]
.   .   Sibling: 1  Call: outputb of type void [line: 14]
.   .   .   Child: 0  Op: [ of type bool [line: 14]
.   .   .   .   Child: 0  Id: b of array of type bool [mem: Parameter loc: -3 size: 1] [line: 14]
.   .   .   .   Child: 1  Const 2 of type int [line: 14]
.   .   Sibling: 2  Call: outputc of type void [line: 15]
.   .   .   Child: 0  Op: [ of type char [line: 15]
.   .   .   .   Child: 0  Id: c of array of type char [mem: Parameter loc: -4 size: 1] [line: 15]
.   .   .   .   Child: 1  Const 3 of type int [line: 15]
.   .   Sibling: 3  Call: outnl of type void [line: 16]
Sibling: 2  Func: comanche returns type void [mem: Global loc: 0 size: -3] [line: 20]
.   Child: 0  Parm: z of array of type int [mem: Parameter loc: -2 size: 1] [line: 20]
.   Child: 1  Compound [mem: None loc: 0 size: -15] [line: 21]
.   .   Child: 0  Var: b of array of type bool [mem: Local loc: -4 size: 6] [line: 22]
.   .   Sibling: 1  Var: c of array of type char [mem: Local loc: -10 size: 6] [line: 23]
.   .   Child: 1  Assign: <= of type bool [line: 25]
.   .   .   Child: 0  Op: [ of type bool [line: 25]
.   .   .   .   Child: 0  Id: b of array of type bool [mem: Local loc: -4 size: 6] [line: 25]
.   .   .   .   Child: 1  Const 2 of type int [line: 25]
.   .   .   Child: 1  Const true of type bool [line: 25]
.   .   Sibling: 1  Assign: <= of type char [line: 26]
.   .   .   Child: 0  Op: [ of type char [line: 26]
.   .   .   .   Child: 0  Id: c of array of type char [mem: Local loc: -10 size: 6] [line: 26]
.   .   .   .   Child: 1  Const 3 of type int [line: 26]
.   .   .   Child: 1  Const 'z' of type char [line: 26]
.   .   Sibling: 2  Call: sioux of type void [line: 27]
.   .   .   Child: 0  Id: z of array of type int [mem: Parameter loc: -2 size: 1] [line: 27]
.   .   .   Sibling: 1  Id: b of array of type bool [mem: Local loc: -4 size: 6] [line: 27]
.   .   .   Sibling: 2  Id: c of array of type char [mem: Local loc: -10 size: 6] [line: 27]
Sibling: 3  Var: ga of array of type int [mem: Global loc: -1 size: 6] [line: 32]
Sibling: 4  Var: gb of array of type bool [mem: Global loc: -7 size: 7] [line: 33]
Sibling: 5  Var: gc of array of type char [mem: Global loc: -14 size: 8] [line: 34]
Sibling: 6  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 36]
.   Child: 1  Compound [mem: None loc: 0 size: -23] [line: 37]
.   .   Child: 0  Var: a of array of type int [mem: Local loc: -3 size: 6] [line: 38]
.   .   Sibling: 1  Var: b of array of type bool [mem: Local loc: -9 size: 7] [line: 39]
.   .   Sibling: 2  Var: c of array of type char [mem: Local loc: -16 size: 8] [line: 40]
.   .   Child: 1  Assign: <= of type int [line: 42]
.   .   .   Child: 0  Op: [ of type int [line: 42]
.   .   .   .   Child: 0  Id: a of array of type int [mem: Local loc: -3 size: 6] [line: 42]
.   .   .   .   Child: 1  Const 1 of type int [line: 42]
.   .   .   Child: 1  Const 555 of type int [line: 42]
.   .   Sibling: 1  Assign: <= of type bool [line: 43]
.   .   .   Child: 0  Op: [ of type bool [line: 43]
.   .   .   .   Child: 0  Id: b of array of type bool [mem: Local loc: -9 size: 7] [line: 43]
.   .   .   .   Child: 1  Const 2 of type int [line: 43]
.   .   .   Child: 1  Const true of type bool [line: 43]
.   .   Sibling: 2  Assign: <= of type char [line: 44]
.   .   .   Child: 0  Op: [ of type char [line: 44]
.   .   .   .   Child: 0  Id: c of array of type char [mem: Local loc: -16 size: 8] [line: 44]
.   .   .   .   Child: 1  Const 3 of type int [line: 44]
.   .   .   Child: 1  Const 'z' of type char [line: 44]
.   .   Sibling: 3  Call: cheyenne of type void [line: 45]
.   .   .   Child: 0  Const 666 of type int [line: 45]
.   .   .   Sibling: 1  Const true of type bool [line: 45]
.   .   .   Sibling: 2  Const 'c' of type char [line: 45]
.   .   Sibling: 4  Call: cheyenne of type void [line: 46]
.   .   .   Child: 0  Const 777 of type int [line: 46]
.   .   .   Sibling: 1  Const false of type bool [line: 46]
.   .   .   Sibling: 2  Const 'd' of type char [line: 46]
.   .   Sibling: 5  Call: sioux of type void [line: 47]
.   .   .   Child: 0  Id: a of array of type int [mem: Local loc: -3 size: 6] [line: 47]
.   .   .   Sibling: 1  Id: b of array of type bool [mem: Local loc: -9 size: 7] [line: 47]
.   .   .   Sibling: 2  Id: c of array of type char [mem: Local loc: -16 size: 8] [line: 47]
.   .   Sibling: 6  Call: comanche of type void [line: 48]
.   .   .   Child: 0  Id: a of array of type int [mem: Local loc: -3 size: 6] [line: 48]
.   .   Sibling: 7  Assign: <= of type int [line: 50]
.   .   .   Child: 0  Op: [ of type int [line: 50]
.   .   .   .   Child: 0  Id: ga of array of type int [mem: Global loc: -1 size: 6] [line: 50]
.   .   .   .   Child: 1  Const 1 of type int [line: 50]
.   .   .   Child: 1  Const 888 of type int [line: 50]
.   .   Sibling: 8  Assign: <= of type bool [line: 51]
.   .   .   Child: 0  Op: [ of type bool [line: 51]
.   .   .   .   Child: 0  Id: gb of array of type bool [mem: Global loc: -7 size: 7] [line: 51]
.   .   .   .   Child: 1  Const 2 of type int [line: 51]
.   .   .   Child: 1  Const false of type bool [line: 51]
.   .   Sibling: 9  Assign: <= of type char [line: 52]
.   .   .   Child: 0  Op: [ of type char [line: 52]
.   .   .   .   Child: 0  Id: gc of array of type char [mem: Global loc: -14 size: 8] [line: 52]
.   .   .   .   Child: 1  Const 3 of type int [line: 52]
.   .   .   Child: 1  Const 'g' of type char [line: 52]
.   .   Sibling: 10  Call: sioux of type void [line: 53]
.   .   .   Child: 0  Id: ga of array of type int [mem: Global loc: -1 size: 6] [line: 53]
.   .   .   Sibling: 1  Id: gb of array of type bool [mem: Global loc: -7 size: 7] [line: 53]
.   .   .   Sibling: 2  Id: gc of array of type char [mem: Global loc: -14 size: 8] [line: 53]
.   .   Sibling: 11  Call: comanche of type void [line: 54]
.   .   .   Child: 0  Id: ga of array of type int [mem: Global loc: -1 size: 6] [line: 54]
.   .   Sibling: 12  Compound [mem: None loc: 0 size: -23] [line: 56]
.   .   .   Child: 0  Var: ga of static array of type int [mem: LocalStatic loc: -22 size: 6] [line: 57]
.   .   .   Sibling: 1  Var: gb of static array of type bool [mem: LocalStatic loc: -28 size: 7] [line: 58]
.   .   .   Sibling: 2  Var: gc of static array of type char [mem: LocalStatic loc: -35 size: 8] [line: 59]
.   .   .   Child: 1  Assign: <= of type int [line: 60]
.   .   .   .   Child: 0  Op: [ of type int [line: 60]
.   .   .   .   .   Child: 0  Id: ga of static array of type int [mem: LocalStatic loc: -22 size: 6] [line: 60]
.   .   .   .   .   Child: 1  Const 1 of type int [line: 60]
.   .   .   .   Child: 1  Const 999 of type int [line: 60]
.   .   .   Sibling: 1  Assign: <= of type bool [line: 61]
.   .   .   .   Child: 0  Op: [ of type bool [line: 61]
.   .   .   .   .   Child: 0  Id: gb of static array of type bool [mem: LocalStatic loc: -28 size: 7] [line: 61]
.   .   .   .   .   Child: 1  Const 2 of type int [line: 61]
.   .   .   .   Child: 1  Const true of type bool [line: 61]
.   .   .   Sibling: 2  Assign: <= of type char [line: 62]
.   .   .   .   Child: 0  Op: [ of type char [line: 62]
.   .   .   .   .   Child: 0  Id: gc of static array of type char [mem: LocalStatic loc: -35 size: 8] [line: 62]
.   .   .   .   .   Child: 1  Const 3 of type int [line: 62]
.   .   .   .   Child: 1  Const 's' of type char [line: 62]
.   .   .   Sibling: 3  Call: sioux of type void [line: 64]
.   .   .   .   Child: 0  Id: ga of static array of type int [mem: LocalStatic loc: -22 size: 6] [line: 64]
.   .   .   .   Sibling: 1  Id: gb of static array of type bool [mem: LocalStatic loc: -28 size: 7] [line: 64]
.   .   .   .   Sibling: 2  Id: gc of static array of type char [mem: LocalStatic loc: -35 size: 8] [line: 64]
.   .   .   Sibling: 4  Call: comanche of type void [line: 65]
.   .   .   .   Child: 0  Id: ga of static array of type int [mem: LocalStatic loc: -22 size: 6] [line: 65]
Offset for end of global space: -42
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M callconst.c-
WARNING(11): The function 'array' seems not to be used.
Func: scalar returns type void [mem: Global loc: 0 size: -5] [line: 2]
.   Child: 0  Parm: a of type int [mem: Parameter loc: -2 size: 1] [line: 2]
.   Sibling: 1  Parm: b of type bool [mem: Parameter loc: -3 size: 1] [line: 2]
.   Sibling: 2  Parm: c of type char [mem: Parameter loc: -4 size: 1] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 3]
.   .   Child: 1  Call: output of type void [line: 4]
.   .   .   Child: 0  Id: a of type int [mem: Parameter loc: -2 size: 1] [line: 4]
.   .   Sibling: 1  Call: outputb of type void [line: 5]
.   .   .   Child: 0  Id: b of type bool [mem: Parameter loc: -3 size: 1] [line: 5]
.   .   Sibling: 2  Call: outputc of type void [line: 6]
.   .   .   Child: 0  Id: c of type char [mem: Parameter loc: -4 size: 1] [line: 6]
.   .   Sibling: 3  Call: outnl of type void [line: 7]
Sibling: 1  Func: array returns type void [mem: Global loc: 0 size: -5] [line: 11]
.   Child: 0  Parm: a of array of type int [mem: Parameter loc: -2 size: 1] [line: 11]
.   Sibling: 1  Parm: b of array of type bool [mem: Parameter loc: -3 size: 1] [line: 11]
.   Sibling: 2  Parm: c of array of type char [mem: Parameter loc: -4 size: 1] [line: 11]
.   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 12]
.   .   Child: 1  Call: output of type void [line: 13]
.   .   .   Child: 0  Op: [ of type int [line: 13]
.   .   .   .   Child: 0  Id: a of array of type int [mem: Parameter loc: -2 size: 1] [line: 13]
.   .   .   .   Child: 1  Const 1 of type int [line: 13]
.   .   Sibling: 1  Call: outputb of type void [line: 14]
.   .   .   Child: 0  Op: [ of type bool [line: 14]
.   .   .   .   Child: 0  Id: b of array of type bool [mem: Parameter loc: -3 size: 1] [line: 14]
.   .   .   .   Child: 1  Const 2 of type int [line: 14]
.   .   Sibling: 2  Call: outputc of type void [line: 15]
.   .   .   Child: 0  Op: [ of type char [line: 15]
.   .   .   .   Child: 0  Id: c of array of type char [mem: Parameter loc: -4 size: 1] [line: 15]
.   .   .   .   Child: 1  Const 3 of type int [line: 15]
.   .   Sibling: 3  Call: outnl of type void [line: 16]
Sibling: 2  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 20]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 21]
.   .   Child: 1  Call: scalar of type void [line: 22]
.   .   .   Child: 0  Const 111 of type int [line: 22]
.   .   .   Sibling: 1  Const true of type bool [line: 22]
.   .   .   Sibling: 2  Const 'x' of type char [line: 22]
Offset for end of global space: 0
Number of warnings: 1
Number of errors: 0

==============
==============
./c- -M callerr.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
ERROR(8): Function 'ella' at line 6 is expecting no return value, but return has a value.
ERROR(16): Symbol 'lyra' is not declared.
ERROR(18): Expecting type int in parameter 1 of call to 'ella' declared on line 6 but got type void.
ERROR(20): Too many parameters passed for function 'dory' declared on line 1.
ERROR(21): Too many parameters passed for function 'dory' declared on line 1.
ERROR(22): Symbol 'lyra' is not declared.
ERROR(23): Symbol 'lyra' is not declared.
ERROR(23): Too many parameters passed for function 'dory' declared on line 1.
ERROR(27): '<=' requires operands of the same type but lhs is type int and rhs is type void.
Number of warnings: 0
Number of errors: 10

==============
==============
./c- -M callframes.c-
Func: min returns type int [mem: Global loc: 0 size: -4] [line: 2]
.   Child: 0  Parm: x of type int [mem: Parameter loc: -2 size: 1] [line: 2]
.   Sibling: 1  Parm: y of type int [mem: Parameter loc: -3 size: 1] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 2]
.   .   Child: 1  If [line: 2]
.   .   .   Child: 0  Op: > of type bool [line: 2]
.   .   .   .   Child: 0  Id: x of type int [mem: Parameter loc: -2 size: 1] [line: 2]
.   .   .   .   Child: 1  Id: y of type int [mem: Parameter loc: -3 size: 1] [line: 2]
.   .   .   Child: 1  Return [line: 2]
.   .   .   .   Child: 0  Id: y of type int [mem: Parameter loc: -3 size: 1] [line: 2]
.   .   .   Child: 2  Return [line: 2]
.   .   .   .   Child: 0  Id: x of type int [mem: Parameter loc: -2 size: 1] [line: 2]
Sibling: 1  Func: f returns type int [mem: Global loc: 0 size: -3] [line: 3]
.   Child: 0  Parm: n of type int [mem: Parameter loc: -2 size: 1] [line: 3]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 3]
.   .   Child: 1  If [line: 3]
.   .   .   Child: 0  Op: !> of type bool [line: 3]
.   .   .   .   Child: 0  Id: n of type int [mem: Parameter loc: -2 size: 1] [line: 3]
.   .   .   .   Child: 1  Const 2 of type int [line: 3]
.   .   .   Child: 1  Return [line: 3]
.   .   .   .   Child: 0  Const 1 of type int [line: 3]
.   .   .   Child: 2  Return [line: 3]
.   .   .   .   Child: 0  Op: + of type int [line: 3]
.   .   .   .   .   Child: 0  Call: f of type int [line: 3]
.   .   .   .   .   .   Child: 0  Op: - of type int [line: 3]
.   .   .   .   .   .   .   Child: 0  Id: n of type int [mem: Parameter loc: -2 size: 1] [line: 3]
.   .   .   .   .   .   .   Child: 1  Const 1 of type int [line: 3]
.   .   .   .   .   Child: 1  Call: f of type int [line: 3]
.   .   .   .   .   .   Child: 0  Op: - of type int [line: 3]
.   .   .   .   .   .   .   Child: 0  Id: n of type int [mem: Parameter loc: -2 size: 1] [line: 3]
.   .   .   .   .   .   .   Child: 1  Const 2 of type int [line: 3]
Sibling: 2  Func: g returns type int [mem: Global loc: 0 size: -3] [line: 4]
.   Child: 0  Parm: n of type int [mem: Parameter loc: -2 size: 1] [line: 4]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 4]
.   .   Child: 1  Return [line: 4]
.   .   .   Child: 0  Call: f of type int [line: 4]
.   .   .   .   Child: 0  Call: min of type int [line: 4]
.   .   .   .   .   Child: 0  Const 10 of type int [line: 4]
.   .   .   .   .   Sibling: 1  Op: - of type int [line: 4]
.   .   .   .   .   .   Child: 0  Op: * of type int [line: 4]
.   .   .   .   .   .   .   Child: 0  Const 666 of type int [line: 4]
.   .   .   .   .   .   .   Child: 1  Call: f of type int [line: 4]
.   .   .   .   .   .   .   .   Child: 0  Id: n of type int [mem: Parameter loc: -2 size: 1] [line: 4]
.   .   .   .   .   .   Child: 1  Op: * of type int [line: 4]
.   .   .   .   .   .   .   Child: 0  Const 777 of type int [line: 4]
.   .   .   .   .   .   .   Child: 1  Call: f of type int [line: 4]
.   .   .   .   .   .   .   .   Child: 0  Op: + of type int [line: 4]
.   .   .   .   .   .   .   .   .   Child: 0  Id: n of type int [mem: Parameter loc: -2 size: 1] [line: 4]
.   .   .   .   .   .   .   .   .   Child: 1  Const 1 of type int [line: 4]
Sibling: 3  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 6]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 7]
.   .   Child: 1  Call: output of type void [line: 8]
.   .   .   Child: 0  Op: + of type int [line: 8]
.   .   .   .   Child: 0  Call: f of type int [line: 8]
.   .   .   .   .   Child: 0  Const 2 of type int [line: 8]
.   .   .   .   Child: 1  Call: f of type int [line: 8]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 8]
.   .   Sibling: 1  Call: outnl of type void [line: 8]
.   .   Sibling: 2  Call: output of type void [line: 9]
.   .   .   Child: 0  Call: g of type int [line: 9]
.   .   .   .   Child: 0  Const 2 of type int [line: 9]
.   .   Sibling: 3  Call: outnl of type void [line: 9]
.   .   Sibling: 4  If [line: 10]
.   .   .   Child: 0  Const false of type bool [line: 10]
.   .   .   Child: 1  Call: main of type void [line: 10]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M callglobal.c-
Func: scalar returns type void [mem: Global loc: 0 size: -5] [line: 2]
.   Child: 0  Parm: a of type int [mem: Parameter loc: -2 size: 1] [line: 2]
.   Sibling: 1  Parm: b of type bool [mem: Parameter loc: -3 size: 1] [line: 2]
.   Sibling: 2  Parm: c of type char [mem: Parameter loc: -4 size: 1] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 3]
.   .   Child: 1  Call: output of type void [line: 4]
.   .   .   Child: 0  Id: a of type int [mem: Parameter loc: -2 size: 1] [line: 4]
.   .   Sibling: 1  Call: outputb of type void [line: 5]
.   .   .   Child: 0  Id: b of type bool [mem: Parameter loc: -3 size: 1] [line: 5]
.   .   Sibling: 2  Call: outputc of type void [line: 6]
.   .   .   Child: 0  Id: c of type char [mem: Parameter loc: -4 size: 1] [line: 6]
.   .   Sibling: 3  Call: outnl of type void [line: 7]
Sibling: 1  Func: array returns type void [mem: Global loc: 0 size: -5] [line: 11]
.   Child: 0  Parm: a of array of type int [mem: Parameter loc: -2 size: 1] [line: 11]
.   Sibling: 1  Parm: b of array of type bool [mem: Parameter loc: -3 size: 1] [line: 11]
.   Sibling: 2  Parm: c of array of type char [mem: Parameter loc: -4 size: 1] [line: 11]
.   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 12]
.   .   Child: 1  Call: output of type void [line: 13]
.   .   .   Child: 0  Op: [ of type int [line: 13]
.   .   .   .   Child: 0  Id: a of array of type int [mem: Parameter loc: -2 size: 1] [line: 13]
.   .   .   .   Child: 1  Const 1 of type int [line: 13]
.   .   Sibling: 1  Call: outputb of type void [line: 14]
.   .   .   Child: 0  Op: [ of type bool [line: 14]
.   .   .   .   Child: 0  Id: b of array of type bool [mem: Parameter loc: -3 size: 1] [line: 14]
.   .   .   .   Child: 1  Const 2 of type int [line: 14]
.   .   Sibling: 2  Call: outputc of type void [line: 15]
.   .   .   Child: 0  Op: [ of type char [line: 15]
.   .   .   .   Child: 0  Id: c of array of type char [mem: Parameter loc: -4 size: 1] [line: 15]
.   .   .   .   Child: 1  Const 3 of type int [line: 15]
.   .   Sibling: 3  Call: outnl of type void [line: 16]
Sibling: 2  Var: x of type int [mem: Global loc: 0 size: 1] [line: 20]
Sibling: 3  Var: y of type bool [mem: Global loc: -1 size: 1] [line: 20]
Sibling: 4  Var: z of type char [mem: Global loc: -2 size: 1] [line: 20]
Sibling: 5  Var: XX of array of type int [mem: Global loc: -4 size: 4] [line: 21]
Sibling: 6  Var: YY of array of type bool [mem: Global loc: -8 size: 6] [line: 21]
Sibling: 7  Var: ZZ of array of type char [mem: Global loc: -14 size: 8] [line: 21]
Sibling: 8  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 23]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 24]
.   .   Child: 1  Assign: <= of type int [line: 25]
.   .   .   Child: 0  Id: x of type int [mem: Global loc: 0 size: 1] [line: 25]
.   .   .   Child: 1  Const 333 of type int [line: 25]
.   .   Sibling: 1  Assign: <= of type bool [line: 26]
.   .   .   Child: 0  Id: y of type bool [mem: Global loc: -1 size: 1] [line: 26]
.   .   .   Child: 1  Const true of type bool [line: 26]
.   .   Sibling: 2  Assign: <= of type char [line: 27]
.   .   .   Child: 0  Id: z of type char [mem: Global loc: -2 size: 1] [line: 27]
.   .   .   Child: 1  Const 'z' of type char [line: 27]
.   .   Sibling: 3  Assign: <= of type int [line: 29]
.   .   .   Child: 0  Op: [ of type int [line: 29]
.   .   .   .   Child: 0  Id: XX of array of type int [mem: Global loc: -4 size: 4] [line: 29]
.   .   .   .   Child: 1  Const 1 of type int [line: 29]
.   .   .   Child: 1  Const 444 of type int [line: 29]
.   .   Sibling: 4  Assign: <= of type bool [line: 30]
.   .   .   Child: 0  Op: [ of type bool [line: 30]
.   .   .   .   Child: 0  Id: YY of array of type bool [mem: Global loc: -8 size: 6] [line: 30]
.   .   .   .   Child: 1  Const 2 of type int [line: 30]
.   .   .   Child: 1  Const false of type bool [line: 30]
.   .   Sibling: 5  Assign: <= of type char [line: 31]
.   .   .   Child: 0  Op: [ of type char [line: 31]
.   .   .   .   Child: 0  Id: ZZ of array of type char [mem: Global loc: -14 size: 8] [line: 31]
.   .   .   .   Child: 1  Const 3 of type int [line: 31]
.   .   .   Child: 1  Const 'a' of type char [line: 31]
.   .   Sibling: 6  Call: scalar of type void [line: 33]
.   .   .   Child: 0  Id: x of type int [mem: Global loc: 0 size: 1] [line: 33]
.   .   .   Sibling: 1  Id: y of type bool [mem: Global loc: -1 size: 1] [line: 33]
.   .   .   Sibling: 2  Id: z of type char [mem: Global loc: -2 size: 1] [line: 33]
.   .   Sibling: 7  Call: array of type void [line: 34]
.   .   .   Child: 0  Id: XX of array of type int [mem: Global loc: -4 size: 4] [line: 34]
.   .   .   Sibling: 1  Id: YY of array of type bool [mem: Global loc: -8 size: 6] [line: 34]
.   .   .   Sibling: 2  Id: ZZ of array of type char [mem: Global loc: -14 size: 8] [line: 34]
Offset for end of global space: -21
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M calllocal.c-
Func: scalar returns type void [mem: Global loc: 0 size: -5] [line: 2]
.   Child: 0  Parm: a of type int [mem: Parameter loc: -2 size: 1] [line: 2]
.   Sibling: 1  Parm: b of type bool [mem: Parameter loc: -3 size: 1] [line: 2]
.   Sibling: 2  Parm: c of type char [mem: Parameter loc: -4 size: 1] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 3]
.   .   Child: 1  Call: output of type void [line: 4]
.   .   .   Child: 0  Id: a of type int [mem: Parameter loc: -2 size: 1] [line: 4]
.   .   Sibling: 1  Call: outputb of type void [line: 5]
.   .   .   Child: 0  Id: b of type bool [mem: Parameter loc: -3 size: 1] [line: 5]
.   .   Sibling: 2  Call: outputc of type void [line: 6]
.   .   .   Child: 0  Id: c of type char [mem: Parameter loc: -4 size: 1] [line: 6]
.   .   Sibling: 3  Call: outnl of type void [line: 7]
Sibling: 1  Func: array returns type void [mem: Global loc: 0 size: -5] [line: 11]
.   Child: 0  Parm: a of array of type int [mem: Parameter loc: -2 size: 1] [line: 11]
.   Sibling: 1  Parm: b of array of type bool [mem: Parameter loc: -3 size: 1] [line: 11]
.   Sibling: 2  Parm: c of array of type char [mem: Parameter loc: -4 size: 1] [line: 11]
.   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 12]
.   .   Child: 1  Call: output of type void [line: 13]
.   .   .   Child: 0  Op: [ of type int [line: 13]
.   .   .   .   Child: 0  Id: a of array of type int [mem: Parameter loc: -2 size: 1] [line: 13]
.   .   .   .   Child: 1  Const 1 of type int [line: 13]
.   .   Sibling: 1  Call: outputb of type void [line: 14]
.   .   .   Child: 0  Op: [ of type bool [line: 14]
.   .   .   .   Child: 0  Id: b of array of type bool [mem: Parameter loc: -3 size: 1] [line: 14]
.   .   .   .   Child: 1  Const 2 of type int [line: 14]
.   .   Sibling: 2  Call: outputc of type void [line: 15]
.   .   .   Child: 0  Op: [ of type char [line: 15]
.   .   .   .   Child: 0  Id: c of array of type char [mem: Parameter loc: -4 size: 1] [line: 15]
.   .   .   .   Child: 1  Const 3 of type int [line: 15]
.   .   Sibling: 3  Call: outnl of type void [line: 16]
Sibling: 2  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 20]
.   Child: 1  Compound [mem: None loc: 0 size: -23] [line: 21]
.   .   Child: 0  Var: x of type int [mem: Local loc: -2 size: 1] [line: 22]
.   .   Sibling: 1  Var: y of type bool [mem: Local loc: -3 size: 1] [line: 22]
.   .   Sibling: 2  Var: z of type char [mem: Local loc: -4 size: 1] [line: 22]
.   .   Sibling: 3  Var: XX of array of type int [mem: Local loc: -6 size: 4] [line: 23]
.   .   Sibling: 4  Var: YY of array of type bool [mem: Local loc: -10 size: 6] [line: 23]
.   .   Sibling: 5  Var: ZZ of array of type char [mem: Local loc: -16 size: 8] [line: 23]
.   .   Child: 1  Assign: <= of type int [line: 25]
.   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 25]
.   .   .   Child: 1  Const 333 of type int [line: 25]
.   .   Sibling: 1  Assign: <= of type bool [line: 26]
.   .   .   Child: 0  Id: y of type bool [mem: Local loc: -3 size: 1] [line: 26]
.   .   .   Child: 1  Const true of type bool [line: 26]
.   .   Sibling: 2  Assign: <= of type char [line: 27]
.   .   .   Child: 0  Id: z of type char [mem: Local loc: -4 size: 1] [line: 27]
.   .   .   Child: 1  Const 'z' of type char [line: 27]
.   .   Sibling: 3  Assign: <= of type int [line: 29]
.   .   .   Child: 0  Op: [ of type int [line: 29]
.   .   .   .   Child: 0  Id: XX of array of type int [mem: Local loc: -6 size: 4] [line: 29]
.   .   .   .   Child: 1  Const 1 of type int [line: 29]
.   .   .   Child: 1  Const 444 of type int [line: 29]
.   .   Sibling: 4  Assign: <= of type bool [line: 30]
.   .   .   Child: 0  Op: [ of type bool [line: 30]
.   .   .   .   Child: 0  Id: YY of array of type bool [mem: Local loc: -10 size: 6] [line: 30]
.   .   .   .   Child: 1  Const 2 of type int [line: 30]
.   .   .   Child: 1  Const false of type bool [line: 30]
.   .   Sibling: 5  Assign: <= of type char [line: 31]
.   .   .   Child: 0  Op: [ of type char [line: 31]
.   .   .   .   Child: 0  Id: ZZ of array of type char [mem: Local loc: -16 size: 8] [line: 31]
.   .   .   .   Child: 1  Const 3 of type int [line: 31]
.   .   .   Child: 1  Const 'a' of type char [line: 31]
.   .   Sibling: 6  Call: scalar of type void [line: 33]
.   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 33]
.   .   .   Sibling: 1  Id: y of type bool [mem: Local loc: -3 size: 1] [line: 33]
.   .   .   Sibling: 2  Id: z of type char [mem: Local loc: -4 size: 1] [line: 33]
.   .   Sibling: 7  Call: array of type void [line: 34]
.   .   .   Child: 0  Id: XX of array of type int [mem: Local loc: -6 size: 4] [line: 34]
.   .   .   Sibling: 1  Id: YY of array of type bool [mem: Local loc: -10 size: 6] [line: 34]
.   .   .   Sibling: 2  Id: ZZ of array of type char [mem: Local loc: -16 size: 8] [line: 34]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M callparam.c-
WARNING(40): Variable 'x' may be uninitialized when used here.
WARNING(40): Variable 'XX' may be uninitialized when used here.
WARNING(40): Variable 'y' may be uninitialized when used here.
WARNING(40): Variable 'YY' may be uninitialized when used here.
WARNING(40): Variable 'z' may be uninitialized when used here.
WARNING(40): Variable 'ZZ' may be uninitialized when used here.
Func: scalar returns type void [mem: Global loc: 0 size: -5] [line: 2]
.   Child: 0  Parm: a of type int [mem: Parameter loc: -2 size: 1] [line: 2]
.   Sibling: 1  Parm: b of type bool [mem: Parameter loc: -3 size: 1] [line: 2]
.   Sibling: 2  Parm: c of type char [mem: Parameter loc: -4 size: 1] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 3]
.   .   Child: 1  Call: output of type void [line: 4]
.   .   .   Child: 0  Id: a of type int [mem: Parameter loc: -2 size: 1] [line: 4]
.   .   Sibling: 1  Call: outputb of type void [line: 5]
.   .   .   Child: 0  Id: b of type bool [mem: Parameter loc: -3 size: 1] [line: 5]
.   .   Sibling: 2  Call: outputc of type void [line: 6]
.   .   .   Child: 0  Id: c of type char [mem: Parameter loc: -4 size: 1] [line: 6]
.   .   Sibling: 3  Call: outnl of type void [line: 7]
Sibling: 1  Func: array returns type void [mem: Global loc: 0 size: -5] [line: 11]
.   Child: 0  Parm: a of array of type int [mem: Parameter loc: -2 size: 1] [line: 11]
.   Sibling: 1  Parm: b of array of type bool [mem: Parameter loc: -3 size: 1] [line: 11]
.   Sibling: 2  Parm: c of array of type char [mem: Parameter loc: -4 size: 1] [line: 11]
.   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 12]
.   .   Child: 1  Call: output of type void [line: 13]
.   .   .   Child: 0  Op: [ of type int [line: 13]
.   .   .   .   Child: 0  Id: a of array of type int [mem: Parameter loc: -2 size: 1] [line: 13]
.   .   .   .   Child: 1  Const 1 of type int [line: 13]
.   .   Sibling: 1  Call: outputb of type void [line: 14]
.   .   .   Child: 0  Op: [ of type bool [line: 14]
.   .   .   .   Child: 0  Id: b of array of type bool [mem: Parameter loc: -3 size: 1] [line: 14]
.   .   .   .   Child: 1  Const 2 of type int [line: 14]
.   .   Sibling: 2  Call: outputc of type void [line: 15]
.   .   .   Child: 0  Op: [ of type char [line: 15]
.   .   .   .   Child: 0  Id: c of array of type char [mem: Parameter loc: -4 size: 1] [line: 15]
.   .   .   .   Child: 1  Const 3 of type int [line: 15]
.   .   Sibling: 3  Call: outnl of type void [line: 16]
Sibling: 2  Func: fred returns type void [mem: Global loc: 0 size: -8] [line: 20]
.   Child: 0  Parm: x of type int [mem: Parameter loc: -2 size: 1] [line: 20]
.   Sibling: 1  Parm: y of type bool [mem: Parameter loc: -3 size: 1] [line: 20]
.   Sibling: 2  Parm: z of type char [mem: Parameter loc: -4 size: 1] [line: 20]
.   Sibling: 3  Parm: XX of array of type int [mem: Parameter loc: -5 size: 1] [line: 20]
.   Sibling: 4  Parm: YY of array of type bool [mem: Parameter loc: -6 size: 1] [line: 20]
.   Sibling: 5  Parm: ZZ of array of type char [mem: Parameter loc: -7 size: 1] [line: 20]
.   Child: 1  Compound [mem: None loc: 0 size: -8] [line: 21]
.   .   Child: 1  Assign: <= of type int [line: 22]
.   .   .   Child: 0  Id: x of type int [mem: Parameter loc: -2 size: 1] [line: 22]
.   .   .   Child: 1  Const 333 of type int [line: 22]
.   .   Sibling: 1  Assign: <= of type bool [line: 23]
.   .   .   Child: 0  Id: y of type bool [mem: Parameter loc: -3 size: 1] [line: 23]
.   .   .   Child: 1  Const true of type bool [line: 23]
.   .   Sibling: 2  Assign: <= of type char [line: 24]
.   .   .   Child: 0  Id: z of type char [mem: Parameter loc: -4 size: 1] [line: 24]
.   .   .   Child: 1  Const 'z' of type char [line: 24]
.   .   Sibling: 3  Assign: <= of type int [line: 26]
.   .   .   Child: 0  Op: [ of type int [line: 26]
.   .   .   .   Child: 0  Id: XX of array of type int [mem: Parameter loc: -5 size: 1] [line: 26]
.   .   .   .   Child: 1  Const 1 of type int [line: 26]
.   .   .   Child: 1  Const 444 of type int [line: 26]
.   .   Sibling: 4  Assign: <= of type bool [line: 27]
.   .   .   Child: 0  Op: [ of type bool [line: 27]
.   .   .   .   Child: 0  Id: YY of array of type bool [mem: Parameter loc: -6 size: 1] [line: 27]
.   .   .   .   Child: 1  Const 2 of type int [line: 27]
.   .   .   Child: 1  Const false of type bool [line: 27]
.   .   Sibling: 5  Assign: <= of type char [line: 28]
.   .   .   Child: 0  Op: [ of type char [line: 28]
.   .   .   .   Child: 0  Id: ZZ of array of type char [mem: Parameter loc: -7 size: 1] [line: 28]
.   .   .   .   Child: 1  Const 3 of type int [line: 28]
.   .   .   Child: 1  Const 'a' of type char [line: 28]
.   .   Sibling: 6  Call: scalar of type void [line: 30]
.   .   .   Child: 0  Id: x of type int [mem: Parameter loc: -2 size: 1] [line: 30]
.   .   .   Sibling: 1  Id: y of type bool [mem: Parameter loc: -3 size: 1] [line: 30]
.   .   .   Sibling: 2  Id: z of type char [mem: Parameter loc: -4 size: 1] [line: 30]
.   .   Sibling: 7  Call: array of type void [line: 31]
.   .   .   Child: 0  Id: XX of array of type int [mem: Parameter loc: -5 size: 1] [line: 31]
.   .   .   Sibling: 1  Id: YY of array of type bool [mem: Parameter loc: -6 size: 1] [line: 31]
.   .   .   Sibling: 2  Id: ZZ of array of type char [mem: Parameter loc: -7 size: 1] [line: 31]
Sibling: 3  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 35]
.   Child: 1  Compound [mem: None loc: 0 size: -23] [line: 36]
.   .   Child: 0  Var: x of type int [mem: Local loc: -2 size: 1] [line: 37]
.   .   Sibling: 1  Var: y of type bool [mem: Local loc: -3 size: 1] [line: 37]
.   .   Sibling: 2  Var: z of type char [mem: Local loc: -4 size: 1] [line: 37]
.   .   Sibling: 3  Var: XX of array of type int [mem: Local loc: -6 size: 4] [line: 38]
.   .   Sibling: 4  Var: YY of array of type bool [mem: Local loc: -10 size: 6] [line: 38]
.   .   Sibling: 5  Var: ZZ of array of type char [mem: Local loc: -16 size: 8] [line: 38]
.   .   Child: 1  Call: fred of type void [line: 40]
.   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 40]
.   .   .   Sibling: 1  Id: y of type bool [mem: Local loc: -3 size: 1] [line: 40]
.   .   .   Sibling: 2  Id: z of type char [mem: Local loc: -4 size: 1] [line: 40]
.   .   .   Sibling: 3  Id: XX of array of type int [mem: Local loc: -6 size: 4] [line: 40]
.   .   .   Sibling: 4  Id: YY of array of type bool [mem: Local loc: -10 size: 6] [line: 40]
.   .   .   Sibling: 5  Id: ZZ of array of type char [mem: Local loc: -16 size: 8] [line: 40]
Offset for end of global space: 0
Number of warnings: 6
Number of errors: 0

==============
==============
./c- -M callstatic.c-
Func: scalar returns type void [mem: Global loc: 0 size: -5] [line: 2]
.   Child: 0  Parm: a of type int [mem: Parameter loc: -2 size: 1] [line: 2]
.   Sibling: 1  Parm: b of type bool [mem: Parameter loc: -3 size: 1] [line: 2]
.   Sibling: 2  Parm: c of type char [mem: Parameter loc: -4 size: 1] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 3]
.   .   Child: 1  Call: output of type void [line: 4]
.   .   .   Child: 0  Id: a of type int [mem: Parameter loc: -2 size: 1] [line: 4]
.   .   Sibling: 1  Call: outputb of type void [line: 5]
.   .   .   Child: 0  Id: b of type bool [mem: Parameter loc: -3 size: 1] [line: 5]
.   .   Sibling: 2  Call: outputc of type void [line: 6]
.   .   .   Child: 0  Id: c of type char [mem: Parameter loc: -4 size: 1] [line: 6]
.   .   Sibling: 3  Call: outnl of type void [line: 7]
Sibling: 1  Func: array returns type void [mem: Global loc: 0 size: -5] [line: 11]
.   Child: 0  Parm: a of array of type int [mem: Parameter loc: -2 size: 1] [line: 11]
.   Sibling: 1  Parm: b of array of type bool [mem: Parameter loc: -3 size: 1] [line: 11]
.   Sibling: 2  Parm: c of array of type char [mem: Parameter loc: -4 size: 1] [line: 11]
.   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 12]
.   .   Child: 1  Call: output of type void [line: 13]
.   .   .   Child: 0  Op: [ of type int [line: 13]
.   .   .   .   Child: 0  Id: a of array of type int [mem: Parameter loc: -2 size: 1] [line: 13]
.   .   .   .   Child: 1  Const 1 of type int [line: 13]
.   .   Sibling: 1  Call: outputb of type void [line: 14]
.   .   .   Child: 0  Op: [ of type bool [line: 14]
.   .   .   .   Child: 0  Id: b of array of type bool [mem: Parameter loc: -3 size: 1] [line: 14]
.   .   .   .   Child: 1  Const 2 of type int [line: 14]
.   .   Sibling: 2  Call: outputc of type void [line: 15]
.   .   .   Child: 0  Op: [ of type char [line: 15]
.   .   .   .   Child: 0  Id: c of array of type char [mem: Parameter loc: -4 size: 1] [line: 15]
.   .   .   .   Child: 1  Const 3 of type int [line: 15]
.   .   Sibling: 3  Call: outnl of type void [line: 16]
Sibling: 2  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 20]
.   Child: 1  Compound [mem: None loc: 0 size: -18] [line: 21]
.   .   Child: 0  Var: x of static type int [mem: LocalStatic loc: 0 size: 1] [line: 22]
.   .   Sibling: 1  Var: y of type bool [mem: Local loc: -2 size: 1] [line: 22]
.   .   Sibling: 2  Var: z of type char [mem: Local loc: -3 size: 1] [line: 22]
.   .   Sibling: 3  Var: XX of static array of type int [mem: LocalStatic loc: -2 size: 4] [line: 23]
.   .   Sibling: 4  Var: YY of array of type bool [mem: Local loc: -5 size: 6] [line: 23]
.   .   Sibling: 5  Var: ZZ of array of type char [mem: Local loc: -11 size: 8] [line: 23]
.   .   Child: 1  Assign: <= of type int [line: 25]
.   .   .   Child: 0  Id: x of static type int [mem: LocalStatic loc: 0 size: 1] [line: 25]
.   .   .   Child: 1  Const 333 of type int [line: 25]
.   .   Sibling: 1  Assign: <= of type bool [line: 26]
.   .   .   Child: 0  Id: y of type bool [mem: Local loc: -2 size: 1] [line: 26]
.   .   .   Child: 1  Const true of type bool [line: 26]
.   .   Sibling: 2  Assign: <= of type char [line: 27]
.   .   .   Child: 0  Id: z of type char [mem: Local loc: -3 size: 1] [line: 27]
.   .   .   Child: 1  Const 'z' of type char [line: 27]
.   .   Sibling: 3  Assign: <= of type int [line: 29]
.   .   .   Child: 0  Op: [ of type int [line: 29]
.   .   .   .   Child: 0  Id: XX of static array of type int [mem: LocalStatic loc: -2 size: 4] [line: 29]
.   .   .   .   Child: 1  Const 1 of type int [line: 29]
.   .   .   Child: 1  Const 444 of type int [line: 29]
.   .   Sibling: 4  Assign: <= of type bool [line: 30]
.   .   .   Child: 0  Op: [ of type bool [line: 30]
.   .   .   .   Child: 0  Id: YY of array of type bool [mem: Local loc: -5 size: 6] [line: 30]
.   .   .   .   Child: 1  Const 2 of type int [line: 30]
.   .   .   Child: 1  Const false of type bool [line: 30]
.   .   Sibling: 5  Assign: <= of type char [line: 31]
.   .   .   Child: 0  Op: [ of type char [line: 31]
.   .   .   .   Child: 0  Id: ZZ of array of type char [mem: Local loc: -11 size: 8] [line: 31]
.   .   .   .   Child: 1  Const 3 of type int [line: 31]
.   .   .   Child: 1  Const 'a' of type char [line: 31]
.   .   Sibling: 6  Call: scalar of type void [line: 33]
.   .   .   Child: 0  Id: x of static type int [mem: LocalStatic loc: 0 size: 1] [line: 33]
.   .   .   Sibling: 1  Id: y of type bool [mem: Local loc: -2 size: 1] [line: 33]
.   .   .   Sibling: 2  Id: z of type char [mem: Local loc: -3 size: 1] [line: 33]
.   .   Sibling: 7  Call: array of type void [line: 34]
.   .   .   Child: 0  Id: XX of static array of type int [mem: LocalStatic loc: -2 size: 4] [line: 34]
.   .   .   Sibling: 1  Id: YY of array of type bool [mem: Local loc: -5 size: 6] [line: 34]
.   .   .   Sibling: 2  Id: ZZ of array of type char [mem: Local loc: -11 size: 8] [line: 34]
Offset for end of global space: -5
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M chararray.c-
WARNING(7): Variable 'a' may be uninitialized when used here.
WARNING(9): Variable 'b' may be uninitialized when used here.
Func: main returns type void [mem: Global loc: 0 size: -2] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -18] [line: 3]
.   .   Child: 0  Var: a of array of type char [mem: Local loc: -3 size: 4] [line: 4]
.   .   Sibling: 1  Var: b of array of type char [mem: Local loc: -7 size: 4] [line: 4]
.   .   Sibling: 2  Var: c of array of type char [mem: Local loc: -11 size: 3] [line: 5]
.   .   Sibling: 3  Var: d of array of type char [mem: Local loc: -14 size: 5] [line: 5]
.   .   Child: 1  Op: [ of type char [line: 7]
.   .   .   Child: 0  Id: a of array of type char [mem: Local loc: -3 size: 4] [line: 7]
.   .   .   Child: 1  Const 666 of type int [line: 7]
.   .   Sibling: 1  Assign: <= of type char [line: 8]
.   .   .   Child: 0  Op: [ of type char [line: 8]
.   .   .   .   Child: 0  Id: a of array of type char [mem: Local loc: -3 size: 4] [line: 8]
.   .   .   .   Child: 1  Const 666 of type int [line: 8]
.   .   .   Child: 1  Const 'Q' of type char [line: 8]
.   .   Sibling: 2  Assign: <= of type char [line: 9]
.   .   .   Child: 0  Op: [ of type char [line: 9]
.   .   .   .   Child: 0  Id: a of array of type char [mem: Local loc: -3 size: 4] [line: 9]
.   .   .   .   Child: 1  Const 666 of type int [line: 9]
.   .   .   Child: 1  Op: [ of type char [line: 9]
.   .   .   .   Child: 0  Id: b of array of type char [mem: Local loc: -7 size: 4] [line: 9]
.   .   .   .   Child: 1  Const 777 of type int [line: 9]
.   .   Sibling: 3  Assign: <= of array of type char [line: 10]
.   .   .   Child: 0  Id: a of array of type char [mem: Local loc: -3 size: 4] [line: 10]
.   .   .   Child: 1  Const "dog" of array of type char [mem: Global loc: -1 size: 4] [line: 10]
.   .   Sibling: 4  Assign: <= of array of type char [line: 11]
.   .   .   Child: 0  Id: b of array of type char [mem: Local loc: -7 size: 4] [line: 11]
.   .   .   Child: 1  Id: a of array of type char [mem: Local loc: -3 size: 4] [line: 11]
.   .   Sibling: 5  Assign: <= of array of type char [line: 12]
.   .   .   Child: 0  Id: c of array of type char [mem: Local loc: -11 size: 3] [line: 12]
.   .   .   Child: 1  Id: a of array of type char [mem: Local loc: -3 size: 4] [line: 12]
.   .   Sibling: 6  Assign: <= of array of type char [line: 13]
.   .   .   Child: 0  Id: d of array of type char [mem: Local loc: -14 size: 5] [line: 13]
.   .   .   Child: 1  Id: a of array of type char [mem: Local loc: -3 size: 4] [line: 13]
Offset for end of global space: -4
Number of warnings: 2
Number of errors: 0

==============
==============
./c- -M compfunc.c-
WARNING(3): The function 'elk' seems not to be used.
ERROR(4): Symbol 'x' is already declared at line 3.
WARNING(11): The function 'fox' seems not to be used.
WARNING(19): The function 'gnu' seems not to be used.
WARNING(26): The function 'hog' seems not to be used.
WARNING(26): The parameter 'x' seems not to be used.
Number of warnings: 5
Number of errors: 1

==============
==============
./c- -M const2.c-
WARNING(1): The variable 'g' seems not to be used.
WARNING(4): The variable 'x' seems not to be used.
WARNING(4): The variable 'y' seems not to be used.
WARNING(5): The variable 'c' seems not to be used.
WARNING(9): The variable 'z' seems not to be used.
WARNING(12): The variable 'h' seems not to be used.
Var: g of type int [mem: Global loc: 0 size: 1] [line: 1]
Sibling: 1  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -105] [line: 3]
.   .   Child: 0  Var: x of type int [mem: Local loc: -2 size: 1] [line: 4]
.   .   Sibling: 1  Var: y of type int [mem: Local loc: -3 size: 1] [line: 4]
.   .   Sibling: 2  Var: c of array of type char [mem: Local loc: -5 size: 101] [line: 5]
.   .   Child: 1  Const "dogs" of array of type char [mem: Global loc: -2 size: 5] [line: 6]
.   .   Sibling: 1  Const "horses" of array of type char [mem: Global loc: -7 size: 7] [line: 7]
.   .   Sibling: 2  Compound [mem: None loc: 0 size: -106] [line: 8]
.   .   .   Child: 0  Var: z of type int [mem: Local loc: -105 size: 1] [line: 9]
Sibling: 2  Var: h of type int [mem: Global loc: -13 size: 1] [line: 12]
Offset for end of global space: -14
Number of warnings: 6
Number of errors: 0

==============
==============
./c- -M constants.c-
Func: main returns type void [mem: Global loc: 0 size: -2] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 3]
.   .   Child: 1  Call: output of type void [line: 4]
.   .   .   Child: 0  Const 111 of type int [line: 4]
.   .   Sibling: 1  Call: outputb of type void [line: 5]
.   .   .   Child: 0  Const true of type bool [line: 5]
.   .   Sibling: 2  Call: outputb of type void [line: 6]
.   .   .   Child: 0  Const false of type bool [line: 6]
.   .   Sibling: 3  Call: outputc of type void [line: 7]
.   .   .   Child: 0  Const 'x' of type char [line: 7]
.   .   Sibling: 4  Call: outnl of type void [line: 8]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M const.c-
WARNING(1): The variable 'g' seems not to be used.
WARNING(7): The variable 'h' seems not to be used.
Var: g of type int [mem: Global loc: 0 size: 1] [line: 1]
Sibling: 1  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 3]
.   .   Child: 1  Const "dogs" of array of type char [mem: Global loc: -2 size: 5] [line: 4]
.   .   Sibling: 1  Const "cats" of array of type char [mem: Global loc: -7 size: 5] [line: 5]
Sibling: 2  Var: h of type int [mem: Global loc: -11 size: 1] [line: 7]
Offset for end of global space: -12
Number of warnings: 2
Number of errors: 0

==============
==============
./c- -M control2.c-
Func: main returns type void [mem: Global loc: 0 size: -2] [line: 1]
.   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 1]
.   .   Child: 0  Var: x of type bool [mem: Local loc: -2 size: 1] [line: 2]
.   .   Sibling: 1  Var: y of type bool [mem: Local loc: -3 size: 1] [line: 2]
.   .   Child: 1  Assign: <= of type bool [line: 4]
.   .   .   Child: 0  Id: x of type bool [mem: Local loc: -2 size: 1] [line: 4]
.   .   .   Child: 1  Const true of type bool [line: 4]
.   .   Sibling: 1  Assign: <= of type bool [line: 5]
.   .   .   Child: 0  Id: y of type bool [mem: Local loc: -3 size: 1] [line: 5]
.   .   .   Child: 1  Const false of type bool [line: 5]
.   .   Sibling: 2  If [line: 7]
.   .   .   Child: 0  Id: x of type bool [mem: Local loc: -2 size: 1] [line: 7]
.   .   .   Child: 1  Const 111 of type int [line: 7]
.   .   Sibling: 3  If [line: 9]
.   .   .   Child: 0  Id: y of type bool [mem: Local loc: -3 size: 1] [line: 9]
.   .   .   Child: 1  Const 222 of type int [line: 9]
.   .   .   Child: 2  Const 333 of type int [line: 10]
.   .   Sibling: 4  If [line: 12]
.   .   .   Child: 0  Id: x of type bool [mem: Local loc: -2 size: 1] [line: 12]
.   .   .   Child: 1  If [line: 12]
.   .   .   .   Child: 0  Id: y of type bool [mem: Local loc: -3 size: 1] [line: 12]
.   .   .   .   Child: 1  Const 444 of type int [line: 12]
.   .   .   .   Child: 2  Const 555 of type int [line: 13]
.   .   Sibling: 5  While [line: 15]
.   .   .   Child: 0  Id: x of type bool [mem: Local loc: -2 size: 1] [line: 15]
.   .   .   Child: 1  Const 666 of type int [line: 15]
.   .   Sibling: 6  While [line: 17]
.   .   .   Child: 0  Id: y of type bool [mem: Local loc: -3 size: 1] [line: 17]
.   .   .   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 17]
.   .   .   .   Child: 1  Const 777 of type int [line: 18]
.   .   .   .   Sibling: 1  Break [line: 19]
.   .   .   .   Sibling: 2  Const 888 of type int [line: 20]
.   .   .   .   Sibling: 3  Break [line: 21]
.   .   .   .   Sibling: 4  Const 999 of type int [line: 22]
.   .   Sibling: 7  While [line: 25]
.   .   .   Child: 0  Id: x of type bool [mem: Local loc: -2 size: 1] [line: 25]
.   .   .   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 25]
.   .   .   .   Child: 1  Const 111 of type int [line: 26]
.   .   .   .   Sibling: 1  Break [line: 27]
.   .   .   .   Sibling: 2  While [line: 28]
.   .   .   .   .   Child: 0  Id: y of type bool [mem: Local loc: -3 size: 1] [line: 28]
.   .   .   .   .   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 28]
.   .   .   .   .   .   Child: 1  Const 222 of type int [line: 29]
.   .   .   .   .   .   Sibling: 1  Break [line: 30]
.   .   .   .   .   .   Sibling: 2  Const 333 of type int [line: 31]
.   .   .   .   Sibling: 3  Break [line: 33]
.   .   .   .   Sibling: 4  Const 444 of type int [line: 34]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M control.c-
Func: main returns type void [mem: Global loc: 0 size: -2] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 3]
.   .   Child: 0  Var: x of type int [mem: Local loc: -2 size: 1] [line: 4]
.   .   Child: 1  If [line: 6]
.   .   .   Child: 0  Op: > of type bool [line: 6]
.   .   .   .   Child: 0  Const 6 of type int [line: 6]
.   .   .   .   Child: 1  Const 3 of type int [line: 6]
.   .   .   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 6]
.   .   .   .   Child: 1  Assign: <= of type int [line: 7]
.   .   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 7]
.   .   .   .   .   Child: 1  Const 111 of type int [line: 7]
.   .   .   Child: 2  Compound [mem: None loc: 0 size: -3] [line: 9]
.   .   .   .   Child: 1  Assign: <= of type int [line: 10]
.   .   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 10]
.   .   .   .   .   Child: 1  Const 222 of type int [line: 10]
.   .   Sibling: 1  While [line: 13]
.   .   .   Child: 0  Op: > of type bool [line: 13]
.   .   .   .   Child: 0  Const 7 of type int [line: 13]
.   .   .   .   Child: 1  Const 3 of type int [line: 13]
.   .   .   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 13]
.   .   .   .   Child: 1  Assign: <= of type int [line: 14]
.   .   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 14]
.   .   .   .   .   Child: 1  Const 333 of type int [line: 14]
.   .   .   .   Sibling: 1  If [line: 15]
.   .   .   .   .   Child: 0  Op: < of type bool [line: 15]
.   .   .   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 15]
.   .   .   .   .   .   Child: 1  Const 9 of type int [line: 15]
.   .   .   .   .   Child: 1  Break [line: 15]
.   .   .   .   Sibling: 2  Assign: <= of type int [line: 16]
.   .   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 16]
.   .   .   .   .   Child: 1  Const 444 of type int [line: 16]
.   .   .   .   Sibling: 3  Break [line: 17]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M cover.c-
WARNING(2): The variable 'fahrenheit' seems not to be used.
ERROR(19): Unary '--' requires an operand of type int but was given type char.
ERROR(20): Unary '?' requires an operand of type int but was given type char.
ERROR(22): Cannot index nonarray 'e'.
ERROR(22): Cannot index nonarray 'e'.
ERROR(22): '+' requires operands of type int but lhs is of type bool.
ERROR(22): '+' requires operands of type int but rhs is of type bool.
ERROR(23): Array 'e' should be indexed by type int but got type bool.
ERROR(23): Cannot index nonarray 'e'.
ERROR(23): Cannot index nonarray 'e'.
ERROR(26): 'and' requires operands of type bool but lhs is of type int.
ERROR(26): 'and' requires operands of type bool but rhs is of type int.
WARNING(31): The variable 'i' seems not to be used.
WARNING(31): The variable 'x' seems not to be used.
WARNING(35): The variable 'a' seems not to be used.
WARNING(36): The variable 'c' seems not to be used.
WARNING(38): The variable 'g' seems not to be used.
ERROR(39): Not expecting array in parameter 2 of call to 'fred' declared on line 6.
WARNING(39): Variable 'b' may be uninitialized when used here.
WARNING(39): Variable 'd' may be uninitialized when used here.
WARNING(39): Variable 'e' may be uninitialized when used here.
WARNING(39): Variable 'f' may be uninitialized when used here.
Number of warnings: 10
Number of errors: 12

==============
==============
./c- -M decl.c-
WARNING(4): The variable 'a' seems not to be used.
WARNING(5): The variable 'b' seems not to be used.
WARNING(6): The variable 'c' seems not to be used.
Func: main returns type void [mem: Global loc: 0 size: -2] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 3]
.   .   Child: 0  Var: a of type int [mem: Local loc: -2 size: 1] [line: 4]
.   .   Sibling: 1  Var: b of type bool [mem: Local loc: -3 size: 1] [line: 5]
.   .   Sibling: 2  Var: c of type char [mem: Local loc: -4 size: 1] [line: 6]
Offset for end of global space: 0
Number of warnings: 3
Number of errors: 0

==============
==============
./c- -M declinitreset.c-
WARNING(6): Variable 'a' may be uninitialized when used here.
ERROR(9): Symbol 'z' is not declared.
ERROR(10): Symbol 'z' is not declared.
ERROR(11): Symbol 'z' is not declared.
Number of warnings: 1
Number of errors: 3

==============
==============
./c- -M decllists.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(1): The variable 'x' seems not to be used.
WARNING(1): The variable 'y' seems not to be used.
WARNING(1): The variable 'z' seems not to be used.
WARNING(3): Expecting to return type int but function 'fred' has no return statement.
WARNING(3): The function 'fred' seems not to be used.
WARNING(3): The parameter 'a' seems not to be used.
WARNING(3): The parameter 'b' seems not to be used.
WARNING(3): The parameter 'c' seems not to be used.
WARNING(3): The parameter 'd' seems not to be used.
WARNING(3): The parameter 'e' seems not to be used.
WARNING(3): The parameter 'f' seems not to be used.
WARNING(3): The parameter 'g' seems not to be used.
WARNING(3): The parameter 'h' seems not to be used.
WARNING(3): The parameter 'i' seems not to be used.
WARNING(3): The parameter 'j' seems not to be used.
WARNING(3): The parameter 'k' seems not to be used.
WARNING(3): The parameter 'l' seems not to be used.
WARNING(3): The parameter 'm' seems not to be used.
WARNING(5): The variable 'aa' seems not to be used.
WARNING(5): The variable 'bb' seems not to be used.
WARNING(5): The variable 'cc' seems not to be used.
WARNING(5): The variable 'dd' seems not to be used.
WARNING(5): The variable 'ee' seems not to be used.
WARNING(5): The variable 'ff' seems not to be used.
WARNING(5): The variable 'gg' seems not to be used.
WARNING(5): The variable 'hh' seems not to be used.
WARNING(5): The variable 'ii' seems not to be used.
Number of warnings: 27
Number of errors: 1

==============
==============
./c- -M defused.c-
WARNING(2): The variable 'x' seems not to be used.
WARNING(6): The variable 'v' seems not to be used.
WARNING(6): The variable 'z' seems not to be used.
ERROR(7): Symbol 'v' is already declared at line 6.
ERROR(8): Symbol 'x' is already declared at line 6.
WARNING(12): Variable 'y' may be uninitialized when used here.
ERROR(13): Symbol 'u' is not declared.
ERROR(13): Symbol 'w' is not declared.
ERROR(16): Symbol 'bob' is already declared at line 1.
ERROR(16): Symbol 'bob' is already declared at line 16.
ERROR(17): Initializer for variable 'bob' is not a constant expression.
ERROR(17): Symbol 'bob' is already declared at line 16.
WARNING(19): The variable 'bob' seems not to be used.
ERROR(20): Symbol 'bob' is already declared at line 19.
ERROR(31): Symbol 'bob' is already declared at line 1.
ERROR(33): Symbol 'a' is already declared at line 33.
ERROR(33): Symbol 'bob' is already declared at line 1.
WARNING(33): The parameter 'a' seems not to be used.
WARNING(39): Variable 'dave' may be uninitialized when used here.
Number of warnings: 7
Number of errors: 12

==============
==============
./c- -M elsif.c-
WARNING(2): Expecting to return type int but function 'main' has no return statement.
ERROR(4): Expecting Boolean test condition in if statement but got type int.
ERROR(5): Expecting Boolean test condition in if statement but got type int.
ERROR(6): Expecting Boolean test condition in if statement but got type int.
ERROR(9): Expecting Boolean test condition in if statement but got type int.
ERROR(10): Expecting Boolean test condition in if statement but got type int.
ERROR(11): Expecting Boolean test condition in if statement but got type int.
ERROR(14): Expecting Boolean test condition in if statement but got type int.
ERROR(15): Expecting Boolean test condition in if statement but got type int.
ERROR(16): Expecting Boolean test condition in if statement but got type int.
Number of warnings: 1
Number of errors: 9

==============
==============
./c- -M emptyline.c-
WARNING(4): The function 'dogs' seems not to be used.
WARNING(6): The variable 'x' seems not to be used.
WARNING(12): The variable 'x' seems not to be used.
Func: main returns type void [mem: Global loc: 0 size: -2] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 2]
Sibling: 1  Func: dogs returns type void [mem: Global loc: 0 size: -2] [line: 4]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 5]
.   .   Child: 0  Var: x of type int [mem: Local loc: -2 size: 1] [line: 6]
.   .   Child: 1  If [line: 9]
.   .   .   Child: 0  Const true of type bool [line: 9]
.   .   Sibling: 1  While [line: 11]
.   .   .   Child: 0  Const true of type bool [line: 11]
.   .   Sibling: 2  For [mem: None loc: 0 size: -4] [line: 12]
.   .   .   Child: 0  Var: x of type int [mem: Local loc: -3 size: 1] [line: 12]
.   .   .   Child: 1  Range [line: 12]
.   .   .   .   Child: 0  Const 1 of type int [line: 12]
.   .   .   .   Child: 1  Const 10 of type int [line: 12]
.   .   Sibling: 3  Compound [mem: None loc: 0 size: -3] [line: 13]
Offset for end of global space: 0
Number of warnings: 3
Number of errors: 0

==============
==============
./c- -M errormessages.c-
ERROR(5): Function 'cat' at line 5 is expecting to return type char but returns type int.
WARNING(5): The function 'cat' seems not to be used.
ERROR(7): Function 'dog' at line 7 is expecting to return type int but return has no value.
WARNING(7): The function 'dog' seems not to be used.
WARNING(9): Expecting to return type int but function 'main' has no return statement.
ERROR(10): Initializer for variable 'c' of type char is of type int
WARNING(11): The variable 'i' seems not to be used.
ERROR(13): Expecting Boolean test condition in while statement but got type char.
ERROR(14): Unary 'chsign' requires an operand of type int but was given type char.
ERROR(15): Unary '--' requires an operand of type int but was given type char.
ERROR(17): Symbol 'emu' is not declared.
ERROR(17): Symbol 'fox' is not declared.
Number of warnings: 4
Number of errors: 8

==============
==============
./c- -M everythingS23.c-
WARNING(46): Variable 'trousers' may be uninitialized when used here.
WARNING(54): Expecting to return type bool but function 'penguin' has no return statement.
WARNING(54): The function 'penguin' seems not to be used.
WARNING(54): The parameter 'cheese' seems not to be used.
WARNING(54): The parameter 'launch' seems not to be used.
WARNING(58): The variable 'c' seems not to be used.
WARNING(59): The variable 'i' seems not to be used.
WARNING(62): Variable 'Wensleydale' may be uninitialized when used here.
WARNING(70): The variable 'skein' seems not to be used.
WARNING(76): The function 'ramsBottom' seems not to be used.
WARNING(82): Variable 'chicken' may be uninitialized when used here.
WARNING(82): Variable 'run' may be uninitialized when used here.
WARNING(85): Variable 'gromit' may be uninitialized when used here.
WARNING(85): Variable 'wallace' may be uninitialized when used here.
WARNING(90): The function 'Wensleydale' seems not to be used.
WARNING(90): The parameter 'y' seems not to be used.
WARNING(92): The function 'LadyCampanula' seems not to be used.
WARNING(98): The variable 'pastry' seems not to be used.
WARNING(104): The function 'TheWereRabbit' seems not to be used.
WARNING(116): The variable 'wool' seems not to be used.
WARNING(125): Variable 'yarn' may be uninitialized when used here.
WARNING(127): Variable 'preston' may be uninitialized when used here.
WARNING(127): Variable 'shaun' may be uninitialized when used here.
WARNING(130): The variable 'aBigLongVariableName6andthx1138' seems not to be used.
WARNING(131): The variable 'odd' seems not to be used.
WARNING(131): The variable 'of' seems not to be used.
WARNING(131): The variable 'separation' seems not to be used.
WARNING(132): The variable 'stuff' seems not to be used.
WARNING(134): The variable 'ant' seems not to be used.
WARNING(135): The variable 'bat' seems not to be used.
WARNING(136): The variable 'cat' seems not to be used.
WARNING(137): The variable 'dog' seems not to be used.
WARNING(138): The variable 'hog' seems not to be used.
Var: gromit of type int [mem: Global loc: 0 size: 1] [line: 6]
Sibling: 1  Var: mysteriousPenguin of type int [mem: Global loc: -1 size: 1] [line: 6]
Sibling: 2  Func: wallace returns type void [mem: Global loc: 0 size: -4] [line: 9]
.   Child: 0  Parm: wrong of type int [mem: Parameter loc: -2 size: 1] [line: 9]
.   Sibling: 1  Parm: trousers of type int [mem: Parameter loc: -3 size: 1] [line: 9]
.   Child: 1  Compound [mem: None loc: 0 size: -7] [line: 10]
.   .   Child: 0  Var: close of type bool [mem: Local loc: -4 size: 1] [line: 11]
.   .   .   Child: 0  Const true of type bool [line: 11]
.   .   Sibling: 1  Var: shave of type bool [mem: Local loc: -5 size: 1] [line: 11]
.   .   .   Child: 0  Const false of type bool [line: 11]
.   .   Sibling: 2  Var: cheese of type int [mem: Local loc: -6 size: 1] [line: 12]
.   .   .   Child: 0  Const 17 of type int [line: 12]
.   .   Child: 1  Const 1729 of type int [line: 14]
.   .   Sibling: 1  Id: close of type bool [mem: Local loc: -4 size: 1] [line: 15]
.   .   Sibling: 2  Op: + of type int [line: 16]
.   .   .   Child: 0  Op: * of type int [line: 16]
.   .   .   .   Child: 0  Const 11 of type int [line: 16]
.   .   .   .   Child: 1  Const 22 of type int [line: 16]
.   .   .   Child: 1  Op: * of type int [line: 16]
.   .   .   .   Child: 0  Const 33 of type int [line: 16]
.   .   .   .   Child: 1  Const 44 of type int [line: 16]
.   .   Sibling: 3  Assign: <= of type bool [line: 17]
.   .   .   Child: 0  Id: close of type bool [mem: Local loc: -4 size: 1] [line: 17]
.   .   .   Child: 1  Id: shave of type bool [mem: Local loc: -5 size: 1] [line: 17]
.   .   Sibling: 4  Assign: <= of type int [line: 18]
.   .   .   Child: 0  Id: wrong of type int [mem: Parameter loc: -2 size: 1] [line: 18]
.   .   .   Child: 1  Op: % of type int [line: 18]
.   .   .   .   Child: 0  Id: trousers of type int [mem: Parameter loc: -3 size: 1] [line: 18]
.   .   .   .   Child: 1  Op: / of type int [line: 18]
.   .   .   .   .   Child: 0  Const 666 of type int [line: 18]
.   .   .   .   .   Child: 1  Id: wrong of type int [mem: Parameter loc: -2 size: 1] [line: 18]
.   .   Sibling: 5  Assign: <= of type int [line: 19]
.   .   .   Child: 0  Id: gromit of type int [mem: Global loc: 0 size: 1] [line: 19]
.   .   .   Child: 1  Op: + of type int [line: 19]
.   .   .   .   Child: 0  Op: - of type int [line: 19]
.   .   .   .   .   Child: 0  Op: * of type int [line: 19]
.   .   .   .   .   .   Child: 0  Id: wrong of type int [mem: Parameter loc: -2 size: 1] [line: 19]
.   .   .   .   .   .   Child: 1  Id: trousers of type int [mem: Parameter loc: -3 size: 1] [line: 19]
.   .   .   .   .   Child: 1  Id: gromit of type int [mem: Global loc: 0 size: 1] [line: 19]
.   .   .   .   Child: 1  Op: chsign of type int [line: 19]
.   .   .   .   .   Child: 0  Const 42 of type int [line: 19]
.   .   Sibling: 6  Assign: += of type int [line: 20]
.   .   .   Child: 0  Id: gromit of type int [mem: Global loc: 0 size: 1] [line: 20]
.   .   .   Child: 1  Const 27182818 of type int [line: 20]
.   .   Sibling: 7  Assign: -= of type int [line: 21]
.   .   .   Child: 0  Id: gromit of type int [mem: Global loc: 0 size: 1] [line: 21]
.   .   .   Child: 1  Op: chsign of type int [line: 21]
.   .   .   .   Child: 0  Const 31415927 of type int [line: 21]
.   .   Sibling: 8  Assign: /= of type int [line: 22]
.   .   .   Child: 0  Id: gromit of type int [mem: Global loc: 0 size: 1] [line: 22]
.   .   .   Child: 1  Assign: *= of type int [line: 22]
.   .   .   .   Child: 0  Id: wrong of type int [mem: Parameter loc: -2 size: 1] [line: 22]
.   .   .   .   Child: 1  Const 42 of type int [line: 22]
.   .   Sibling: 9  Assign: <= of type bool [line: 23]
.   .   .   Child: 0  Id: close of type bool [mem: Local loc: -4 size: 1] [line: 23]
.   .   .   Child: 1  Op: and of type bool [line: 23]
.   .   .   .   Child: 0  Op: < of type bool [line: 23]
.   .   .   .   .   Child: 0  Id: wrong of type int [mem: Parameter loc: -2 size: 1] [line: 23]
.   .   .   .   .   Child: 1  Id: trousers of type int [mem: Parameter loc: -3 size: 1] [line: 23]
.   .   .   .   Child: 1  Op: !> of type bool [line: 23]
.   .   .   .   .   Child: 0  Id: trousers of type int [mem: Parameter loc: -3 size: 1] [line: 23]
.   .   .   .   .   Child: 1  Id: gromit of type int [mem: Global loc: 0 size: 1] [line: 23]
.   .   Sibling: 10  Assign: <= of type bool [line: 24]
.   .   .   Child: 0  Id: shave of type bool [mem: Local loc: -5 size: 1] [line: 24]
.   .   .   Child: 1  Op: and of type bool [line: 24]
.   .   .   .   Child: 0  Op: > of type bool [line: 24]
.   .   .   .   .   Child: 0  Id: wrong of type int [mem: Parameter loc: -2 size: 1] [line: 24]
.   .   .   .   .   Child: 1  Id: trousers of type int [mem: Parameter loc: -3 size: 1] [line: 24]
.   .   .   .   Child: 1  Op: !< of type bool [line: 24]
.   .   .   .   .   Child: 0  Id: trousers of type int [mem: Parameter loc: -3 size: 1] [line: 24]
.   .   .   .   .   Child: 1  Id: gromit of type int [mem: Global loc: 0 size: 1] [line: 24]
.   .   Sibling: 11  Compound [mem: None loc: 0 size: -11] [line: 25]
.   .   .   Child: 0  Var: a of type int [mem: Local loc: -7 size: 1] [line: 26]
.   .   .   Sibling: 1  Var: grand of type int [mem: Local loc: -8 size: 1] [line: 26]
.   .   .   .   Child: 0  Op: / of type int [line: 26]
.   .   .   .   .   Child: 0  Const 1 of type int [line: 26]
.   .   .   .   .   Child: 1  Const 2 of type int [line: 26]
.   .   .   Sibling: 2  Var: day of type int [mem: Local loc: -9 size: 1] [line: 26]
.   .   .   .   Child: 0  Op: * of type int [line: 26]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 26]
.   .   .   .   .   Child: 1  Const 4 of type int [line: 26]
.   .   .   Sibling: 3  Var: out of type int [mem: Local loc: -10 size: 1] [line: 26]
.   .   .   .   Child: 0  Op: chsign of type int [line: 26]
.   .   .   .   .   Child: 0  Const 9 of type int [line: 26]
.   .   .   Child: 1  Assign: <= of type int [line: 27]
.   .   .   .   Child: 0  Id: a of type int [mem: Local loc: -7 size: 1] [line: 27]
.   .   .   .   Child: 1  Assign: += of type int [line: 27]
.   .   .   .   .   Child: 0  Id: grand of type int [mem: Local loc: -8 size: 1] [line: 27]
.   .   .   .   .   Child: 1  Assign: -= of type int [line: 27]
.   .   .   .   .   .   Child: 0  Id: day of type int [mem: Local loc: -9 size: 1] [line: 27]
.   .   .   .   .   .   Child: 1  Id: out of type int [mem: Local loc: -10 size: 1] [line: 27]
.   .   Sibling: 12  Assign: <= of type bool [line: 29]
.   .   .   Child: 0  Id: close of type bool [mem: Local loc: -4 size: 1] [line: 29]
.   .   .   Child: 1  Op: and of type bool [line: 29]
.   .   .   .   Child: 0  Op: < of type bool [line: 29]
.   .   .   .   .   Child: 0  Op: + of type int [line: 29]
.   .   .   .   .   .   Child: 0  Op: * of type int [line: 29]
.   .   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 29]
.   .   .   .   .   .   .   .   Child: 0  Const 1 of type int [line: 29]
.   .   .   .   .   .   .   Child: 1  Const 2 of type int [line: 29]
.   .   .   .   .   .   Child: 1  Const 3 of type int [line: 29]
.   .   .   .   .   Child: 1  Op: * of type int [line: 29]
.   .   .   .   .   .   Child: 0  Const 4 of type int [line: 29]
.   .   .   .   .   .   Child: 1  Const 5 of type int [line: 29]
.   .   .   .   Child: 1  Op: > of type bool [line: 29]
.   .   .   .   .   Child: 0  Op: + of type int [line: 29]
.   .   .   .   .   .   Child: 0  Const 6 of type int [line: 29]
.   .   .   .   .   .   Child: 1  Const 7 of type int [line: 29]
.   .   .   .   .   Child: 1  Op: chsign of type int [line: 29]
.   .   .   .   .   .   Child: 0  Const 3 of type int [line: 29]
.   .   Sibling: 13  Assign: <= of type bool [line: 30]
.   .   .   Child: 0  Id: shave of type bool [mem: Local loc: -5 size: 1] [line: 30]
.   .   .   Child: 1  Op: or of type bool [line: 30]
.   .   .   .   Child: 0  Const true of type bool [line: 30]
.   .   .   .   Child: 1  Op: and of type bool [line: 30]
.   .   .   .   .   Child: 0  Op: < of type bool [line: 30]
.   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 30]
.   .   .   .   .   .   .   Child: 0  Op: * of type int [line: 30]
.   .   .   .   .   .   .   .   Child: 0  Const 1 of type int [line: 30]
.   .   .   .   .   .   .   .   Child: 1  Op: + of type int [line: 30]
.   .   .   .   .   .   .   .   .   Child: 0  Const 2 of type int [line: 30]
.   .   .   .   .   .   .   .   .   Child: 1  Const 3 of type int [line: 30]
.   .   .   .   .   .   Child: 1  Op: * of type int [line: 30]
.   .   .   .   .   .   .   Child: 0  Const 4 of type int [line: 30]
.   .   .   .   .   .   .   Child: 1  Const 5 of type int [line: 30]
.   .   .   .   .   Child: 1  Op: > of type bool [line: 30]
.   .   .   .   .   .   Child: 0  Op: + of type int [line: 30]
.   .   .   .   .   .   .   Child: 0  Const 6 of type int [line: 30]
.   .   .   .   .   .   .   Child: 1  Const 7 of type int [line: 30]
.   .   .   .   .   .   Child: 1  Op: chsign of type int [line: 30]
.   .   .   .   .   .   .   Child: 0  Const 3 of type int [line: 30]
.   .   Sibling: 14  If [line: 31]
.   .   .   Child: 0  Op: != of type bool [line: 31]
.   .   .   .   Child: 0  Id: shave of type bool [mem: Local loc: -5 size: 1] [line: 31]
.   .   .   .   Child: 1  Id: close of type bool [mem: Local loc: -4 size: 1] [line: 31]
.   .   .   Child: 1  Assign: <= of type bool [line: 31]
.   .   .   .   Child: 0  Id: shave of type bool [mem: Local loc: -5 size: 1] [line: 31]
.   .   .   .   Child: 1  Op: not of type bool [line: 31]
.   .   .   .   .   Child: 0  Id: close of type bool [mem: Local loc: -4 size: 1] [line: 31]
.   .   Sibling: 15  If [line: 32]
.   .   .   Child: 0  Op: not of type bool [line: 32]
.   .   .   .   Child: 0  Op: or of type bool [line: 32]
.   .   .   .   .   Child: 0  Op: = of type bool [line: 32]
.   .   .   .   .   .   Child: 0  Id: shave of type bool [mem: Local loc: -5 size: 1] [line: 32]
.   .   .   .   .   .   Child: 1  Id: close of type bool [mem: Local loc: -4 size: 1] [line: 32]
.   .   .   .   .   Child: 1  Op: not of type bool [line: 32]
.   .   .   .   .   .   Child: 0  Id: close of type bool [mem: Local loc: -4 size: 1] [line: 32]
.   .   .   Child: 1  Assign: <= of type bool [line: 32]
.   .   .   .   Child: 0  Id: shave of type bool [mem: Local loc: -5 size: 1] [line: 32]
.   .   .   .   Child: 1  Const true of type bool [line: 32]
.   .   .   Child: 2  Assign: <= of type bool [line: 33]
.   .   .   .   Child: 0  Id: close of type bool [mem: Local loc: -4 size: 1] [line: 33]
.   .   .   .   Child: 1  Const false of type bool [line: 33]
.   .   Sibling: 16  Assign: <= of type int [line: 34]
.   .   .   Child: 0  Id: mysteriousPenguin of type int [mem: Global loc: -1 size: 1] [line: 34]
.   .   .   Child: 1  Op: chsign of type int [line: 34]
.   .   .   .   Child: 0  Op: - of type int [line: 34]
.   .   .   .   .   Child: 0  Op: chsign of type int [line: 34]
.   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 34]
.   .   .   .   .   .   .   Child: 0  Const 8 of type int [line: 34]
.   .   .   .   .   Child: 1  Op: chsign of type int [line: 34]
.   .   .   .   .   .   Child: 0  Assign: -- of type int [line: 34]
.   .   .   .   .   .   .   Child: 0  Id: cheese of type int [mem: Local loc: -6 size: 1] [line: 34]
.   .   Sibling: 17  While [line: 36]
.   .   .   Child: 0  Id: shave of type bool [mem: Local loc: -5 size: 1] [line: 36]
.   .   .   Child: 1  Compound [mem: None loc: 0 size: -7] [line: 36]
.   .   .   .   Child: 0  Var: were of static type int [mem: LocalStatic loc: -2 size: 1] [line: 37]
.   .   .   .   Sibling: 1  Var: rabbit of static type int [mem: LocalStatic loc: -3 size: 1] [line: 37]
.   .   .   .   Sibling: 2  Var: sheep of static array of type int [mem: LocalStatic loc: -5 size: 11] [line: 38]
.   .   .   .   Child: 1  Assign: <= of type int [line: 40]
.   .   .   .   .   Child: 0  Op: [ of type int [line: 40]
.   .   .   .   .   .   Child: 0  Id: sheep of static array of type int [mem: LocalStatic loc: -5 size: 11] [line: 40]
.   .   .   .   .   .   Child: 1  Const 2 of type int [line: 40]
.   .   .   .   .   Child: 1  Const 1618 of type int [line: 40]
.   .   .   .   Sibling: 1  If [line: 41]
.   .   .   .   .   Child: 0  Op: < of type bool [line: 41]
.   .   .   .   .   .   Child: 0  Op: [ of type int [line: 41]
.   .   .   .   .   .   .   Child: 0  Id: sheep of static array of type int [mem: LocalStatic loc: -5 size: 11] [line: 41]
.   .   .   .   .   .   .   Child: 1  Const 2 of type int [line: 41]
.   .   .   .   .   .   Child: 1  Const 496 of type int [line: 41]
.   .   .   .   .   Child: 1  Break [line: 41]
.   .   .   .   Sibling: 2  Call: wallace of type void [line: 42]
.   .   .   .   .   Child: 0  Assign: -- of type int [line: 42]
.   .   .   .   .   .   Child: 0  Id: gromit of type int [mem: Global loc: 0 size: 1] [line: 42]
.   .   .   .   .   Sibling: 1  Op: - of type int [line: 42]
.   .   .   .   .   .   Child: 0  Id: were of static type int [mem: LocalStatic loc: -2 size: 1] [line: 42]
.   .   .   .   .   .   Child: 1  Id: rabbit of static type int [mem: LocalStatic loc: -3 size: 1] [line: 42]
.   .   .   .   Sibling: 3  Compound [mem: None loc: 0 size: -10] [line: 43]
.   .   .   .   .   Child: 0  Var: the of type int [mem: Local loc: -7 size: 1] [line: 44]
.   .   .   .   .   Sibling: 1  Var: wrong of type int [mem: Local loc: -8 size: 1] [line: 44]
.   .   .   .   .   Sibling: 2  Var: trousers of type int [mem: Local loc: -9 size: 1] [line: 44]
.   .   .   .   .   Child: 1  Assign: <= of type int [line: 46]
.   .   .   .   .   .   Child: 0  Id: the of type int [mem: Local loc: -7 size: 1] [line: 46]
.   .   .   .   .   .   Child: 1  Assign: += of type int [line: 46]
.   .   .   .   .   .   .   Child: 0  Id: wrong of type int [mem: Local loc: -8 size: 1] [line: 46]
.   .   .   .   .   .   .   Child: 1  Assign: ++ of type int [line: 46]
.   .   .   .   .   .   .   .   Child: 0  Id: trousers of type int [mem: Local loc: -9 size: 1] [line: 46]
.   .   .   .   .   Sibling: 1  If [line: 47]
.   .   .   .   .   .   Child: 0  Op: = of type bool [line: 47]
.   .   .   .   .   .   .   Child: 0  Id: were of static type int [mem: LocalStatic loc: -2 size: 1] [line: 47]
.   .   .   .   .   .   .   Child: 1  Id: rabbit of static type int [mem: LocalStatic loc: -3 size: 1] [line: 47]
.   .   .   .   .   .   Child: 1  Assign: <= of type int [line: 47]
.   .   .   .   .   .   .   Child: 0  Id: were of static type int [mem: LocalStatic loc: -2 size: 1] [line: 47]
.   .   .   .   .   .   .   Child: 1  Assign: -- of type int [line: 47]
.   .   .   .   .   .   .   .   Child: 0  Id: wrong of type int [mem: Local loc: -8 size: 1] [line: 47]
.   .   Sibling: 18  Return [line: 50]
Sibling: 3  Func: penguin returns type bool [mem: Global loc: 0 size: -7] [line: 54]
.   Child: 0  Parm: Feathers of type char [mem: Parameter loc: -2 size: 1] [line: 54]
.   Sibling: 1  Parm: McGraw of array of type char [mem: Parameter loc: -3 size: 1] [line: 54]
.   Sibling: 2  Parm: moon of type bool [mem: Parameter loc: -4 size: 1] [line: 54]
.   Sibling: 3  Parm: cheese of type bool [mem: Parameter loc: -5 size: 1] [line: 54]
.   Sibling: 4  Parm: launch of type int [mem: Parameter loc: -6 size: 1] [line: 54]
.   Child: 1  Compound [mem: None loc: 0 size: -27] [line: 55]
.   .   Child: 0  Var: tottington of static type char [mem: LocalStatic loc: -15 size: 1] [line: 56]
.   .   .   Child: 0  Const 'x' of type char [line: 56]
.   .   Sibling: 1  Var: Wensleydale of array of type char [mem: Local loc: -8 size: 18] [line: 57]
.   .   Sibling: 2  Var: c of type char [mem: Local loc: -25 size: 1] [line: 58]
.   .   Sibling: 3  Var: i of type int [mem: Local loc: -26 size: 1] [line: 59]
.   .   Child: 1  Assign: <= of type char [line: 61]
.   .   .   Child: 0  Id: tottington of static type char [mem: LocalStatic loc: -15 size: 1] [line: 61]
.   .   .   Child: 1  Id: Feathers of type char [mem: Parameter loc: -2 size: 1] [line: 61]
.   .   Sibling: 1  Assign: <= of type bool [line: 62]
.   .   .   Child: 0  Id: moon of type bool [mem: Parameter loc: -4 size: 1] [line: 62]
.   .   .   Child: 1  Op: and of type bool [line: 62]
.   .   .   .   Child: 0  Op: !> of type bool [line: 62]
.   .   .   .   .   Child: 0  Id: McGraw of array of type char [mem: Parameter loc: -3 size: 1] [line: 62]
.   .   .   .   .   Child: 1  Id: Wensleydale of array of type char [mem: Local loc: -8 size: 18] [line: 62]
.   .   .   .   Child: 1  Id: moon of type bool [mem: Parameter loc: -4 size: 1] [line: 62]
.   .   Sibling: 2  Assign: <= of array of type char [line: 63]
.   .   .   Child: 0  Id: Wensleydale of array of type char [mem: Local loc: -8 size: 18] [line: 63]
.   .   .   Child: 1  Id: McGraw of array of type char [mem: Parameter loc: -3 size: 1] [line: 63]
.   .   Sibling: 3  Assign: <= of type char [line: 64]
.   .   .   Child: 0  Op: [ of type char [line: 64]
.   .   .   .   Child: 0  Id: Wensleydale of array of type char [mem: Local loc: -8 size: 18] [line: 64]
.   .   .   .   Child: 1  Op: sizeof of type int [line: 64]
.   .   .   .   .   Child: 0  Id: McGraw of array of type char [mem: Parameter loc: -3 size: 1] [line: 64]
.   .   .   Child: 1  Const 'Q' of type char [line: 64]
.   .   Sibling: 4  Assign: <= of type char [line: 65]
.   .   .   Child: 0  Op: [ of type char [line: 65]
.   .   .   .   Child: 0  Id: McGraw of array of type char [mem: Parameter loc: -3 size: 1] [line: 65]
.   .   .   .   Child: 1  Const 3 of type int [line: 65]
.   .   .   Child: 1  Const 'A' of type char [line: 65]
Sibling: 4  Func: Wendolene returns type int [mem: Global loc: 0 size: -6] [line: 68]
.   Child: 0  Parm: wool of type int [mem: Parameter loc: -2 size: 1] [line: 68]
.   Sibling: 1  Parm: shaun of type bool [mem: Parameter loc: -3 size: 1] [line: 68]
.   Sibling: 2  Parm: yarn of array of type int [mem: Parameter loc: -4 size: 1] [line: 68]
.   Sibling: 3  Parm: preston of array of type bool [mem: Parameter loc: -5 size: 1] [line: 68]
.   Child: 1  Compound [mem: None loc: 0 size: -7] [line: 69]
.   .   Child: 0  Var: skein of type int [mem: Local loc: -6 size: 1] [line: 70]
.   .   Child: 1  Assign: <= of type bool [line: 71]
.   .   .   Child: 0  Op: [ of type bool [line: 71]
.   .   .   .   Child: 0  Id: preston of array of type bool [mem: Parameter loc: -5 size: 1] [line: 71]
.   .   .   .   Child: 1  Const 3 of type int [line: 71]
.   .   .   Child: 1  Op: or of type bool [line: 71]
.   .   .   .   Child: 0  Op: > of type bool [line: 71]
.   .   .   .   .   Child: 0  Op: [ of type int [line: 71]
.   .   .   .   .   .   Child: 0  Id: yarn of array of type int [mem: Parameter loc: -4 size: 1] [line: 71]
.   .   .   .   .   .   Child: 1  Const 1 of type int [line: 71]
.   .   .   .   .   Child: 1  Id: wool of type int [mem: Parameter loc: -2 size: 1] [line: 71]
.   .   .   .   Child: 1  Op: not of type bool [line: 71]
.   .   .   .   .   Child: 0  Id: shaun of type bool [mem: Parameter loc: -3 size: 1] [line: 71]
.   .   Sibling: 1  Return [line: 72]
.   .   .   Child: 0  Op: + of type int [line: 72]
.   .   .   .   Child: 0  Op: + of type int [line: 72]
.   .   .   .   .   Child: 0  Op: + of type int [line: 72]
.   .   .   .   .   .   Child: 0  Op: + of type int [line: 72]
.   .   .   .   .   .   .   Child: 0  Id: wool of type int [mem: Parameter loc: -2 size: 1] [line: 72]
.   .   .   .   .   .   .   Child: 1  Op: [ of type int [line: 72]
.   .   .   .   .   .   .   .   Child: 0  Id: yarn of array of type int [mem: Parameter loc: -4 size: 1] [line: 72]
.   .   .   .   .   .   .   .   Child: 1  Const 0 of type int [line: 72]
.   .   .   .   .   .   Child: 1  Op: sizeof of type int [line: 72]
.   .   .   .   .   .   .   Child: 0  Id: yarn of array of type int [mem: Parameter loc: -4 size: 1] [line: 72]
.   .   .   .   .   Child: 1  Op: [ of type int [line: 72]
.   .   .   .   .   .   Child: 0  Id: yarn of array of type int [mem: Parameter loc: -4 size: 1] [line: 72]
.   .   .   .   .   .   Child: 1  Op: * of type int [line: 72]
.   .   .   .   .   .   .   Child: 0  Const 7 of type int [line: 72]
.   .   .   .   .   .   .   Child: 1  Id: wool of type int [mem: Parameter loc: -2 size: 1] [line: 72]
.   .   .   .   Child: 1  Op: [ of type int [line: 72]
.   .   .   .   .   Child: 0  Id: yarn of array of type int [mem: Parameter loc: -4 size: 1] [line: 72]
.   .   .   .   .   Child: 1  Op: - of type int [line: 72]
.   .   .   .   .   .   Child: 0  Op: [ of type int [line: 72]
.   .   .   .   .   .   .   Child: 0  Id: yarn of array of type int [mem: Parameter loc: -4 size: 1] [line: 72]
.   .   .   .   .   .   .   Child: 1  Op: + of type int [line: 72]
.   .   .   .   .   .   .   .   Child: 0  Const 3 of type int [line: 72]
.   .   .   .   .   .   .   .   Child: 1  Op: * of type int [line: 72]
.   .   .   .   .   .   .   .   .   Child: 0  Id: wool of type int [mem: Parameter loc: -2 size: 1] [line: 72]
.   .   .   .   .   .   .   .   .   Child: 1  Const 2 of type int [line: 72]
.   .   .   .   .   .   Child: 1  Const 4 of type int [line: 72]
Sibling: 5  Func: ramsBottom returns type bool [mem: Global loc: 0 size: -2] [line: 76]
.   Child: 1  Compound [mem: None loc: 0 size: -16] [line: 77]
.   .   Child: 0  Var: chicken of array of type int [mem: Local loc: -3 size: 3] [line: 78]
.   .   Sibling: 1  Var: run of array of type bool [mem: Local loc: -6 size: 4] [line: 79]
.   .   Sibling: 2  Var: wallace of array of type int [mem: Local loc: -10 size: 3] [line: 80]
.   .   Sibling: 3  Var: gromit of array of type int [mem: Local loc: -13 size: 4] [line: 80]
.   .   Child: 1  Op: * of type int [line: 82]
.   .   .   Child: 0  Const 42 of type int [line: 82]
.   .   .   Child: 1  Call: Wendolene of type int [line: 82]
.   .   .   .   Child: 0  Op: + of type int [line: 82]
.   .   .   .   .   Child: 0  Op: + of type int [line: 82]
.   .   .   .   .   .   Child: 0  Const 1 of type int [line: 82]
.   .   .   .   .   .   Child: 1  Const 2 of type int [line: 82]
.   .   .   .   .   Child: 1  Const 3 of type int [line: 82]
.   .   .   .   Sibling: 1  Op: or of type bool [line: 82]
.   .   .   .   .   Child: 0  Op: not of type bool [line: 82]
.   .   .   .   .   .   Child: 0  Const true of type bool [line: 82]
.   .   .   .   .   Child: 1  Op: and of type bool [line: 82]
.   .   .   .   .   .   Child: 0  Const true of type bool [line: 82]
.   .   .   .   .   .   Child: 1  Const false of type bool [line: 82]
.   .   .   .   Sibling: 2  Id: chicken of array of type int [mem: Local loc: -3 size: 3] [line: 82]
.   .   .   .   Sibling: 3  Id: run of array of type bool [mem: Local loc: -6 size: 4] [line: 82]
.   .   Sibling: 1  Op: [ of type bool [line: 83]
.   .   .   Child: 0  Id: run of array of type bool [mem: Local loc: -6 size: 4] [line: 83]
.   .   .   Child: 1  Op: - of type int [line: 83]
.   .   .   .   Child: 0  Op: sizeof of type int [line: 83]
.   .   .   .   .   Child: 0  Id: run of array of type bool [mem: Local loc: -6 size: 4] [line: 83]
.   .   .   .   Child: 1  Const 1 of type int [line: 83]
.   .   Sibling: 2  Return [line: 85]
.   .   .   Child: 0  Op: not of type bool [line: 85]
.   .   .   .   Child: 0  Op: !< of type bool [line: 85]
.   .   .   .   .   Child: 0  Op: [ of type int [line: 85]
.   .   .   .   .   .   Child: 0  Id: wallace of array of type int [mem: Local loc: -10 size: 3] [line: 85]
.   .   .   .   .   .   Child: 1  Const 1 of type int [line: 85]
.   .   .   .   .   Child: 1  Op: * of type int [line: 85]
.   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 85]
.   .   .   .   .   .   .   Child: 0  Op: [ of type int [line: 85]
.   .   .   .   .   .   .   .   Child: 0  Id: gromit of array of type int [mem: Local loc: -13 size: 4] [line: 85]
.   .   .   .   .   .   .   .   Child: 1  Const 2 of type int [line: 85]
.   .   .   .   .   .   Child: 1  Const 3 of type int [line: 85]
Sibling: 6  Func: cheese returns type int [mem: Global loc: 0 size: -4] [line: 88]
.   Child: 0  Parm: x of type int [mem: Parameter loc: -2 size: 1] [line: 88]
.   Sibling: 1  Parm: y of type int [mem: Parameter loc: -3 size: 1] [line: 88]
.   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 88]
.   .   Child: 1  While [line: 88]
.   .   .   Child: 0  Op: > of type bool [line: 88]
.   .   .   .   Child: 0  Id: x of type int [mem: Parameter loc: -2 size: 1] [line: 88]
.   .   .   .   Child: 1  Const 0 of type int [line: 88]
.   .   .   Child: 1  If [line: 88]
.   .   .   .   Child: 0  Op: > of type bool [line: 88]
.   .   .   .   .   Child: 0  Id: y of type int [mem: Parameter loc: -3 size: 1] [line: 88]
.   .   .   .   .   Child: 1  Const 3 of type int [line: 88]
.   .   .   .   Child: 1  Assign: -- of type int [line: 88]
.   .   .   .   .   Child: 0  Id: x of type int [mem: Parameter loc: -2 size: 1] [line: 88]
.   .   .   .   Child: 2  Return [line: 88]
.   .   .   .   .   Child: 0  Op: % of type int [line: 88]
.   .   .   .   .   .   Child: 0  Op: * of type int [line: 88]
.   .   .   .   .   .   .   Child: 0  Id: x of type int [mem: Parameter loc: -2 size: 1] [line: 88]
.   .   .   .   .   .   .   Child: 1  Id: x of type int [mem: Parameter loc: -2 size: 1] [line: 88]
.   .   .   .   .   .   Child: 1  Id: y of type int [mem: Parameter loc: -3 size: 1] [line: 88]
Sibling: 7  Func: Wensleydale returns type int [mem: Global loc: 0 size: -4] [line: 90]
.   Child: 0  Parm: x of type int [mem: Parameter loc: -2 size: 1] [line: 90]
.   Sibling: 1  Parm: y of type int [mem: Parameter loc: -3 size: 1] [line: 90]
.   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 90]
.   .   Child: 1  Return [line: 90]
.   .   .   Child: 0  Call: cheese of type int [line: 90]
.   .   .   .   Child: 0  Id: x of type int [mem: Parameter loc: -2 size: 1] [line: 90]
.   .   .   .   Sibling: 1  Id: gromit of type int [mem: Global loc: 0 size: 1] [line: 90]
Sibling: 8  Func: LadyCampanula returns type int [mem: Global loc: 0 size: -4] [line: 92]
.   Child: 0  Parm: c of type char [mem: Parameter loc: -2 size: 1] [line: 92]
.   Sibling: 1  Parm: s of array of type char [mem: Parameter loc: -3 size: 1] [line: 92]
.   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 92]
.   .   Child: 1  While [line: 92]
.   .   .   Child: 0  Const true of type bool [line: 92]
.   .   .   Child: 1  For [mem: None loc: 0 size: -5] [line: 92]
.   .   .   .   Child: 0  Var: i of type int [mem: Local loc: -4 size: 1] [line: 92]
.   .   .   .   Child: 1  Range [line: 92]
.   .   .   .   .   Child: 0  Op: - of type int [line: 92]
.   .   .   .   .   .   Child: 0  Op: sizeof of type int [line: 92]
.   .   .   .   .   .   .   Child: 0  Id: s of array of type char [mem: Parameter loc: -3 size: 1] [line: 92]
.   .   .   .   .   .   Child: 1  Const 1 of type int [line: 92]
.   .   .   .   .   Child: 1  Const 0 of type int [line: 92]
.   .   .   .   .   Child: 2  Op: chsign of type int [line: 92]
.   .   .   .   .   .   Child: 0  Const 1 of type int [line: 92]
.   .   .   .   Child: 2  If [line: 92]
.   .   .   .   .   Child: 0  Op: = of type bool [line: 92]
.   .   .   .   .   .   Child: 0  Op: [ of type char [line: 92]
.   .   .   .   .   .   .   Child: 0  Id: s of array of type char [mem: Parameter loc: -3 size: 1] [line: 92]
.   .   .   .   .   .   .   Child: 1  Id: i of type int [mem: Local loc: -4 size: 1] [line: 92]
.   .   .   .   .   .   Child: 1  Id: c of type char [mem: Parameter loc: -2 size: 1] [line: 92]
.   .   .   .   .   Child: 1  Return [line: 92]
.   .   .   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -4 size: 1] [line: 92]
Sibling: 9  Func: MrsTweedy returns type char [mem: Global loc: 0 size: -4] [line: 95]
.   Child: 0  Parm: c of type char [mem: Parameter loc: -2 size: 1] [line: 95]
.   Sibling: 1  Parm: s of array of type char [mem: Parameter loc: -3 size: 1] [line: 95]
.   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 96]
.   .   Child: 1  For [mem: None loc: 0 size: -5] [line: 97]
.   .   .   Child: 0  Var: ginger of type int [mem: Local loc: -4 size: 1] [line: 97]
.   .   .   Child: 1  Range [line: 97]
.   .   .   .   Child: 0  Const 0 of type int [line: 97]
.   .   .   .   Child: 1  Const 10 of type int [line: 97]
.   .   .   Child: 2  Assign: <= of type char [line: 97]
.   .   .   .   Child: 0  Op: [ of type char [line: 97]
.   .   .   .   .   Child: 0  Id: s of array of type char [mem: Parameter loc: -3 size: 1] [line: 97]
.   .   .   .   .   Child: 1  Id: ginger of type int [mem: Local loc: -4 size: 1] [line: 97]
.   .   .   .   Child: 1  Id: c of type char [mem: Parameter loc: -2 size: 1] [line: 97]
.   .   Sibling: 1  For [mem: None loc: 0 size: -5] [line: 98]
.   .   .   Child: 0  Var: pastry of type int [mem: Local loc: -4 size: 1] [line: 98]
.   .   .   Child: 1  Range [line: 98]
.   .   .   .   Child: 0  Const 0 of type int [line: 98]
.   .   .   .   Child: 1  Const 2 of type int [line: 98]
.   .   .   .   Child: 2  Const 7 of type int [line: 98]
.   .   .   Child: 2  If [line: 98]
.   .   .   .   Child: 0  Op: = of type bool [line: 98]
.   .   .   .   .   Child: 0  Op: [ of type char [line: 98]
.   .   .   .   .   .   Child: 0  Id: s of array of type char [mem: Parameter loc: -3 size: 1] [line: 98]
.   .   .   .   .   .   Child: 1  Const 0 of type int [line: 98]
.   .   .   .   .   Child: 1  Op: [ of type char [line: 98]
.   .   .   .   .   .   Child: 0  Id: s of array of type char [mem: Parameter loc: -3 size: 1] [line: 98]
.   .   .   .   .   .   Child: 1  Const 1 of type int [line: 98]
.   .   .   .   Child: 1  Break [line: 98]
.   .   Sibling: 2  While [line: 99]
.   .   .   Child: 0  Const true of type bool [line: 99]
.   .   .   Child: 1  Break [line: 99]
.   .   Sibling: 3  Return [line: 101]
.   .   .   Child: 0  Const 'x' of type char [line: 101]
Sibling: 10  Func: TheWereRabbit returns type char [mem: Global loc: 0 size: -3] [line: 104]
.   Child: 0  Parm: x of type int [mem: Parameter loc: -2 size: 1] [line: 104]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 105]
.   .   Child: 1  If [line: 106]
.   .   .   Child: 0  Op: = of type bool [line: 106]
.   .   .   .   Child: 0  Id: x of type int [mem: Parameter loc: -2 size: 1] [line: 106]
.   .   .   .   Child: 1  Const 0 of type int [line: 106]
.   .   .   Child: 1  Return [line: 106]
.   .   .   .   Child: 0  Const '@' of type char [line: 106]
.   .   .   Child: 2  If [line: 107]
.   .   .   .   Child: 0  Op: = of type bool [line: 107]
.   .   .   .   .   Child: 0  Id: x of type int [mem: Parameter loc: -2 size: 1] [line: 107]
.   .   .   .   .   Child: 1  Const 1 of type int [line: 107]
.   .   .   .   Child: 1  Return [line: 107]
.   .   .   .   .   Child: 0  Const 'a' of type char [line: 107]
.   .   .   .   Child: 2  If [line: 108]
.   .   .   .   .   Child: 0  Op: = of type bool [line: 108]
.   .   .   .   .   .   Child: 0  Id: x of type int [mem: Parameter loc: -2 size: 1] [line: 108]
.   .   .   .   .   .   Child: 1  Const 2 of type int [line: 108]
.   .   .   .   .   Child: 1  Return [line: 108]
.   .   .   .   .   .   Child: 0  Const 'b' of type char [line: 108]
.   .   .   .   .   Child: 2  If [line: 109]
.   .   .   .   .   .   Child: 0  Op: = of type bool [line: 109]
.   .   .   .   .   .   .   Child: 0  Id: x of type int [mem: Parameter loc: -2 size: 1] [line: 109]
.   .   .   .   .   .   .   Child: 1  Const 3 of type int [line: 109]
.   .   .   .   .   .   Child: 1  Return [line: 109]
.   .   .   .   .   .   .   Child: 0  Const 'c' of type char [line: 109]
.   .   .   .   .   .   Child: 2  If [line: 110]
.   .   .   .   .   .   .   Child: 0  Op: = of type bool [line: 110]
.   .   .   .   .   .   .   .   Child: 0  Id: x of type int [mem: Parameter loc: -2 size: 1] [line: 110]
.   .   .   .   .   .   .   .   Child: 1  Const 4 of type int [line: 110]
.   .   .   .   .   .   .   Child: 1  Return [line: 110]
.   .   .   .   .   .   .   .   Child: 0  Const 'd' of type char [line: 110]
.   .   .   .   .   .   .   Child: 2  Return [line: 111]
.   .   .   .   .   .   .   .   Child: 0  Const ' ' of type char [line: 111]
Sibling: 11  Func: main returns type int [mem: Global loc: 0 size: -2] [line: 114]
.   Child: 1  Compound [mem: None loc: 0 size: -154] [line: 115]
.   .   Child: 0  Var: wool of type int [mem: Local loc: -2 size: 1] [line: 116]
.   .   Sibling: 1  Var: yarn of array of type int [mem: Local loc: -4 size: 114] [line: 116]
.   .   Sibling: 2  Var: shaun of type bool [mem: Local loc: -117 size: 1] [line: 117]
.   .   Sibling: 3  Var: preston of array of type bool [mem: Local loc: -119 size: 23] [line: 117]
.   .   Sibling: 4  Var: rocky of array of type char [mem: Local loc: -142 size: 13] [line: 118]
.   .   Child: 1  Call: wallace of type void [line: 120]
.   .   .   Child: 0  Call: cheese of type int [line: 120]
.   .   .   .   Child: 0  Const 62 of type int [line: 120]
.   .   .   .   Sibling: 1  Op: chsign of type int [line: 120]
.   .   .   .   .   Child: 0  Const 311 of type int [line: 120]
.   .   .   Sibling: 1  Id: gromit of type int [mem: Global loc: 0 size: 1] [line: 120]
.   .   Sibling: 1  Assign: <= of array of type char [line: 121]
.   .   .   Child: 0  Id: rocky of array of type char [mem: Local loc: -142 size: 13] [line: 121]
.   .   .   Child: 1  Const "molybdenum" of array of type char [mem: Global loc: -17 size: 11] [line: 121]
.   .   Sibling: 2  Call: MrsTweedy of type char [line: 123]
.   .   .   Child: 0  Const 'Z' of type char [line: 123]
.   .   .   Sibling: 1  Id: rocky of array of type char [mem: Local loc: -142 size: 13] [line: 123]
.   .   Sibling: 3  Op: + of type int [line: 125]
.   .   .   Child: 0  Op: [ of type int [line: 125]
.   .   .   .   Child: 0  Id: yarn of array of type int [mem: Local loc: -4 size: 114] [line: 125]
.   .   .   .   Child: 1  Op: ? of type int [line: 125]
.   .   .   .   .   Child: 0  Const 100 of type int [line: 125]
.   .   .   Child: 1  Op: [ of type int [line: 125]
.   .   .   .   Child: 0  Id: yarn of array of type int [mem: Local loc: -4 size: 114] [line: 125]
.   .   .   .   Child: 1  Op: ? of type int [line: 125]
.   .   .   .   .   Child: 0  Op: sizeof of type int [line: 125]
.   .   .   .   .   .   Child: 0  Id: yarn of array of type int [mem: Local loc: -4 size: 114] [line: 125]
.   .   Sibling: 4  Return [line: 127]
.   .   .   Child: 0  Call: Wendolene of type int [line: 127]
.   .   .   .   Child: 0  Op: * of type int [line: 127]
.   .   .   .   .   Child: 0  Op: sizeof of type int [line: 127]
.   .   .   .   .   .   Child: 0  Id: preston of array of type bool [mem: Local loc: -119 size: 23] [line: 127]
.   .   .   .   .   Child: 1  Op: sizeof of type int [line: 127]
.   .   .   .   .   .   Child: 0  Id: yarn of array of type int [mem: Local loc: -4 size: 114] [line: 127]
.   .   .   .   Sibling: 1  Id: shaun of type bool [mem: Local loc: -117 size: 1] [line: 127]
.   .   .   .   Sibling: 2  Id: yarn of array of type int [mem: Local loc: -4 size: 114] [line: 127]
.   .   .   .   Sibling: 3  Id: preston of array of type bool [mem: Local loc: -119 size: 23] [line: 127]
Sibling: 12  Var: aBigLongVariableName6andthx1138 of type bool [mem: Global loc: -27 size: 1] [line: 130]
Sibling: 13  Var: odd of type int [mem: Global loc: -28 size: 1] [line: 131]
Sibling: 14  Var: separation of type int [mem: Global loc: -29 size: 1] [line: 131]
Sibling: 15  Var: of of type int [mem: Global loc: -30 size: 1] [line: 131]
Sibling: 16  Var: stuff of type int [mem: Global loc: -31 size: 1] [line: 132]
Sibling: 17  Var: ant of array of type char [mem: Global loc: -44 size: 11] [line: 134]
.   Child: 0  Const "unwrinkled" of array of type char [mem: Global loc: -33 size: 11] [line: 134]
Sibling: 18  Var: bat of type char [mem: Global loc: -54 size: 1] [line: 135]
.   Child: 0  Const ''' of type char [line: 135]
Sibling: 19  Var: cat of type char [mem: Global loc: -55 size: 1] [line: 136]
.   Child: 0  Const 't' of type char [line: 136]
Sibling: 20  Var: dog of type char [mem: Global loc: -56 size: 1] [line: 137]
.   Child: 0  Const '
' of type char [line: 137]
Sibling: 21  Var: hog of type char [mem: Global loc: -57 size: 1] [line: 138]
.   Child: 0  Const ' ' of type char [line: 138]
Offset for end of global space: -58
Number of warnings: 33
Number of errors: 0

==============
==============
./c- -M exampleScope.c-
WARNING(2): The variable 'g' seems not to be used.
WARNING(5): The variable 'a' seems not to be used.
WARNING(7): The variable 'b' seems not to be used.
WARNING(9): The variable 'c' seems not to be used.
WARNING(13): The variable 'd' seems not to be used.
WARNING(15): The variable 'e' seems not to be used.
WARNING(16): The variable 'f' seems not to be used.
Var: g of type int [mem: Global loc: 0 size: 1] [line: 2]
Sibling: 1  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 4]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 4]
.   .   Child: 0  Var: a of type int [mem: Local loc: -2 size: 1] [line: 5]
.   .   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 6]
.   .   .   Child: 0  Var: b of type int [mem: Local loc: -3 size: 1] [line: 7]
.   .   .   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 8]
.   .   .   .   Child: 0  Var: c of type int [mem: Local loc: -4 size: 1] [line: 9]
.   .   Sibling: 1  Compound [mem: None loc: 0 size: -4] [line: 12]
.   .   .   Child: 0  Var: d of type int [mem: Local loc: -3 size: 1] [line: 13]
.   .   .   Child: 1  Compound [mem: None loc: 0 size: -6] [line: 14]
.   .   .   .   Child: 0  Var: e of type int [mem: Local loc: -4 size: 1] [line: 15]
.   .   .   .   Sibling: 1  Var: f of type int [mem: Local loc: -5 size: 1] [line: 16]
Offset for end of global space: -1
Number of warnings: 7
Number of errors: 0

==============
==============
./c- -M exp2.c-
ERROR(22): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(23): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(25): 'and' requires operands of type bool but lhs is of type int.
ERROR(25): 'and' requires operands of type bool but lhs is of type int.
ERROR(25): 'and' requires operands of type bool but rhs is of type int.
ERROR(25): 'and' requires operands of type bool but rhs is of type int.
ERROR(25): 'or' requires operands of type bool but lhs is of type int.
ERROR(25): 'or' requires operands of type bool but rhs is of type int.
ERROR(25): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(26): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(26): Unary 'not' requires an operand of type bool but was given type int.
WARNING(28): Variable 'z' may be uninitialized when used here.
ERROR(36): Symbol 'x' is not declared.
WARNING(36): Variable 'z' may be uninitialized when used here.
ERROR(37): Symbol 'x' is not declared.
ERROR(39): '<=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(39): '+' requires operands of type int but lhs is of type bool.
ERROR(39): '+' requires operands of type int but rhs is of type bool.
ERROR(40): '*' requires operands of type int but lhs is of type bool.
ERROR(40): '*' requires operands of type int but lhs is of type bool.
ERROR(40): '+' requires operands of type int but lhs is of type bool.
ERROR(40): '+' requires operands of type int but lhs is of type bool.
ERROR(40): '*' requires operands of type int but rhs is of type bool.
ERROR(40): Symbol 'x' is not declared.
ERROR(40): Symbol 'x' is not declared.
Number of warnings: 2
Number of errors: 23

==============
==============
./c- -M exp3.c-
ERROR(33): 'or' requires operands of type bool but rhs is of type int.
ERROR(34): 'or' requires operands of type bool but rhs is of type int.
WARNING(37): Variable 'z' may be uninitialized when used here.
ERROR(40): '<=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(40): '+' requires operands of type int but lhs is of type bool.
ERROR(40): '+' requires operands of type int but rhs is of type bool.
ERROR(45): Symbol 'x' is not declared.
WARNING(45): Variable 'z' may be uninitialized when used here.
ERROR(46): Symbol 'x' is not declared.
ERROR(48): '<=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(48): '+' requires operands of type int but lhs is of type bool.
ERROR(48): '+' requires operands of type int but rhs is of type bool.
ERROR(49): '*' requires operands of type int but lhs is of type bool.
ERROR(49): '*' requires operands of type int but lhs is of type bool.
ERROR(49): '+' requires operands of type int but lhs is of type bool.
ERROR(49): '+' requires operands of type int but lhs is of type bool.
ERROR(49): '*' requires operands of type int but rhs is of type bool.
ERROR(49): Symbol 'x' is not declared.
ERROR(49): Symbol 'x' is not declared.
Number of warnings: 2
Number of errors: 17

==============
==============
./c- -M exp4.c-
ERROR(24): 'and' requires operands of type bool but rhs is of type int.
ERROR(24): 'or' requires operands of type bool but rhs is of type int.
WARNING(30): Variable 'z' may be uninitialized when used here.
ERROR(33): '<=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(33): '+' requires operands of type int but lhs is of type bool.
ERROR(33): '+' requires operands of type int but rhs is of type bool.
ERROR(38): Symbol 'x' is not declared.
WARNING(38): Variable 'z' may be uninitialized when used here.
ERROR(39): Symbol 'x' is not declared.
ERROR(40): Symbol 'x' is not declared.
ERROR(43): Symbol 'x' is not declared.
ERROR(43): Symbol 'x' is not declared.
WARNING(48): Variable 'c' may be uninitialized when used here.
WARNING(49): Variable 'd' may be uninitialized when used here.
WARNING(57): Variable 'a' may be uninitialized when used here.
WARNING(57): Variable 'b' may be uninitialized when used here.
WARNING(57): Variable 'x' may be uninitialized when used here.
WARNING(57): Variable 'y' may be uninitialized when used here.
ERROR(66): Cannot index nonarray 'array'.
ERROR(66): Symbol 'array' is not declared.
ERROR(66): Symbol 'x' is not declared.
ERROR(66): Symbol 'x' is not declared.
Number of warnings: 8
Number of errors: 14

==============
==============
./c- -M exp.c-
Func: ident returns type int [mem: Global loc: 0 size: -3] [line: 2]
.   Child: 0  Parm: x of type int [mem: Parameter loc: -2 size: 1] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 2]
.   .   Child: 1  Return [line: 2]
.   .   .   Child: 0  Id: x of type int [mem: Parameter loc: -2 size: 1] [line: 2]
Sibling: 1  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 4]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 5]
.   .   Child: 0  Var: x of type bool [mem: Local loc: -2 size: 1] [line: 6]
.   .   Child: 1  Call: output of type void [line: 8]
.   .   .   Child: 0  Call: ident of type int [line: 8]
.   .   .   .   Child: 0  Const 111 of type int [line: 8]
.   .   Sibling: 1  Call: output of type void [line: 9]
.   .   .   Child: 0  Op: * of type int [line: 9]
.   .   .   .   Child: 0  Call: ident of type int [line: 9]
.   .   .   .   .   Child: 0  Const 111 of type int [line: 9]
.   .   .   .   Child: 1  Const 222 of type int [line: 9]
.   .   Sibling: 2  Call: output of type void [line: 10]
.   .   .   Child: 0  Op: * of type int [line: 10]
.   .   .   .   Child: 0  Const 222 of type int [line: 10]
.   .   .   .   Child: 1  Call: ident of type int [line: 10]
.   .   .   .   .   Child: 0  Const 111 of type int [line: 10]
.   .   Sibling: 3  Call: outnl of type void [line: 11]
.   .   Sibling: 4  Call: output of type void [line: 12]
.   .   .   Child: 0  Op: + of type int [line: 12]
.   .   .   .   Child: 0  Op: * of type int [line: 12]
.   .   .   .   .   Child: 0  Call: ident of type int [line: 12]
.   .   .   .   .   .   Child: 0  Const 111 of type int [line: 12]
.   .   .   .   .   Child: 1  Const 222 of type int [line: 12]
.   .   .   .   Child: 1  Const 333 of type int [line: 12]
.   .   Sibling: 5  Call: output of type void [line: 13]
.   .   .   Child: 0  Op: * of type int [line: 13]
.   .   .   .   Child: 0  Op: + of type int [line: 13]
.   .   .   .   .   Child: 0  Call: ident of type int [line: 13]
.   .   .   .   .   .   Child: 0  Const 111 of type int [line: 13]
.   .   .   .   .   Child: 1  Const 222 of type int [line: 13]
.   .   .   .   Child: 1  Const 333 of type int [line: 13]
.   .   Sibling: 6  Call: outnl of type void [line: 14]
.   .   Sibling: 7  Call: output of type void [line: 15]
.   .   .   Child: 0  Op: chsign of type int [line: 15]
.   .   .   .   Child: 0  Op: + of type int [line: 15]
.   .   .   .   .   Child: 0  Call: ident of type int [line: 15]
.   .   .   .   .   .   Child: 0  Const 111 of type int [line: 15]
.   .   .   .   .   Child: 1  Const 222 of type int [line: 15]
.   .   Sibling: 8  Call: output of type void [line: 16]
.   .   .   Child: 0  Op: chsign of type int [line: 16]
.   .   .   .   Child: 0  Op: chsign of type int [line: 16]
.   .   .   .   .   Child: 0  Op: + of type int [line: 16]
.   .   .   .   .   .   Child: 0  Call: ident of type int [line: 16]
.   .   .   .   .   .   .   Child: 0  Const 111 of type int [line: 16]
.   .   .   .   .   .   Child: 1  Const 222 of type int [line: 16]
.   .   Sibling: 9  Call: outnl of type void [line: 17]
.   .   Sibling: 10  Call: output of type void [line: 18]
.   .   .   Child: 0  Op: * of type int [line: 18]
.   .   .   .   Child: 0  Op: chsign of type int [line: 18]
.   .   .   .   .   Child: 0  Op: chsign of type int [line: 18]
.   .   .   .   .   .   Child: 0  Op: + of type int [line: 18]
.   .   .   .   .   .   .   Child: 0  Call: ident of type int [line: 18]
.   .   .   .   .   .   .   .   Child: 0  Const 111 of type int [line: 18]
.   .   .   .   .   .   .   Child: 1  Const 222 of type int [line: 18]
.   .   .   .   Child: 1  Const 333 of type int [line: 18]
.   .   Sibling: 11  Call: output of type void [line: 19]
.   .   .   Child: 0  Op: / of type int [line: 19]
.   .   .   .   Child: 0  Op: * of type int [line: 19]
.   .   .   .   .   Child: 0  Op: chsign of type int [line: 19]
.   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 19]
.   .   .   .   .   .   .   Child: 0  Op: + of type int [line: 19]
.   .   .   .   .   .   .   .   Child: 0  Call: ident of type int [line: 19]
.   .   .   .   .   .   .   .   .   Child: 0  Const 111 of type int [line: 19]
.   .   .   .   .   .   .   .   Child: 1  Const 222 of type int [line: 19]
.   .   .   .   .   Child: 1  Const 333 of type int [line: 19]
.   .   .   .   Child: 1  Const 444 of type int [line: 19]
.   .   Sibling: 12  Call: output of type void [line: 20]
.   .   .   Child: 0  Op: % of type int [line: 20]
.   .   .   .   Child: 0  Op: / of type int [line: 20]
.   .   .   .   .   Child: 0  Op: * of type int [line: 20]
.   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 20]
.   .   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 20]
.   .   .   .   .   .   .   .   Child: 0  Op: + of type int [line: 20]
.   .   .   .   .   .   .   .   .   Child: 0  Call: ident of type int [line: 20]
.   .   .   .   .   .   .   .   .   .   Child: 0  Const 111 of type int [line: 20]
.   .   .   .   .   .   .   .   .   Child: 1  Const 222 of type int [line: 20]
.   .   .   .   .   .   Child: 1  Const 333 of type int [line: 20]
.   .   .   .   .   Child: 1  Const 444 of type int [line: 20]
.   .   .   .   Child: 1  Const 42 of type int [line: 20]
.   .   Sibling: 13  Call: outnl of type void [line: 21]
.   .   Sibling: 14  Call: outputb of type void [line: 22]
.   .   .   Child: 0  Op: !> of type bool [line: 22]
.   .   .   .   Child: 0  Op: + of type int [line: 22]
.   .   .   .   .   Child: 0  Op: % of type int [line: 22]
.   .   .   .   .   .   Child: 0  Op: / of type int [line: 22]
.   .   .   .   .   .   .   Child: 0  Op: * of type int [line: 22]
.   .   .   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 22]
.   .   .   .   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 22]
.   .   .   .   .   .   .   .   .   .   Child: 0  Op: + of type int [line: 22]
.   .   .   .   .   .   .   .   .   .   .   Child: 0  Call: ident of type int [line: 22]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Const 111 of type int [line: 22]
.   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 222 of type int [line: 22]
.   .   .   .   .   .   .   .   Child: 1  Const 333 of type int [line: 22]
.   .   .   .   .   .   .   Child: 1  Const 444 of type int [line: 22]
.   .   .   .   .   .   Child: 1  Const 42 of type int [line: 22]
.   .   .   .   .   Child: 1  Const 555 of type int [line: 22]
.   .   .   .   Child: 1  Const 666 of type int [line: 22]
.   .   Sibling: 15  Call: outputb of type void [line: 23]
.   .   .   Child: 0  Op: !< of type bool [line: 23]
.   .   .   .   Child: 0  Op: + of type int [line: 23]
.   .   .   .   .   Child: 0  Op: % of type int [line: 23]
.   .   .   .   .   .   Child: 0  Op: / of type int [line: 23]
.   .   .   .   .   .   .   Child: 0  Op: * of type int [line: 23]
.   .   .   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 23]
.   .   .   .   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 23]
.   .   .   .   .   .   .   .   .   .   Child: 0  Op: + of type int [line: 23]
.   .   .   .   .   .   .   .   .   .   .   Child: 0  Call: ident of type int [line: 23]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Const 111 of type int [line: 23]
.   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 222 of type int [line: 23]
.   .   .   .   .   .   .   .   Child: 1  Const 333 of type int [line: 23]
.   .   .   .   .   .   .   Child: 1  Const 444 of type int [line: 23]
.   .   .   .   .   .   Child: 1  Const 42 of type int [line: 23]
.   .   .   .   .   Child: 1  Const 555 of type int [line: 23]
.   .   .   .   Child: 1  Const 666 of type int [line: 23]
.   .   Sibling: 16  Call: outnl of type void [line: 24]
.   .   Sibling: 17  Call: outputb of type void [line: 25]
.   .   .   Child: 0  Op: not of type bool [line: 25]
.   .   .   .   Child: 0  Op: !> of type bool [line: 25]
.   .   .   .   .   Child: 0  Op: + of type int [line: 25]
.   .   .   .   .   .   Child: 0  Op: % of type int [line: 25]
.   .   .   .   .   .   .   Child: 0  Op: / of type int [line: 25]
.   .   .   .   .   .   .   .   Child: 0  Op: * of type int [line: 25]
.   .   .   .   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 25]
.   .   .   .   .   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 25]
.   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: + of type int [line: 25]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Call: ident of type int [line: 25]
.   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Const 111 of type int [line: 25]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 222 of type int [line: 25]
.   .   .   .   .   .   .   .   .   Child: 1  Const 333 of type int [line: 25]
.   .   .   .   .   .   .   .   Child: 1  Const 444 of type int [line: 25]
.   .   .   .   .   .   .   Child: 1  Const 42 of type int [line: 25]
.   .   .   .   .   .   Child: 1  Const 555 of type int [line: 25]
.   .   .   .   .   Child: 1  Const 666 of type int [line: 25]
.   .   Sibling: 18  Call: outputb of type void [line: 26]
.   .   .   Child: 0  Op: not of type bool [line: 26]
.   .   .   .   Child: 0  Op: not of type bool [line: 26]
.   .   .   .   .   Child: 0  Op: !> of type bool [line: 26]
.   .   .   .   .   .   Child: 0  Op: + of type int [line: 26]
.   .   .   .   .   .   .   Child: 0  Op: % of type int [line: 26]
.   .   .   .   .   .   .   .   Child: 0  Op: / of type int [line: 26]
.   .   .   .   .   .   .   .   .   Child: 0  Op: * of type int [line: 26]
.   .   .   .   .   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 26]
.   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 26]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: + of type int [line: 26]
.   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Call: ident of type int [line: 26]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Const 111 of type int [line: 26]
.   .   .   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 222 of type int [line: 26]
.   .   .   .   .   .   .   .   .   .   Child: 1  Const 333 of type int [line: 26]
.   .   .   .   .   .   .   .   .   Child: 1  Const 444 of type int [line: 26]
.   .   .   .   .   .   .   .   Child: 1  Const 42 of type int [line: 26]
.   .   .   .   .   .   .   Child: 1  Const 555 of type int [line: 26]
.   .   .   .   .   .   Child: 1  Const 666 of type int [line: 26]
.   .   Sibling: 19  Call: outnl of type void [line: 27]
.   .   Sibling: 20  Call: outputb of type void [line: 28]
.   .   .   Child: 0  Op: and of type bool [line: 28]
.   .   .   .   Child: 0  Op: not of type bool [line: 28]
.   .   .   .   .   Child: 0  Op: not of type bool [line: 28]
.   .   .   .   .   .   Child: 0  Op: !> of type bool [line: 28]
.   .   .   .   .   .   .   Child: 0  Op: + of type int [line: 28]
.   .   .   .   .   .   .   .   Child: 0  Op: % of type int [line: 28]
.   .   .   .   .   .   .   .   .   Child: 0  Op: / of type int [line: 28]
.   .   .   .   .   .   .   .   .   .   Child: 0  Op: * of type int [line: 28]
.   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 28]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 28]
.   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: + of type int [line: 28]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Call: ident of type int [line: 28]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Const 111 of type int [line: 28]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 222 of type int [line: 28]
.   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 333 of type int [line: 28]
.   .   .   .   .   .   .   .   .   .   Child: 1  Const 444 of type int [line: 28]
.   .   .   .   .   .   .   .   .   Child: 1  Const 42 of type int [line: 28]
.   .   .   .   .   .   .   .   Child: 1  Const 555 of type int [line: 28]
.   .   .   .   .   .   .   Child: 1  Const 666 of type int [line: 28]
.   .   .   .   Child: 1  Op: < of type bool [line: 28]
.   .   .   .   .   Child: 0  Const 777 of type int [line: 28]
.   .   .   .   .   Child: 1  Const 888 of type int [line: 28]
.   .   Sibling: 21  Call: outputb of type void [line: 29]
.   .   .   Child: 0  Op: or of type bool [line: 29]
.   .   .   .   Child: 0  Op: and of type bool [line: 29]
.   .   .   .   .   Child: 0  Op: not of type bool [line: 29]
.   .   .   .   .   .   Child: 0  Op: not of type bool [line: 29]
.   .   .   .   .   .   .   Child: 0  Op: !> of type bool [line: 29]
.   .   .   .   .   .   .   .   Child: 0  Op: + of type int [line: 29]
.   .   .   .   .   .   .   .   .   Child: 0  Op: % of type int [line: 29]
.   .   .   .   .   .   .   .   .   .   Child: 0  Op: / of type int [line: 29]
.   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: * of type int [line: 29]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 29]
.   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 29]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: + of type int [line: 29]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Call: ident of type int [line: 29]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Const 111 of type int [line: 29]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 222 of type int [line: 29]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 333 of type int [line: 29]
.   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 444 of type int [line: 29]
.   .   .   .   .   .   .   .   .   .   Child: 1  Const 42 of type int [line: 29]
.   .   .   .   .   .   .   .   .   Child: 1  Const 555 of type int [line: 29]
.   .   .   .   .   .   .   .   Child: 1  Const 666 of type int [line: 29]
.   .   .   .   .   Child: 1  Op: < of type bool [line: 29]
.   .   .   .   .   .   Child: 0  Const 777 of type int [line: 29]
.   .   .   .   .   .   Child: 1  Const 888 of type int [line: 29]
.   .   .   .   Child: 1  Op: != of type bool [line: 29]
.   .   .   .   .   Child: 0  Const 999 of type int [line: 29]
.   .   .   .   .   Child: 1  Const 1000 of type int [line: 29]
.   .   Sibling: 22  Call: outnl of type void [line: 30]
.   .   Sibling: 23  Call: outputb of type void [line: 31]
.   .   .   Child: 0  Assign: <= of type bool [line: 31]
.   .   .   .   Child: 0  Id: x of type bool [mem: Local loc: -2 size: 1] [line: 31]
.   .   .   .   Child: 1  Op: or of type bool [line: 31]
.   .   .   .   .   Child: 0  Op: and of type bool [line: 31]
.   .   .   .   .   .   Child: 0  Op: not of type bool [line: 31]
.   .   .   .   .   .   .   Child: 0  Op: not of type bool [line: 31]
.   .   .   .   .   .   .   .   Child: 0  Op: !> of type bool [line: 31]
.   .   .   .   .   .   .   .   .   Child: 0  Op: + of type int [line: 31]
.   .   .   .   .   .   .   .   .   .   Child: 0  Op: % of type int [line: 31]
.   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: / of type int [line: 31]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: * of type int [line: 31]
.   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 31]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 31]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: + of type int [line: 31]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Call: ident of type int [line: 31]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Const 111 of type int [line: 31]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 222 of type int [line: 31]
.   .   .   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 333 of type int [line: 31]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 444 of type int [line: 31]
.   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 42 of type int [line: 31]
.   .   .   .   .   .   .   .   .   .   Child: 1  Const 555 of type int [line: 31]
.   .   .   .   .   .   .   .   .   Child: 1  Const 666 of type int [line: 31]
.   .   .   .   .   .   Child: 1  Op: < of type bool [line: 31]
.   .   .   .   .   .   .   Child: 0  Const 777 of type int [line: 31]
.   .   .   .   .   .   .   Child: 1  Const 888 of type int [line: 31]
.   .   .   .   .   Child: 1  Op: != of type bool [line: 31]
.   .   .   .   .   .   Child: 0  Const 999 of type int [line: 31]
.   .   .   .   .   .   Child: 1  Const 1000 of type int [line: 31]
.   .   Sibling: 24  Call: outnl of type void [line: 32]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M expL.c-
WARNING(6): Variable 'x' may be uninitialized when used here.
Func: main returns type void [mem: Global loc: 0 size: -2] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 3]
.   .   Child: 0  Var: x of type int [mem: Local loc: -2 size: 1] [line: 4]
.   .   Child: 1  Op: > of type bool [line: 6]
.   .   .   Child: 0  Op: + of type int [line: 6]
.   .   .   .   Child: 0  Op: * of type int [line: 6]
.   .   .   .   .   Child: 0  Const 555 of type int [line: 6]
.   .   .   .   .   Child: 1  Const 666 of type int [line: 6]
.   .   .   .   Child: 1  Id: x of type int [mem: Local loc: -2 size: 1] [line: 6]
.   .   .   Child: 1  Const 777 of type int [line: 6]
Offset for end of global space: 0
Number of warnings: 1
Number of errors: 0

==============
==============
./c- -M expR.c-
WARNING(6): Variable 'x' may be uninitialized when used here.
Func: main returns type void [mem: Global loc: 0 size: -2] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 3]
.   .   Child: 0  Var: x of type int [mem: Local loc: -2 size: 1] [line: 4]
.   .   Child: 1  Op: > of type bool [line: 6]
.   .   .   Child: 0  Const 555 of type int [line: 6]
.   .   .   Child: 1  Op: + of type int [line: 6]
.   .   .   .   Child: 0  Const 666 of type int [line: 6]
.   .   .   .   Child: 1  Op: * of type int [line: 6]
.   .   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 6]
.   .   .   .   .   Child: 1  Const 777 of type int [line: 6]
Offset for end of global space: 0
Number of warnings: 1
Number of errors: 0

==============
==============
./c- -M fact.c-
Func: fact returns type int [mem: Global loc: 0 size: -3] [line: 3]
.   Child: 0  Parm: n of type int [mem: Parameter loc: -2 size: 1] [line: 3]
.   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 4]
.   .   Child: 0  Var: i of type int [mem: Local loc: -3 size: 1] [line: 5]
.   .   Sibling: 1  Var: f of type int [mem: Local loc: -4 size: 1] [line: 5]
.   .   Child: 1  Assign: <= of type int [line: 7]
.   .   .   Child: 0  Id: f of type int [mem: Local loc: -4 size: 1] [line: 7]
.   .   .   Child: 1  Assign: <= of type int [line: 7]
.   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -3 size: 1] [line: 7]
.   .   .   .   Child: 1  Const 1 of type int [line: 7]
.   .   Sibling: 1  While [line: 8]
.   .   .   Child: 0  Op: !> of type bool [line: 8]
.   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -3 size: 1] [line: 8]
.   .   .   .   Child: 1  Id: n of type int [mem: Parameter loc: -2 size: 1] [line: 8]
.   .   .   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 8]
.   .   .   .   Child: 1  Call: output of type void [line: 9]
.   .   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -3 size: 1] [line: 9]
.   .   .   .   Sibling: 1  Call: outnl of type void [line: 9]
.   .   .   .   Sibling: 2  Assign: <= of type int [line: 10]
.   .   .   .   .   Child: 0  Id: f of type int [mem: Local loc: -4 size: 1] [line: 10]
.   .   .   .   .   Child: 1  Op: * of type int [line: 10]
.   .   .   .   .   .   Child: 0  Id: f of type int [mem: Local loc: -4 size: 1] [line: 10]
.   .   .   .   .   .   Child: 1  Id: i of type int [mem: Local loc: -3 size: 1] [line: 10]
.   .   .   .   Sibling: 3  Assign: ++ of type int [line: 11]
.   .   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -3 size: 1] [line: 11]
.   .   Sibling: 2  Return [line: 14]
.   .   .   Child: 0  Id: f of type int [mem: Local loc: -4 size: 1] [line: 14]
Sibling: 1  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 17]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 18]
.   .   Child: 0  Var: n of type int [mem: Local loc: -2 size: 1] [line: 19]
.   .   Child: 1  Assign: <= of type int [line: 21]
.   .   .   Child: 0  Id: n of type int [mem: Local loc: -2 size: 1] [line: 21]
.   .   .   Child: 1  Call: fact of type int [line: 21]
.   .   .   .   Child: 0  Const 10 of type int [line: 21]
.   .   Sibling: 1  Call: output of type void [line: 22]
.   .   .   Child: 0  Id: n of type int [mem: Local loc: -2 size: 1] [line: 22]
.   .   Sibling: 2  Call: outnl of type void [line: 23]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M factor.c-
Func: sqrt returns type int [mem: Global loc: 0 size: -3] [line: 2]
.   Child: 0  Parm: x of type int [mem: Parameter loc: -2 size: 1] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 3]
.   .   Child: 0  Var: guess of type int [mem: Local loc: -3 size: 1] [line: 4]
.   .   Sibling: 1  Var: newguess of type int [mem: Local loc: -4 size: 1] [line: 5]
.   .   Child: 1  If [line: 7]
.   .   .   Child: 0  Op: = of type bool [line: 7]
.   .   .   .   Child: 0  Id: x of type int [mem: Parameter loc: -2 size: 1] [line: 7]
.   .   .   .   Child: 1  Const 1 of type int [line: 7]
.   .   .   Child: 1  Return [line: 7]
.   .   .   .   Child: 0  Const 1 of type int [line: 7]
.   .   Sibling: 1  Assign: <= of type int [line: 8]
.   .   .   Child: 0  Id: guess of type int [mem: Local loc: -3 size: 1] [line: 8]
.   .   .   Child: 1  Op: / of type int [line: 8]
.   .   .   .   Child: 0  Id: x of type int [mem: Parameter loc: -2 size: 1] [line: 8]
.   .   .   .   Child: 1  Const 2 of type int [line: 8]
.   .   Sibling: 2  Assign: <= of type int [line: 9]
.   .   .   Child: 0  Id: newguess of type int [mem: Local loc: -4 size: 1] [line: 9]
.   .   .   Child: 1  Op: / of type int [line: 9]
.   .   .   .   Child: 0  Op: + of type int [line: 9]
.   .   .   .   .   Child: 0  Op: / of type int [line: 9]
.   .   .   .   .   .   Child: 0  Id: x of type int [mem: Parameter loc: -2 size: 1] [line: 9]
.   .   .   .   .   .   Child: 1  Id: guess of type int [mem: Local loc: -3 size: 1] [line: 9]
.   .   .   .   .   Child: 1  Id: guess of type int [mem: Local loc: -3 size: 1] [line: 9]
.   .   .   .   Child: 1  Const 2 of type int [line: 9]
.   .   Sibling: 3  While [line: 10]
.   .   .   Child: 0  Op: > of type bool [line: 10]
.   .   .   .   Child: 0  Op: - of type int [line: 10]
.   .   .   .   .   Child: 0  Id: guess of type int [mem: Local loc: -3 size: 1] [line: 10]
.   .   .   .   .   Child: 1  Id: newguess of type int [mem: Local loc: -4 size: 1] [line: 10]
.   .   .   .   Child: 1  Const 1 of type int [line: 10]
.   .   .   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 10]
.   .   .   .   Child: 1  Assign: <= of type int [line: 11]
.   .   .   .   .   Child: 0  Id: guess of type int [mem: Local loc: -3 size: 1] [line: 11]
.   .   .   .   .   Child: 1  Id: newguess of type int [mem: Local loc: -4 size: 1] [line: 11]
.   .   .   .   Sibling: 1  Assign: <= of type int [line: 12]
.   .   .   .   .   Child: 0  Id: newguess of type int [mem: Local loc: -4 size: 1] [line: 12]
.   .   .   .   .   Child: 1  Op: / of type int [line: 12]
.   .   .   .   .   .   Child: 0  Op: + of type int [line: 12]
.   .   .   .   .   .   .   Child: 0  Op: / of type int [line: 12]
.   .   .   .   .   .   .   .   Child: 0  Id: x of type int [mem: Parameter loc: -2 size: 1] [line: 12]
.   .   .   .   .   .   .   .   Child: 1  Id: guess of type int [mem: Local loc: -3 size: 1] [line: 12]
.   .   .   .   .   .   .   Child: 1  Id: guess of type int [mem: Local loc: -3 size: 1] [line: 12]
.   .   .   .   .   .   Child: 1  Const 2 of type int [line: 12]
.   .   Sibling: 4  If [line: 14]
.   .   .   Child: 0  Op: > of type bool [line: 14]
.   .   .   .   Child: 0  Op: * of type int [line: 14]
.   .   .   .   .   Child: 0  Id: newguess of type int [mem: Local loc: -4 size: 1] [line: 14]
.   .   .   .   .   Child: 1  Id: newguess of type int [mem: Local loc: -4 size: 1] [line: 14]
.   .   .   .   Child: 1  Id: x of type int [mem: Parameter loc: -2 size: 1] [line: 14]
.   .   .   Child: 1  Assign: <= of type int [line: 14]
.   .   .   .   Child: 0  Id: newguess of type int [mem: Local loc: -4 size: 1] [line: 14]
.   .   .   .   Child: 1  Op: - of type int [line: 14]
.   .   .   .   .   Child: 0  Id: newguess of type int [mem: Local loc: -4 size: 1] [line: 14]
.   .   .   .   .   Child: 1  Const 1 of type int [line: 14]
.   .   Sibling: 5  Return [line: 16]
.   .   .   Child: 0  Id: newguess of type int [mem: Local loc: -4 size: 1] [line: 16]
Sibling: 1  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 20]
.   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 21]
.   .   Child: 0  Var: n of type int [mem: Local loc: -2 size: 1] [line: 22]
.   .   Sibling: 1  Var: i of type int [mem: Local loc: -3 size: 1] [line: 23]
.   .   Child: 1  While [line: 25]
.   .   .   Child: 0  Op: > of type bool [line: 25]
.   .   .   .   Child: 0  Assign: <= of type int [line: 25]
.   .   .   .   .   Child: 0  Id: n of type int [mem: Local loc: -2 size: 1] [line: 25]
.   .   .   .   .   Child: 1  Call: input of type int [line: 25]
.   .   .   .   Child: 1  Const 1 of type int [line: 25]
.   .   .   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 25]
.   .   .   .   Child: 0  Var: limit of type int [mem: Local loc: -4 size: 1] [line: 26]
.   .   .   .   Child: 1  Assign: <= of type int [line: 27]
.   .   .   .   .   Child: 0  Id: limit of type int [mem: Local loc: -4 size: 1] [line: 27]
.   .   .   .   .   Child: 1  Call: sqrt of type int [line: 27]
.   .   .   .   .   .   Child: 0  Id: n of type int [mem: Local loc: -2 size: 1] [line: 27]
.   .   .   .   Sibling: 1  While [line: 30]
.   .   .   .   .   Child: 0  Op: = of type bool [line: 30]
.   .   .   .   .   .   Child: 0  Op: % of type int [line: 30]
.   .   .   .   .   .   .   Child: 0  Id: n of type int [mem: Local loc: -2 size: 1] [line: 30]
.   .   .   .   .   .   .   Child: 1  Const 2 of type int [line: 30]
.   .   .   .   .   .   Child: 1  Const 0 of type int [line: 30]
.   .   .   .   .   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 30]
.   .   .   .   .   .   Child: 1  Call: output of type void [line: 31]
.   .   .   .   .   .   .   Child: 0  Const 2 of type int [line: 31]
.   .   .   .   .   .   Sibling: 1  Assign: <= of type int [line: 32]
.   .   .   .   .   .   .   Child: 0  Id: n of type int [mem: Local loc: -2 size: 1] [line: 32]
.   .   .   .   .   .   .   Child: 1  Op: / of type int [line: 32]
.   .   .   .   .   .   .   .   Child: 0  Id: n of type int [mem: Local loc: -2 size: 1] [line: 32]
.   .   .   .   .   .   .   .   Child: 1  Const 2 of type int [line: 32]
.   .   .   .   Sibling: 2  Assign: <= of type int [line: 36]
.   .   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -3 size: 1] [line: 36]
.   .   .   .   .   Child: 1  Const 3 of type int [line: 36]
.   .   .   .   Sibling: 3  While [line: 37]
.   .   .   .   .   Child: 0  Op: !> of type bool [line: 37]
.   .   .   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -3 size: 1] [line: 37]
.   .   .   .   .   .   Child: 1  Id: limit of type int [mem: Local loc: -4 size: 1] [line: 37]
.   .   .   .   .   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 37]
.   .   .   .   .   .   Child: 1  While [line: 38]
.   .   .   .   .   .   .   Child: 0  Op: = of type bool [line: 38]
.   .   .   .   .   .   .   .   Child: 0  Op: % of type int [line: 38]
.   .   .   .   .   .   .   .   .   Child: 0  Id: n of type int [mem: Local loc: -2 size: 1] [line: 38]
.   .   .   .   .   .   .   .   .   Child: 1  Id: i of type int [mem: Local loc: -3 size: 1] [line: 38]
.   .   .   .   .   .   .   .   Child: 1  Const 0 of type int [line: 38]
.   .   .   .   .   .   .   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 38]
.   .   .   .   .   .   .   .   Child: 1  Call: output of type void [line: 39]
.   .   .   .   .   .   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -3 size: 1] [line: 39]
.   .   .   .   .   .   .   .   Sibling: 1  Assign: <= of type int [line: 40]
.   .   .   .   .   .   .   .   .   Child: 0  Id: n of type int [mem: Local loc: -2 size: 1] [line: 40]
.   .   .   .   .   .   .   .   .   Child: 1  Op: / of type int [line: 40]
.   .   .   .   .   .   .   .   .   .   Child: 0  Id: n of type int [mem: Local loc: -2 size: 1] [line: 40]
.   .   .   .   .   .   .   .   .   .   Child: 1  Id: i of type int [mem: Local loc: -3 size: 1] [line: 40]
.   .   .   .   .   .   .   .   Sibling: 2  Assign: <= of type int [line: 41]
.   .   .   .   .   .   .   .   .   Child: 0  Id: limit of type int [mem: Local loc: -4 size: 1] [line: 41]
.   .   .   .   .   .   .   .   .   Child: 1  Call: sqrt of type int [line: 41]
.   .   .   .   .   .   .   .   .   .   Child: 0  Id: n of type int [mem: Local loc: -2 size: 1] [line: 41]
.   .   .   .   .   .   Sibling: 1  Assign: <= of type int [line: 43]
.   .   .   .   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -3 size: 1] [line: 43]
.   .   .   .   .   .   .   Child: 1  Op: + of type int [line: 43]
.   .   .   .   .   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -3 size: 1] [line: 43]
.   .   .   .   .   .   .   .   Child: 1  Const 2 of type int [line: 43]
.   .   .   .   Sibling: 4  If [line: 46]
.   .   .   .   .   Child: 0  Op: > of type bool [line: 46]
.   .   .   .   .   .   Child: 0  Id: n of type int [mem: Local loc: -2 size: 1] [line: 46]
.   .   .   .   .   .   Child: 1  Const 1 of type int [line: 46]
.   .   .   .   .   Child: 1  Call: output of type void [line: 46]
.   .   .   .   .   .   Child: 0  Id: n of type int [mem: Local loc: -2 size: 1] [line: 46]
.   .   .   .   Sibling: 5  Call: outnl of type void [line: 47]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M factorial2.c-
Func: factorial returns type int [mem: Global loc: 0 size: -3] [line: 3]
.   Child: 0  Parm: n of type int [mem: Parameter loc: -2 size: 1] [line: 3]
.   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 4]
.   .   Child: 0  Var: i of type int [mem: Local loc: -3 size: 1] [line: 5]
.   .   Sibling: 1  Var: f of type int [mem: Local loc: -4 size: 1] [line: 5]
.   .   Child: 1  Assign: <= of type int [line: 7]
.   .   .   Child: 0  Id: f of type int [mem: Local loc: -4 size: 1] [line: 7]
.   .   .   Child: 1  Assign: <= of type int [line: 7]
.   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -3 size: 1] [line: 7]
.   .   .   .   Child: 1  Const 1 of type int [line: 7]
.   .   Sibling: 1  While [line: 8]
.   .   .   Child: 0  Op: !> of type bool [line: 8]
.   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -3 size: 1] [line: 8]
.   .   .   .   Child: 1  Id: n of type int [mem: Parameter loc: -2 size: 1] [line: 8]
.   .   .   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 8]
.   .   .   .   Child: 1  Call: output of type void [line: 9]
.   .   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -3 size: 1] [line: 9]
.   .   .   .   Sibling: 1  Assign: <= of type int [line: 10]
.   .   .   .   .   Child: 0  Id: f of type int [mem: Local loc: -4 size: 1] [line: 10]
.   .   .   .   .   Child: 1  Op: * of type int [line: 10]
.   .   .   .   .   .   Child: 0  Id: f of type int [mem: Local loc: -4 size: 1] [line: 10]
.   .   .   .   .   .   Child: 1  Id: i of type int [mem: Local loc: -3 size: 1] [line: 10]
.   .   .   .   Sibling: 2  Assign: += of type int [line: 11]
.   .   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -3 size: 1] [line: 11]
.   .   .   .   .   Child: 1  Const 1 of type int [line: 11]
.   .   Sibling: 2  Return [line: 14]
.   .   .   Child: 0  Id: f of type int [mem: Local loc: -4 size: 1] [line: 14]
Sibling: 1  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 17]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 18]
.   .   Child: 0  Var: n of type int [mem: Local loc: -2 size: 1] [line: 19]
.   .   Child: 1  Assign: <= of type int [line: 20]
.   .   .   Child: 0  Id: n of type int [mem: Local loc: -2 size: 1] [line: 20]
.   .   .   Child: 1  Call: input of type int [line: 20]
.   .   Sibling: 1  Assign: <= of type int [line: 21]
.   .   .   Child: 0  Id: n of type int [mem: Local loc: -2 size: 1] [line: 21]
.   .   .   Child: 1  Call: factorial of type int [line: 21]
.   .   .   .   Child: 0  Id: n of type int [mem: Local loc: -2 size: 1] [line: 21]
.   .   Sibling: 2  Call: output of type void [line: 22]
.   .   .   Child: 0  Id: n of type int [mem: Local loc: -2 size: 1] [line: 22]
.   .   Sibling: 3  Call: outnl of type void [line: 23]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M factorial.c-
Func: factorial returns type int [mem: Global loc: 0 size: -3] [line: 3]
.   Child: 0  Parm: n of type int [mem: Parameter loc: -2 size: 1] [line: 3]
.   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 4]
.   .   Child: 0  Var: i of type int [mem: Local loc: -3 size: 1] [line: 5]
.   .   Sibling: 1  Var: f of type int [mem: Local loc: -4 size: 1] [line: 5]
.   .   Child: 1  Assign: <= of type int [line: 6]
.   .   .   Child: 0  Id: f of type int [mem: Local loc: -4 size: 1] [line: 6]
.   .   .   Child: 1  Assign: <= of type int [line: 6]
.   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -3 size: 1] [line: 6]
.   .   .   .   Child: 1  Const 1 of type int [line: 6]
.   .   Sibling: 1  While [line: 7]
.   .   .   Child: 0  Op: !> of type bool [line: 7]
.   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -3 size: 1] [line: 7]
.   .   .   .   Child: 1  Id: n of type int [mem: Parameter loc: -2 size: 1] [line: 7]
.   .   .   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 7]
.   .   .   .   Child: 1  Call: output of type void [line: 8]
.   .   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -3 size: 1] [line: 8]
.   .   .   .   Sibling: 1  Assign: <= of type int [line: 9]
.   .   .   .   .   Child: 0  Id: f of type int [mem: Local loc: -4 size: 1] [line: 9]
.   .   .   .   .   Child: 1  Op: * of type int [line: 9]
.   .   .   .   .   .   Child: 0  Id: f of type int [mem: Local loc: -4 size: 1] [line: 9]
.   .   .   .   .   .   Child: 1  Id: i of type int [mem: Local loc: -3 size: 1] [line: 9]
.   .   .   .   Sibling: 2  Assign: ++ of type int [line: 10]
.   .   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -3 size: 1] [line: 10]
.   .   Sibling: 2  Return [line: 12]
.   .   .   Child: 0  Id: f of type int [mem: Local loc: -4 size: 1] [line: 12]
Sibling: 1  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 15]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 16]
.   .   Child: 0  Var: n of type int [mem: Local loc: -2 size: 1] [line: 17]
.   .   Child: 1  Assign: <= of type int [line: 18]
.   .   .   Child: 0  Id: n of type int [mem: Local loc: -2 size: 1] [line: 18]
.   .   .   Child: 1  Call: input of type int [line: 18]
.   .   Sibling: 1  Assign: <= of type int [line: 19]
.   .   .   Child: 0  Id: n of type int [mem: Local loc: -2 size: 1] [line: 19]
.   .   .   Child: 1  Call: factorial of type int [line: 19]
.   .   .   .   Child: 0  Id: n of type int [mem: Local loc: -2 size: 1] [line: 19]
.   .   Sibling: 2  Call: output of type void [line: 20]
.   .   .   Child: 0  Id: n of type int [mem: Local loc: -2 size: 1] [line: 20]
.   .   Sibling: 3  Call: outnl of type void [line: 21]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M factorialr.c-
Func: factorial returns type int [mem: Global loc: 0 size: -3] [line: 3]
.   Child: 0  Parm: n of type int [mem: Parameter loc: -2 size: 1] [line: 3]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 4]
.   .   Child: 1  If [line: 5]
.   .   .   Child: 0  Op: < of type bool [line: 5]
.   .   .   .   Child: 0  Id: n of type int [mem: Parameter loc: -2 size: 1] [line: 5]
.   .   .   .   Child: 1  Const 2 of type int [line: 5]
.   .   .   Child: 1  Return [line: 5]
.   .   .   .   Child: 0  Const 1 of type int [line: 5]
.   .   .   Child: 2  Return [line: 6]
.   .   .   .   Child: 0  Op: * of type int [line: 6]
.   .   .   .   .   Child: 0  Id: n of type int [mem: Parameter loc: -2 size: 1] [line: 6]
.   .   .   .   .   Child: 1  Call: factorial of type int [line: 6]
.   .   .   .   .   .   Child: 0  Op: - of type int [line: 6]
.   .   .   .   .   .   .   Child: 0  Id: n of type int [mem: Parameter loc: -2 size: 1] [line: 6]
.   .   .   .   .   .   .   Child: 1  Const 1 of type int [line: 6]
Sibling: 1  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 9]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 10]
.   .   Child: 0  Var: n of type int [mem: Local loc: -2 size: 1] [line: 11]
.   .   Child: 1  Assign: <= of type int [line: 12]
.   .   .   Child: 0  Id: n of type int [mem: Local loc: -2 size: 1] [line: 12]
.   .   .   Child: 1  Call: input of type int [line: 12]
.   .   Sibling: 1  Assign: <= of type int [line: 13]
.   .   .   Child: 0  Id: n of type int [mem: Local loc: -2 size: 1] [line: 13]
.   .   .   Child: 1  Call: factorial of type int [line: 13]
.   .   .   .   Child: 0  Id: n of type int [mem: Local loc: -2 size: 1] [line: 13]
.   .   Sibling: 2  Call: output of type void [line: 14]
.   .   .   Child: 0  Id: n of type int [mem: Local loc: -2 size: 1] [line: 14]
.   .   Sibling: 3  Call: outnl of type void [line: 15]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M fail.c-
ERROR(3): Symbol 'g' is already declared at line 2.
ERROR(8): Symbol 'x' is already declared at line 7.
Number of warnings: 0
Number of errors: 2

==============
==============
./c- -M for2.c-
ERROR(5): Cannot use array in position 1 in range of for statement.
ERROR(5): Symbol 'j' is not declared.
WARNING(5): Variable 'a' may be uninitialized when used here.
ERROR(6): Cannot use array in position 1 in range of for statement.
ERROR(8): Symbol 'j' is already declared at line 6.
WARNING(9): Variable 'i' may be uninitialized when used here.
Number of warnings: 2
Number of errors: 4

==============
==============
./c- -M fora.c-
Func: main returns type void [mem: Global loc: 0 size: -2] [line: 1]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 2]
.   .   Child: 1  For [mem: None loc: 0 size: -3] [line: 3]
.   .   .   Child: 0  Var: i of type int [mem: Local loc: -2 size: 1] [line: 3]
.   .   .   Child: 1  Range [line: 3]
.   .   .   .   Child: 0  Const 1 of type int [line: 3]
.   .   .   .   Child: 1  Const 11 of type int [line: 3]
.   .   .   Child: 2  Assign: <= of type int [line: 3]
.   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -2 size: 1] [line: 3]
.   .   .   .   Child: 1  Const 3 of type int [line: 3]
.   .   Sibling: 1  For [mem: None loc: 0 size: -3] [line: 5]
.   .   .   Child: 0  Var: j of type int [mem: Local loc: -2 size: 1] [line: 5]
.   .   .   Child: 1  Range [line: 5]
.   .   .   .   Child: 0  Const 2 of type int [line: 5]
.   .   .   .   Child: 1  Const 22 of type int [line: 5]
.   .   .   .   Child: 2  Const 3 of type int [line: 5]
.   .   .   Child: 2  Assign: <= of type int [line: 5]
.   .   .   .   Child: 0  Id: j of type int [mem: Local loc: -2 size: 1] [line: 5]
.   .   .   .   Child: 1  Const 7 of type int [line: 5]
.   .   Sibling: 2  For [mem: None loc: 0 size: -3] [line: 7]
.   .   .   Child: 0  Var: i of type int [mem: Local loc: -2 size: 1] [line: 7]
.   .   .   Child: 1  Range [line: 7]
.   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -2 size: 1] [line: 7]
.   .   .   .   Child: 1  Id: i of type int [mem: Local loc: -2 size: 1] [line: 7]
.   .   .   .   Child: 2  Id: i of type int [mem: Local loc: -2 size: 1] [line: 7]
.   .   .   Child: 2  Const 666 of type int [line: 7]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M forb.c-
WARNING(7): Variable 'y' may be uninitialized when used here.
ERROR(8): Cannot use array in position 1 in range of for statement.
WARNING(8): Variable 'z' may be uninitialized when used here.
Number of warnings: 2
Number of errors: 1

==============
==============
./c- -M for.c-
WARNING(5): The variable 'ba' seems not to be used.
ERROR(12): Cannot index nonarray 'bb'.
ERROR(12): Symbol 'bb' is not declared.
ERROR(13): Cannot index nonarray 'bb'.
ERROR(13): Symbol 'bb' is not declared.
ERROR(14): Cannot index nonarray 'bb'.
ERROR(14): Symbol 'bb' is not declared.
ERROR(16): Cannot index nonarray 'cc'.
ERROR(16): Symbol 'cc' is not declared.
ERROR(17): Cannot index nonarray 'cc'.
ERROR(17): Symbol 'cc' is not declared.
ERROR(20): Cannot index nonarray 'a'.
ERROR(20): Symbol 'a' is not declared.
ERROR(23): Cannot index nonarray 'b'.
ERROR(23): Symbol 'b' is not declared.
ERROR(26): Cannot index nonarray 'c'.
ERROR(26): Symbol 'c' is not declared.
Number of warnings: 1
Number of errors: 16

==============
==============
./c- -M forerr.c-
ERROR(7): Cannot use array in position 2 in range of for statement.
WARNING(7): Variable 'aa' may be uninitialized when used here.
WARNING(7): Variable 'a' may be uninitialized when used here.
ERROR(8): Cannot use array in position 2 in range of for statement.
ERROR(8): Expecting type int in position 1 in range of for statement but got type bool.
ERROR(8): Expecting type int in position 2 in range of for statement but got type bool.
WARNING(8): Variable 'bb' may be uninitialized when used here.
WARNING(8): Variable 'b' may be uninitialized when used here.
ERROR(9): Cannot use array in position 1 in range of for statement.
ERROR(9): Cannot use array in position 2 in range of for statement.
ERROR(9): Cannot use array in position 3 in range of for statement.
ERROR(9): Expecting type int in position 1 in range of for statement but got type bool.
ERROR(9): Expecting type int in position 2 in range of for statement but got type bool.
ERROR(9): Expecting type int in position 3 in range of for statement but got type bool.
ERROR(10): Cannot use array in position 1 in range of for statement.
ERROR(10): Expecting type int in position 1 in range of for statement but got type char.
ERROR(10): Expecting type int in position 2 in range of for statement but got type char.
WARNING(10): Variable 'cc' may be uninitialized when used here.
WARNING(10): Variable 'c' may be uninitialized when used here.
ERROR(11): 'or' requires operands of type bool but lhs is of type int.
ERROR(11): 'or' requires operands of type bool but rhs is of type int.
Number of warnings: 6
Number of errors: 15

==============
==============
./c- -M forscope.c-
ERROR(5): Cannot use array in position 1 in range of for statement.
ERROR(6): Symbol 'x' is already declared at line 5.
ERROR(10): Cannot use array in position 1 in range of for statement.
WARNING(10): The variable 'x' seems not to be used.
ERROR(15): Cannot use array in position 1 in range of for statement.
WARNING(15): The variable 'x' seems not to be used.
ERROR(16): Symbol 'x' is already declared at line 15.
ERROR(22): Cannot use array in position 1 in range of for statement.
ERROR(28): Cannot use array in position 1 in range of for statement.
ERROR(29): Symbol 'x' is already declared at line 28.
ERROR(35): Cannot use array in position 1 in range of for statement.
ERROR(44): Cannot use array in position 1 in range of for statement.
Number of warnings: 2
Number of errors: 10

==============
==============
./c- -M funcscope.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
ERROR(5): Symbol 'x' is already declared at line 5.
WARNING(5): The function 'ant' seems not to be used.
ERROR(6): Symbol 'x' is already declared at line 5.
WARNING(10): The function 'bat' seems not to be used.
WARNING(10): The parameter 'x' seems not to be used.
WARNING(15): The function 'cat' seems not to be used.
WARNING(15): The parameter 'x' seems not to be used.
ERROR(16): Symbol 'x' is already declared at line 15.
WARNING(22): The function 'dog' seems not to be used.
WARNING(28): The function 'elk' seems not to be used.
ERROR(29): Symbol 'x' is already declared at line 28.
WARNING(35): The function 'fox' seems not to be used.
WARNING(45): The function 'gnu' seems not to be used.
Number of warnings: 9
Number of errors: 5

==============
==============
./c- -M gcd2.c-
Func: gcd returns type int [mem: Global loc: 0 size: -4] [line: 4]
.   Child: 0  Parm: u of type int [mem: Parameter loc: -2 size: 1] [line: 4]
.   Sibling: 1  Parm: v of type int [mem: Parameter loc: -3 size: 1] [line: 4]
.   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 5]
.   .   Child: 1  If [line: 6]
.   .   .   Child: 0  Op: = of type bool [line: 6]
.   .   .   .   Child: 0  Id: v of type int [mem: Parameter loc: -3 size: 1] [line: 6]
.   .   .   .   Child: 1  Const 0 of type int [line: 6]
.   .   .   Child: 1  Return [line: 7]
.   .   .   .   Child: 0  Id: u of type int [mem: Parameter loc: -2 size: 1] [line: 7]
.   .   .   Child: 2  Return [line: 9]
.   .   .   .   Child: 0  Call: gcd of type int [line: 9]
.   .   .   .   .   Child: 0  Id: v of type int [mem: Parameter loc: -3 size: 1] [line: 9]
.   .   .   .   .   Sibling: 1  Op: - of type int [line: 9]
.   .   .   .   .   .   Child: 0  Id: u of type int [mem: Parameter loc: -2 size: 1] [line: 9]
.   .   .   .   .   .   Child: 1  Op: * of type int [line: 9]
.   .   .   .   .   .   .   Child: 0  Op: / of type int [line: 9]
.   .   .   .   .   .   .   .   Child: 0  Id: u of type int [mem: Parameter loc: -2 size: 1] [line: 9]
.   .   .   .   .   .   .   .   Child: 1  Id: v of type int [mem: Parameter loc: -3 size: 1] [line: 9]
.   .   .   .   .   .   .   Child: 1  Id: v of type int [mem: Parameter loc: -3 size: 1] [line: 9]
Sibling: 1  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 12]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 13]
.   .   Child: 1  Call: output of type void [line: 14]
.   .   .   Child: 0  Call: gcd of type int [line: 14]
.   .   .   .   Child: 0  Call: input of type int [line: 14]
.   .   .   .   Sibling: 1  Call: input of type int [line: 14]
.   .   Sibling: 1  Call: outnl of type void [line: 15]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M gcd.c-
Func: gcd returns type int [mem: Global loc: 0 size: -4] [line: 4]
.   Child: 0  Parm: u of type int [mem: Parameter loc: -2 size: 1] [line: 4]
.   Sibling: 1  Parm: v of type int [mem: Parameter loc: -3 size: 1] [line: 4]
.   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 5]
.   .   Child: 1  If [line: 6]
.   .   .   Child: 0  Op: = of type bool [line: 6]
.   .   .   .   Child: 0  Id: v of type int [mem: Parameter loc: -3 size: 1] [line: 6]
.   .   .   .   Child: 1  Const 0 of type int [line: 6]
.   .   .   Child: 1  Return [line: 7]
.   .   .   .   Child: 0  Id: u of type int [mem: Parameter loc: -2 size: 1] [line: 7]
.   .   .   Child: 2  Return [line: 9]
.   .   .   .   Child: 0  Call: gcd of type int [line: 9]
.   .   .   .   .   Child: 0  Id: v of type int [mem: Parameter loc: -3 size: 1] [line: 9]
.   .   .   .   .   Sibling: 1  Op: - of type int [line: 9]
.   .   .   .   .   .   Child: 0  Id: u of type int [mem: Parameter loc: -2 size: 1] [line: 9]
.   .   .   .   .   .   Child: 1  Op: * of type int [line: 9]
.   .   .   .   .   .   .   Child: 0  Op: / of type int [line: 9]
.   .   .   .   .   .   .   .   Child: 0  Id: u of type int [mem: Parameter loc: -2 size: 1] [line: 9]
.   .   .   .   .   .   .   .   Child: 1  Id: v of type int [mem: Parameter loc: -3 size: 1] [line: 9]
.   .   .   .   .   .   .   Child: 1  Id: v of type int [mem: Parameter loc: -3 size: 1] [line: 9]
Sibling: 1  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 12]
.   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 13]
.   .   Child: 0  Var: x of type int [mem: Local loc: -2 size: 1] [line: 14]
.   .   Sibling: 1  Var: y of type int [mem: Local loc: -3 size: 1] [line: 14]
.   .   Sibling: 2  Var: z of type int [mem: Local loc: -4 size: 1] [line: 14]
.   .   Child: 1  Assign: <= of type int [line: 16]
.   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 16]
.   .   .   Child: 1  Call: input of type int [line: 16]
.   .   Sibling: 1  Assign: <= of type int [line: 17]
.   .   .   Child: 0  Id: y of type int [mem: Local loc: -3 size: 1] [line: 17]
.   .   .   Child: 1  Call: input of type int [line: 17]
.   .   Sibling: 2  Assign: <= of type int [line: 18]
.   .   .   Child: 0  Id: z of type int [mem: Local loc: -4 size: 1] [line: 18]
.   .   .   Child: 1  Call: gcd of type int [line: 18]
.   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 18]
.   .   .   .   Sibling: 1  Id: y of type int [mem: Local loc: -3 size: 1] [line: 18]
.   .   Sibling: 3  Call: output of type void [line: 19]
.   .   .   Child: 0  Id: z of type int [mem: Local loc: -4 size: 1] [line: 19]
.   .   Sibling: 4  Call: outnl of type void [line: 20]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M gcdsm2.c-
Func: gcd returns type int [mem: Global loc: 0 size: -4] [line: 1]
.   Child: 0  Parm: u of type int [mem: Parameter loc: -2 size: 1] [line: 1]
.   Sibling: 1  Parm: v of type int [mem: Parameter loc: -3 size: 1] [line: 1]
.   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 1]
.   .   Child: 1  If [line: 2]
.   .   .   Child: 0  Op: = of type bool [line: 2]
.   .   .   .   Child: 0  Id: v of type int [mem: Parameter loc: -3 size: 1] [line: 2]
.   .   .   .   Child: 1  Const 0 of type int [line: 2]
.   .   .   Child: 1  Return [line: 2]
.   .   .   .   Child: 0  Id: u of type int [mem: Parameter loc: -2 size: 1] [line: 2]
.   .   .   Child: 2  Return [line: 3]
.   .   .   .   Child: 0  Call: gcd of type int [line: 3]
.   .   .   .   .   Child: 0  Id: v of type int [mem: Parameter loc: -3 size: 1] [line: 3]
.   .   .   .   .   Sibling: 1  Op: - of type int [line: 3]
.   .   .   .   .   .   Child: 0  Id: u of type int [mem: Parameter loc: -2 size: 1] [line: 3]
.   .   .   .   .   .   Child: 1  Op: * of type int [line: 3]
.   .   .   .   .   .   .   Child: 0  Op: / of type int [line: 3]
.   .   .   .   .   .   .   .   Child: 0  Id: u of type int [mem: Parameter loc: -2 size: 1] [line: 3]
.   .   .   .   .   .   .   .   Child: 1  Id: v of type int [mem: Parameter loc: -3 size: 1] [line: 3]
.   .   .   .   .   .   .   Child: 1  Id: v of type int [mem: Parameter loc: -3 size: 1] [line: 3]
Sibling: 1  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 5]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 6]
.   .   Child: 1  Call: output of type void [line: 7]
.   .   .   Child: 0  Call: gcd of type int [line: 7]
.   .   .   .   Child: 0  Call: input of type int [line: 7]
.   .   .   .   Sibling: 1  Call: input of type int [line: 7]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M gcdsm.c-
Func: gcd returns type int [mem: Global loc: 0 size: -4] [line: 2]
.   Child: 0  Parm: u of type int [mem: Parameter loc: -2 size: 1] [line: 2]
.   Sibling: 1  Parm: v of type int [mem: Parameter loc: -3 size: 1] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 2]
.   .   Child: 1  If [line: 2]
.   .   .   Child: 0  Op: = of type bool [line: 2]
.   .   .   .   Child: 0  Id: v of type int [mem: Parameter loc: -3 size: 1] [line: 2]
.   .   .   .   Child: 1  Const 0 of type int [line: 2]
.   .   .   Child: 1  Return [line: 2]
.   .   .   .   Child: 0  Id: u of type int [mem: Parameter loc: -2 size: 1] [line: 2]
.   .   .   Child: 2  Return [line: 2]
.   .   .   .   Child: 0  Call: gcd of type int [line: 2]
.   .   .   .   .   Child: 0  Id: v of type int [mem: Parameter loc: -3 size: 1] [line: 2]
.   .   .   .   .   Sibling: 1  Op: - of type int [line: 2]
.   .   .   .   .   .   Child: 0  Id: u of type int [mem: Parameter loc: -2 size: 1] [line: 2]
.   .   .   .   .   .   Child: 1  Op: * of type int [line: 2]
.   .   .   .   .   .   .   Child: 0  Op: / of type int [line: 2]
.   .   .   .   .   .   .   .   Child: 0  Id: u of type int [mem: Parameter loc: -2 size: 1] [line: 2]
.   .   .   .   .   .   .   .   Child: 1  Id: v of type int [mem: Parameter loc: -3 size: 1] [line: 2]
.   .   .   .   .   .   .   Child: 1  Id: v of type int [mem: Parameter loc: -3 size: 1] [line: 2]
Sibling: 1  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 4]
.   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 5]
.   .   Child: 0  Var: x of type int [mem: Local loc: -2 size: 1] [line: 6]
.   .   Sibling: 1  Var: y of type int [mem: Local loc: -3 size: 1] [line: 6]
.   .   Child: 1  Assign: <= of type int [line: 8]
.   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 8]
.   .   .   Child: 1  Call: input of type int [line: 8]
.   .   Sibling: 1  Assign: <= of type int [line: 9]
.   .   .   Child: 0  Id: y of type int [mem: Local loc: -3 size: 1] [line: 9]
.   .   .   Child: 1  Call: input of type int [line: 9]
.   .   Sibling: 2  Call: output of type void [line: 10]
.   .   .   Child: 0  Call: gcd of type int [line: 10]
.   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 10]
.   .   .   .   Sibling: 1  Id: y of type int [mem: Local loc: -3 size: 1] [line: 10]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M id.c-
WARNING(1): The parameter 'a' seems not to be used.
WARNING(1): The parameter 'c' seems not to be used.
WARNING(2): The variable 'd' seems not to be used.
WARNING(2): The variable 'e' seems not to be used.
WARNING(2): The variable 'f' seems not to be used.
WARNING(16): Variable 'xa' may be uninitialized when used here.
WARNING(20): Variable 'ba' may be uninitialized when used here.
Func: george returns type bool [mem: Global loc: 0 size: -5] [line: 1]
.   Child: 0  Parm: a of type int [mem: Parameter loc: -2 size: 1] [line: 1]
.   Sibling: 1  Parm: b of array of type int [mem: Parameter loc: -3 size: 1] [line: 1]
.   Sibling: 2  Parm: c of type int [mem: Parameter loc: -4 size: 1] [line: 1]
.   Child: 1  Compound [mem: None loc: 0 size: -8] [line: 1]
.   .   Child: 0  Var: d of type char [mem: Local loc: -5 size: 1] [line: 2]
.   .   Sibling: 1  Var: e of type char [mem: Local loc: -6 size: 1] [line: 2]
.   .   Sibling: 2  Var: f of type char [mem: Local loc: -7 size: 1] [line: 2]
.   .   Child: 1  Return [line: 3]
.   .   .   Child: 0  Op: > of type bool [line: 3]
.   .   .   .   Child: 0  Op: [ of type int [line: 3]
.   .   .   .   .   Child: 0  Id: b of array of type int [mem: Parameter loc: -3 size: 1] [line: 3]
.   .   .   .   .   Child: 1  Const 4 of type int [line: 3]
.   .   .   .   Child: 1  Const 3 of type int [line: 3]
Sibling: 1  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 6]
.   Child: 1  Compound [mem: None loc: 0 size: -38] [line: 7]
.   .   Child: 0  Var: xa of array of type int [mem: Local loc: -3 size: 11] [line: 8]
.   .   Sibling: 1  Var: x of type int [mem: Local loc: -13 size: 1] [line: 9]
.   .   .   Child: 0  Const 665 of type int [line: 9]
.   .   Sibling: 2  Var: ca of array of type char [mem: Local loc: -15 size: 11] [line: 10]
.   .   .   Child: 0  Const "dogs" of array of type char [mem: Global loc: -1 size: 5] [line: 10]
.   .   Sibling: 3  Var: c of type char [mem: Local loc: -25 size: 1] [line: 11]
.   .   .   Child: 0  Const 'x' of type char [line: 11]
.   .   Sibling: 4  Var: ba of array of type bool [mem: Local loc: -27 size: 11] [line: 12]
.   .   Sibling: 5  Var: b of type bool [mem: Local loc: -37 size: 1] [line: 13]
.   .   .   Child: 0  Const true of type bool [line: 13]
.   .   Child: 1  For [mem: None loc: 0 size: -39] [line: 14]
.   .   .   Child: 0  Var: f of type int [mem: Local loc: -38 size: 1] [line: 14]
.   .   .   Child: 1  Range [line: 14]
.   .   .   .   Child: 0  Const 1 of type int [line: 14]
.   .   .   .   Child: 1  Const 3 of type int [line: 14]
.   .   .   Child: 2  Id: f of type int [mem: Local loc: -38 size: 1] [line: 14]
.   .   Sibling: 1  Id: xa of array of type int [mem: Local loc: -3 size: 11] [line: 16]
.   .   Sibling: 2  Id: x of type int [mem: Local loc: -13 size: 1] [line: 17]
.   .   Sibling: 3  Id: ca of array of type char [mem: Local loc: -15 size: 11] [line: 18]
.   .   Sibling: 4  Id: c of type char [mem: Local loc: -25 size: 1] [line: 19]
.   .   Sibling: 5  Id: ba of array of type bool [mem: Local loc: -27 size: 11] [line: 20]
.   .   Sibling: 6  Id: b of type bool [mem: Local loc: -37 size: 1] [line: 21]
.   .   Sibling: 7  Call: george of type bool [line: 22]
.   .   .   Child: 0  Id: x of type int [mem: Local loc: -13 size: 1] [line: 22]
.   .   .   Sibling: 1  Id: xa of array of type int [mem: Local loc: -3 size: 11] [line: 22]
.   .   .   Sibling: 2  Op: + of type int [line: 22]
.   .   .   .   Child: 0  Const 720 of type int [line: 22]
.   .   .   .   Child: 1  Const 937 of type int [line: 22]
.   .   Sibling: 8  Return [line: 24]
Offset for end of global space: -5
Number of warnings: 7
Number of errors: 0

==============
==============
./c- -M if2.c-
WARNING(1): Expecting to return type int but function 'main' has no return statement.
Func: main returns type int [mem: Global loc: 0 size: -2] [line: 1]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 2]
.   .   Child: 1  If [line: 3]
.   .   .   Child: 0  Op: > of type bool [line: 3]
.   .   .   .   Child: 0  Const 1 of type int [line: 3]
.   .   .   .   Child: 1  Const 2 of type int [line: 3]
.   .   .   Child: 1  Const 3 of type int [line: 3]
.   .   Sibling: 1  If [line: 4]
.   .   .   Child: 0  Op: < of type bool [line: 4]
.   .   .   .   Child: 0  Const 21 of type int [line: 4]
.   .   .   .   Child: 1  Const 22 of type int [line: 4]
.   .   .   Child: 1  Const 23 of type int [line: 4]
.   .   .   Child: 2  Const 24 of type int [line: 4]
.   .   Sibling: 2  If [line: 5]
.   .   .   Child: 0  Op: = of type bool [line: 5]
.   .   .   .   Child: 0  Const 31 of type int [line: 5]
.   .   .   .   Child: 1  Const 32 of type int [line: 5]
.   .   .   Child: 1  If [line: 5]
.   .   .   .   Child: 0  Op: = of type bool [line: 5]
.   .   .   .   .   Child: 0  Const 33 of type int [line: 5]
.   .   .   .   .   Child: 1  Const 34 of type int [line: 5]
.   .   .   .   Child: 1  Const 35 of type int [line: 5]
.   .   .   .   Child: 2  Const 36 of type int [line: 5]
.   .   Sibling: 3  If [line: 6]
.   .   .   Child: 0  Op: = of type bool [line: 6]
.   .   .   .   Child: 0  Const 41 of type int [line: 6]
.   .   .   .   Child: 1  Const 42 of type int [line: 6]
.   .   .   Child: 1  If [line: 6]
.   .   .   .   Child: 0  Op: = of type bool [line: 6]
.   .   .   .   .   Child: 0  Const 43 of type int [line: 6]
.   .   .   .   .   Child: 1  Const 44 of type int [line: 6]
.   .   .   .   Child: 1  Const 45 of type int [line: 6]
.   .   .   .   Child: 2  Const 46 of type int [line: 6]
.   .   .   Child: 2  Const 47 of type int [line: 6]
.   .   Sibling: 4  If [line: 8]
.   .   .   Child: 0  Op: = of type bool [line: 8]
.   .   .   .   Child: 0  Const 51 of type int [line: 8]
.   .   .   .   Child: 1  Const 52 of type int [line: 8]
.   .   .   Child: 1  If [line: 9]
.   .   .   .   Child: 0  Op: = of type bool [line: 9]
.   .   .   .   .   Child: 0  Const 53 of type int [line: 9]
.   .   .   .   .   Child: 1  Const 54 of type int [line: 9]
.   .   .   .   Child: 1  Const 151 of type int [line: 9]
.   .   .   .   Child: 2  Const 152 of type int [line: 10]
.   .   .   Child: 2  If [line: 12]
.   .   .   .   Child: 0  Op: = of type bool [line: 12]
.   .   .   .   .   Child: 0  Const 56 of type int [line: 12]
.   .   .   .   .   Child: 1  Const 57 of type int [line: 12]
.   .   .   .   Child: 1  Const 58 of type int [line: 12]
.   .   .   .   Child: 2  Const 59 of type int [line: 13]
.   .   Sibling: 5  If [line: 15]
.   .   .   Child: 0  Op: = of type bool [line: 15]
.   .   .   .   Child: 0  Const 61 of type int [line: 15]
.   .   .   .   Child: 1  Const 1 of type int [line: 15]
.   .   .   Child: 1  Const 11 of type int [line: 15]
.   .   .   Child: 2  If [line: 16]
.   .   .   .   Child: 0  Op: = of type bool [line: 16]
.   .   .   .   .   Child: 0  Const 62 of type int [line: 16]
.   .   .   .   .   Child: 1  Const 1 of type int [line: 16]
.   .   .   .   Child: 1  Const 12 of type int [line: 16]
.   .   .   .   Child: 2  If [line: 17]
.   .   .   .   .   Child: 0  Op: = of type bool [line: 17]
.   .   .   .   .   .   Child: 0  Const 63 of type int [line: 17]
.   .   .   .   .   .   Child: 1  Const 1 of type int [line: 17]
.   .   .   .   .   Child: 1  Const 13 of type int [line: 17]
.   .   .   .   .   Child: 2  Const 14 of type int [line: 18]
Offset for end of global space: 0
Number of warnings: 1
Number of errors: 0

==============
==============
./c- -M if.c-
Func: main returns type void [mem: Global loc: 0 size: -2] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 3]
.   .   Child: 0  Var: x of type int [mem: Local loc: -2 size: 1] [line: 4]
.   .   Child: 1  Assign: <= of type int [line: 6]
.   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 6]
.   .   .   Child: 1  Const 0 of type int [line: 6]
.   .   Sibling: 1  If [line: 8]
.   .   .   Child: 0  Const false of type bool [line: 8]
.   .   .   Child: 1  Assign: ++ of type int [line: 8]
.   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 8]
.   .   Sibling: 2  If [line: 10]
.   .   .   Child: 0  Op: < of type bool [line: 10]
.   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 10]
.   .   .   .   Child: 1  Const 10 of type int [line: 10]
.   .   .   Child: 1  Assign: ++ of type int [line: 10]
.   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 10]
.   .   .   Child: 2  Assign: -- of type int [line: 11]
.   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 11]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M ifevil.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(1): Expecting to return type int but function 'ant' has no return statement.
WARNING(1): The function 'ant' seems not to be used.
ERROR(5): Expecting Boolean test condition in if statement but got type int.
WARNING(5): Variable 'bat' may be uninitialized when used here.
WARNING(5): Variable 'hog' may be uninitialized when used here.
WARNING(6): Variable 'fox' may be uninitialized when used here.
ERROR(8): Expecting Boolean test condition in if statement but got type int.
ERROR(9): Expecting Boolean test condition in if statement but got type int.
ERROR(12): Expecting Boolean test condition in if statement but got type int.
ERROR(14): Expecting Boolean test condition in if statement but got type int.
ERROR(16): Expecting Boolean test condition in if statement but got type int.
ERROR(18): Expecting Boolean test condition in if statement but got type int.
ERROR(19): Expecting Boolean test condition in if statement but got type int.
Number of warnings: 5
Number of errors: 9

==============
==============
./c- -M ifNest.c-
WARNING(6): Variable 'x' may be uninitialized when used here.
WARNING(8): Variable 'y' may be uninitialized when used here.
WARNING(11): Variable 'z' may be uninitialized when used here.
Func: main returns type void [mem: Global loc: 0 size: -2] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 3]
.   .   Child: 0  Var: x of type int [mem: Local loc: -2 size: 1] [line: 4]
.   .   Sibling: 1  Var: y of type int [mem: Local loc: -3 size: 1] [line: 4]
.   .   Sibling: 2  Var: z of type int [mem: Local loc: -4 size: 1] [line: 4]
.   .   Child: 1  If [line: 6]
.   .   .   Child: 0  Op: !< of type bool [line: 6]
.   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 6]
.   .   .   .   Child: 1  Const 0 of type int [line: 6]
.   .   .   Child: 1  If [line: 7]
.   .   .   .   Child: 0  Const true of type bool [line: 7]
.   .   .   .   Child: 1  Id: x of type int [mem: Local loc: -2 size: 1] [line: 7]
.   .   .   .   Child: 2  Id: y of type int [mem: Local loc: -3 size: 1] [line: 8]
.   .   Sibling: 1  Const 111 of type int [line: 9]
.   .   Sibling: 2  If [line: 10]
.   .   .   Child: 0  Op: !< of type bool [line: 10]
.   .   .   .   Child: 0  Id: y of type int [mem: Local loc: -3 size: 1] [line: 10]
.   .   .   .   Child: 1  Const 0 of type int [line: 10]
.   .   .   Child: 1  Id: y of type int [mem: Local loc: -3 size: 1] [line: 10]
.   .   .   Child: 2  If [line: 11]
.   .   .   .   Child: 0  Const true of type bool [line: 11]
.   .   .   .   Child: 1  Id: z of type int [mem: Local loc: -4 size: 1] [line: 11]
.   .   Sibling: 3  Const 222 of type int [line: 12]
.   .   Sibling: 4  If [line: 13]
.   .   .   Child: 0  Op: !< of type bool [line: 13]
.   .   .   .   Child: 0  Id: y of type int [mem: Local loc: -3 size: 1] [line: 13]
.   .   .   .   Child: 1  Const 0 of type int [line: 13]
.   .   .   Child: 1  Id: y of type int [mem: Local loc: -3 size: 1] [line: 13]
.   .   .   Child: 2  If [line: 14]
.   .   .   .   Child: 0  Const true of type bool [line: 14]
.   .   .   .   Child: 1  Id: z of type int [mem: Local loc: -4 size: 1] [line: 14]
.   .   .   .   Child: 2  Id: x of type int [mem: Local loc: -2 size: 1] [line: 15]
.   .   Sibling: 5  Const 333 of type int [line: 16]
.   .   Sibling: 6  If [line: 17]
.   .   .   Child: 0  Op: !< of type bool [line: 17]
.   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 17]
.   .   .   .   Child: 1  Const 0 of type int [line: 17]
.   .   .   Child: 1  If [line: 17]
.   .   .   .   Child: 0  Const true of type bool [line: 17]
.   .   .   .   Child: 1  Id: x of type int [mem: Local loc: -2 size: 1] [line: 17]
.   .   .   .   Child: 2  Id: y of type int [mem: Local loc: -3 size: 1] [line: 18]
.   .   .   Child: 2  Id: z of type int [mem: Local loc: -4 size: 1] [line: 19]
Offset for end of global space: 0
Number of warnings: 3
Number of errors: 0

==============
==============
./c- -M init2.c-
WARNING(13): Variable 'b' may be uninitialized when used here.
Var: a of array of type int [mem: Global loc: -1 size: 12] [line: 2]
Sibling: 1  Var: x of type int [mem: Global loc: -12 size: 1] [line: 3]
.   Child: 0  Op: + of type int [line: 3]
.   .   Child: 0  Const 666 of type int [line: 3]
.   .   Child: 1  Op: * of type int [line: 3]
.   .   .   Child: 0  Const 777 of type int [line: 3]
.   .   .   Child: 1  Const 888 of type int [line: 3]
Sibling: 2  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 5]
.   Child: 1  Compound [mem: None loc: 0 size: -26] [line: 6]
.   .   Child: 0  Var: b of array of type int [mem: Local loc: -3 size: 23] [line: 7]
.   .   Sibling: 1  Var: y of type int [mem: Local loc: -25 size: 1] [line: 8]
.   .   .   Child: 0  Op: + of type int [line: 8]
.   .   .   .   Child: 0  Const 777 of type int [line: 8]
.   .   .   .   Child: 1  Op: * of type int [line: 8]
.   .   .   .   .   Child: 0  Const 666 of type int [line: 8]
.   .   .   .   .   Child: 1  Const 888 of type int [line: 8]
.   .   Sibling: 2  Var: c of static array of type int [mem: LocalStatic loc: -14 size: 34] [line: 9]
.   .   Sibling: 3  Var: z of static type int [mem: LocalStatic loc: -47 size: 1] [line: 10]
.   .   .   Child: 0  Op: + of type int [line: 10]
.   .   .   .   Child: 0  Const 888 of type int [line: 10]
.   .   .   .   Child: 1  Op: * of type int [line: 10]
.   .   .   .   .   Child: 0  Const 777 of type int [line: 10]
.   .   .   .   .   Child: 1  Const 666 of type int [line: 10]
.   .   Child: 1  Call: output of type void [line: 12]
.   .   .   Child: 0  Op: sizeof of type int [line: 12]
.   .   .   .   Child: 0  Id: a of array of type int [mem: Global loc: -1 size: 12] [line: 12]
.   .   Sibling: 1  Call: output of type void [line: 13]
.   .   .   Child: 0  Op: sizeof of type int [line: 13]
.   .   .   .   Child: 0  Id: b of array of type int [mem: Local loc: -3 size: 23] [line: 13]
.   .   Sibling: 2  Call: output of type void [line: 14]
.   .   .   Child: 0  Op: sizeof of type int [line: 14]
.   .   .   .   Child: 0  Id: c of static array of type int [mem: LocalStatic loc: -14 size: 34] [line: 14]
.   .   Sibling: 3  Call: outnl of type void [line: 15]
.   .   Sibling: 4  Call: output of type void [line: 17]
.   .   .   Child: 0  Id: x of type int [mem: Global loc: -12 size: 1] [line: 17]
.   .   Sibling: 5  Call: output of type void [line: 18]
.   .   .   Child: 0  Id: y of type int [mem: Local loc: -25 size: 1] [line: 18]
.   .   Sibling: 6  Call: output of type void [line: 19]
.   .   .   Child: 0  Id: z of static type int [mem: LocalStatic loc: -47 size: 1] [line: 19]
.   .   Sibling: 7  Call: outnl of type void [line: 20]
.   .   Sibling: 8  Assign: <= of type int [line: 22]
.   .   .   Child: 0  Id: z of static type int [mem: LocalStatic loc: -47 size: 1] [line: 22]
.   .   .   Child: 1  Const 999 of type int [line: 22]
Offset for end of global space: -48
Number of warnings: 1
Number of errors: 0

==============
==============
./c- -M init3.c-
Var: x of type int [mem: Global loc: 0 size: 1] [line: 2]
.   Child: 0  Const 111 of type int [line: 2]
Sibling: 1  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 4]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 4]
.   .   Child: 0  Var: y of type int [mem: Local loc: -2 size: 1] [line: 5]
.   .   .   Child: 0  Const 222 of type int [line: 5]
.   .   Sibling: 1  Var: z of static type int [mem: LocalStatic loc: -1 size: 1] [line: 6]
.   .   .   Child: 0  Const 333 of type int [line: 6]
.   .   Sibling: 2  Var: b of static type bool [mem: LocalStatic loc: -2 size: 1] [line: 7]
.   .   .   Child: 0  Const true of type bool [line: 7]
.   .   Sibling: 3  Var: c of static type char [mem: LocalStatic loc: -3 size: 1] [line: 8]
.   .   .   Child: 0  Const 'Z' of type char [line: 8]
.   .   Child: 1  Call: output of type void [line: 10]
.   .   .   Child: 0  Id: x of type int [mem: Global loc: 0 size: 1] [line: 10]
.   .   Sibling: 1  Call: output of type void [line: 11]
.   .   .   Child: 0  Id: y of type int [mem: Local loc: -2 size: 1] [line: 11]
.   .   Sibling: 2  Call: output of type void [line: 12]
.   .   .   Child: 0  Id: z of static type int [mem: LocalStatic loc: -1 size: 1] [line: 12]
.   .   Sibling: 3  Call: outputb of type void [line: 13]
.   .   .   Child: 0  Id: b of static type bool [mem: LocalStatic loc: -2 size: 1] [line: 13]
.   .   Sibling: 4  Call: outputc of type void [line: 14]
.   .   .   Child: 0  Id: c of static type char [mem: LocalStatic loc: -3 size: 1] [line: 14]
Offset for end of global space: -4
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M init4.c-
WARNING(1): Expecting to return type int but function 'main' has no return statement.
ERROR(4): Initializer for variable 'y' is not a constant expression.
WARNING(4): The variable 'y' seems not to be used.
ERROR(5): Initializer for variable 'roll' is not a constant expression.
WARNING(5): The variable 'roll' seems not to be used.
Number of warnings: 3
Number of errors: 2

==============
==============
./c- -M init5.c-
ERROR(2): Initializer for variable 's' is not a constant expression.
ERROR(2): Initializer for variable 't' of type int is of type char
ERROR(2): Initializer for variable 'u' of type int is of type char
ERROR(2): Symbol 's' is not declared.
WARNING(2): The variable 's' seems not to be used.
WARNING(2): The variable 't' seems not to be used.
WARNING(2): The variable 'u' seems not to be used.
ERROR(7): Initializer for variable 'b' requires both operands be arrays or not but variable is an array and rhs is not an array.
WARNING(7): The variable 'y' seems not to be used.
ERROR(9): Initializer for variable 'lenx' is not a constant expression.
WARNING(9): The variable 'k' seems not to be used.
WARNING(9): The variable 'lenx' seems not to be used.
WARNING(9): Variable 'x' may be uninitialized when used here.
WARNING(10): The variable 'ba' seems not to be used.
WARNING(10): The variable 'bb' seems not to be used.
WARNING(10): The variable 'bc' seems not to be used.
WARNING(11): The variable 'ca' seems not to be used.
WARNING(18): Variable 't' may be uninitialized when used here.
Number of warnings: 12
Number of errors: 6

==============
==============
./c- -M initbad2.c-
ERROR(1): Initializer for variable 'a' of type int is of type char
ERROR(2): Initializer for variable 'b' of type bool is of type int
ERROR(3): Initializer for variable 'c' of type char is of type bool
WARNING(4): The variable 's' seems not to be used.
ERROR(8): Initializer for variable 'aa' is not a constant expression.
WARNING(8): The variable 'aa' seems not to be used.
ERROR(9): Initializer for variable 'bb' is not a constant expression.
WARNING(9): The variable 'bb' seems not to be used.
ERROR(10): Initializer for variable 'cc' is not a constant expression.
WARNING(10): The variable 'cc' seems not to be used.
Number of warnings: 4
Number of errors: 6

==============
==============
./c- -M initbad.c-
ERROR(2): Initializer for variable 'a' requires both operands be arrays or not but variable is an array and rhs is not an array.
WARNING(2): The variable 'a' seems not to be used.
WARNING(3): The variable 'b' seems not to be used.
ERROR(4): Initializer for variable 'c' is not a constant expression.
WARNING(4): The variable 'c' seems not to be used.
WARNING(5): The variable 'd' seems not to be used.
ERROR(6): Initializer for variable 'x' of type int is of type char
ERROR(7): Initializer for variable 'y' of type int is of type char
ERROR(7): Initializer for variable 'y' requires both operands be arrays or not but variable is not an array and rhs is an array.
ERROR(8): Initializer for variable 'z' is not a constant expression.
ERROR(8): Initializer for variable 'z' of type int is of type void
ERROR(10): '<=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(11): '<=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(11): '<=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(12): '<=' requires operands of the same type but lhs is type int and rhs is type void.
Number of warnings: 4
Number of errors: 11

==============
==============
./c- -M init.c-
WARNING(3): The variable 'a' seems not to be used.
WARNING(4): The variable 'x' seems not to be used.
WARNING(8): The variable 'b' seems not to be used.
WARNING(9): The variable 'y' seems not to be used.
WARNING(10): The variable 'c' seems not to be used.
Var: a of array of type int [mem: Global loc: -1 size: 12] [line: 3]
Sibling: 1  Var: x of type int [mem: Global loc: -12 size: 1] [line: 4]
.   Child: 0  Const 666 of type int [line: 4]
Sibling: 2  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 6]
.   Child: 1  Compound [mem: None loc: 0 size: -26] [line: 7]
.   .   Child: 0  Var: b of array of type int [mem: Local loc: -3 size: 23] [line: 8]
.   .   Sibling: 1  Var: y of type int [mem: Local loc: -25 size: 1] [line: 9]
.   .   .   Child: 0  Const 777 of type int [line: 9]
.   .   Sibling: 2  Var: c of static array of type int [mem: LocalStatic loc: -14 size: 34] [line: 10]
.   .   Sibling: 3  Var: z of static type int [mem: LocalStatic loc: -47 size: 1] [line: 11]
.   .   .   Child: 0  Const 888 of type int [line: 11]
.   .   Child: 1  Assign: <= of type int [line: 13]
.   .   .   Child: 0  Id: z of static type int [mem: LocalStatic loc: -47 size: 1] [line: 13]
.   .   .   Child: 1  Const 999 of type int [line: 13]
Offset for end of global space: -48
Number of warnings: 5
Number of errors: 0

==============
==============
./c- -M initconst.c-
ERROR(3): Initializer for variable 'u' is not a constant expression.
WARNING(3): The variable 'u' seems not to be used.
ERROR(5): Initializer for variable 'y' is not a constant expression.
WARNING(5): The variable 'y' seems not to be used.
WARNING(6): The variable 'z' seems not to be used.
Number of warnings: 3
Number of errors: 2

==============
==============
./c- -M initsm.c-
Func: main returns type void [mem: Global loc: 0 size: -2] [line: 1]
.   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 2]
.   .   Child: 0  Var: x of type int [mem: Local loc: -2 size: 1] [line: 3]
.   .   .   Child: 0  Const 666 of type int [line: 3]
.   .   Sibling: 1  Var: y of type int [mem: Local loc: -3 size: 1] [line: 4]
.   .   .   Child: 0  Op: + of type int [line: 4]
.   .   .   .   Child: 0  Const 111 of type int [line: 4]
.   .   .   .   Child: 1  Op: * of type int [line: 4]
.   .   .   .   .   Child: 0  Const 222 of type int [line: 4]
.   .   .   .   .   Child: 1  Const 333 of type int [line: 4]
.   .   Child: 1  Op: * of type int [line: 6]
.   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 6]
.   .   .   Child: 1  Id: y of type int [mem: Local loc: -3 size: 1] [line: 6]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M initused.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(1): The function 'ant' seems not to be used.
ERROR(2): Symbol 'z' is not declared.
ERROR(2): Symbol 'z' is not declared.
WARNING(5): The function 'bat' seems not to be used.
ERROR(6): Symbol 'z' is not declared.
ERROR(6): Symbol 'z' is not declared.
WARNING(9): The function 'cow' seems not to be used.
WARNING(11): Variable 'z' may be uninitialized when used here.
WARNING(14): The function 'dog' seems not to be used.
ERROR(16): 'z' is a simple variable and cannot be called.
ERROR(16): 'z' is a simple variable and cannot be called.
Number of warnings: 5
Number of errors: 7

==============
==============
./c- -M invalidChar.c-
ERROR(2): Invalid or misplaced input character: '"'. Character Ignored.
ERROR(3): Invalid or misplaced input character: '@'. Character Ignored.
Number of warnings: 0
Number of errors: 2

==============
==============
./c- -M io.c-
ERROR(13): Symbol 'outputs' is not declared.
ERROR(49): Not expecting array in parameter 1 of call to 'output' declared on line -1.
WARNING(49): Variable 'xx' may be uninitialized when used here.
ERROR(50): Not expecting array in parameter 1 of call to 'outputb' declared on line -1.
WARNING(50): Variable 'bb' may be uninitialized when used here.
ERROR(51): Not expecting array in parameter 1 of call to 'outputc' declared on line -1.
WARNING(51): Variable 'cc' may be uninitialized when used here.
Number of warnings: 3
Number of errors: 4

==============
==============
./c- -M lec01.c-
WARNING(7): The variable 'i' seems not to be used.
Func: dog returns type int [mem: Global loc: 0 size: -2] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 2]
.   .   Child: 1  Return [line: 2]
.   .   .   Child: 0  Const 777 of type int [line: 2]
Sibling: 1  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 4]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 5]
.   .   Child: 0  Var: x of type int [mem: Local loc: -2 size: 1] [line: 6]
.   .   .   Child: 0  Const 10 of type int [line: 6]
.   .   Child: 1  For [mem: None loc: 0 size: -4] [line: 7]
.   .   .   Child: 0  Var: i of type int [mem: Local loc: -3 size: 1] [line: 7]
.   .   .   Child: 1  Range [line: 7]
.   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 7]
.   .   .   .   Child: 1  Id: x of type int [mem: Local loc: -2 size: 1] [line: 7]
.   .   .   .   Child: 2  Id: x of type int [mem: Local loc: -2 size: 1] [line: 7]
.   .   Sibling: 1  Op: = of type bool [line: 8]
.   .   .   Child: 0  Const "dog" of array of type char [mem: Global loc: -1 size: 4] [line: 8]
.   .   .   Child: 1  Const "cat" of array of type char [mem: Global loc: -5 size: 4] [line: 8]
.   .   Sibling: 2  Op: + of type int [line: 9]
.   .   .   Child: 0  Const 666 of type int [line: 9]
.   .   .   Child: 1  Call: dog of type int [line: 9]
Offset for end of global space: -8
Number of warnings: 1
Number of errors: 0

==============
==============
./c- -M lec02.c-
WARNING(1): The variable 'c' seems not to be used.
WARNING(2): The variable 'd' seems not to be used.
WARNING(6): The variable 'w' seems not to be used.
WARNING(6): The variable 'x' seems not to be used.
WARNING(6): The variable 'y' seems not to be used.
Var: c of array of type char [mem: Global loc: -1 size: 101] [line: 1]
Sibling: 1  Var: d of type int [mem: Global loc: -101 size: 1] [line: 2]
Sibling: 2  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 4]
.   Child: 1  Compound [mem: None loc: 0 size: -15] [line: 5]
.   .   Child: 0  Var: w of type bool [mem: Local loc: -2 size: 1] [line: 6]
.   .   Sibling: 1  Var: x of array of type bool [mem: Local loc: -4 size: 11] [line: 6]
.   .   Sibling: 2  Var: y of type bool [mem: Local loc: -14 size: 1] [line: 6]
Offset for end of global space: -102
Number of warnings: 5
Number of errors: 0

==============
==============
./c- -M lec03.c-
Func: cat returns type int [mem: Global loc: 0 size: -3] [line: 1]
.   Child: 0  Parm: x of type int [mem: Parameter loc: -2 size: 1] [line: 1]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 1]
.   .   Child: 1  Return [line: 1]
.   .   .   Child: 0  Id: x of type int [mem: Parameter loc: -2 size: 1] [line: 1]
Sibling: 1  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 3]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 4]
.   .   Child: 1  Call: cat of type int [line: 5]
.   .   .   Child: 0  Const 666 of type int [line: 5]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M lec04.c-
Func: main returns type void [mem: Global loc: 0 size: -2] [line: 1]
.   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 2]
.   .   Child: 0  Var: x of type int [mem: Local loc: -2 size: 1] [line: 3]
.   .   Sibling: 1  Var: y of type int [mem: Local loc: -3 size: 1] [line: 3]
.   .   Sibling: 2  Var: z of type int [mem: Local loc: -4 size: 1] [line: 3]
.   .   Child: 1  Assign: <= of type int [line: 5]
.   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 5]
.   .   .   Child: 1  Op: + of type int [line: 5]
.   .   .   .   Child: 0  Const 111 of type int [line: 5]
.   .   .   .   Child: 1  Const 222 of type int [line: 5]
.   .   Sibling: 1  Assign: <= of type int [line: 6]
.   .   .   Child: 0  Id: y of type int [mem: Local loc: -3 size: 1] [line: 6]
.   .   .   Child: 1  Op: + of type int [line: 6]
.   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 6]
.   .   .   .   Child: 1  Id: x of type int [mem: Local loc: -2 size: 1] [line: 6]
.   .   Sibling: 2  Assign: <= of type int [line: 7]
.   .   .   Child: 0  Id: z of type int [mem: Local loc: -4 size: 1] [line: 7]
.   .   .   Child: 1  Op: + of type int [line: 7]
.   .   .   .   Child: 0  Op: * of type int [line: 7]
.   .   .   .   .   Child: 0  Const 111 of type int [line: 7]
.   .   .   .   .   Child: 1  Const 222 of type int [line: 7]
.   .   .   .   Child: 1  Op: * of type int [line: 7]
.   .   .   .   .   Child: 0  Const 333 of type int [line: 7]
.   .   .   .   .   Child: 1  Const 444 of type int [line: 7]
.   .   Sibling: 3  Op: % of type int [line: 8]
.   .   .   Child: 0  Const 555 of type int [line: 8]
.   .   .   Child: 1  Const 6 of type int [line: 8]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M lhs.c-
WARNING(4): The variable 'dd' seems not to be used.
WARNING(9): Variable 'b' may be uninitialized when used here.
WARNING(10): Variable 'bb' may be uninitialized when used here.
WARNING(10): Variable 'c' may be uninitialized when used here.
WARNING(13): Variable 'f' may be uninitialized when used here.
Func: main returns type void [mem: Global loc: 0 size: -2] [line: 1]
.   Child: 1  Compound [mem: None loc: 0 size: -74] [line: 2]
.   .   Child: 0  Var: a of type int [mem: Local loc: -2 size: 1] [line: 3]
.   .   Sibling: 1  Var: b of type int [mem: Local loc: -3 size: 1] [line: 3]
.   .   Sibling: 2  Var: c of type int [mem: Local loc: -4 size: 1] [line: 3]
.   .   Sibling: 3  Var: d of type int [mem: Local loc: -5 size: 1] [line: 3]
.   .   Sibling: 4  Var: e of type int [mem: Local loc: -6 size: 1] [line: 3]
.   .   Sibling: 5  Var: f of type int [mem: Local loc: -7 size: 1] [line: 3]
.   .   Sibling: 6  Var: aa of array of type int [mem: Local loc: -9 size: 11] [line: 4]
.   .   Sibling: 7  Var: bb of array of type int [mem: Local loc: -20 size: 11] [line: 4]
.   .   Sibling: 8  Var: cc of array of type int [mem: Local loc: -31 size: 11] [line: 4]
.   .   Sibling: 9  Var: dd of array of type int [mem: Local loc: -42 size: 11] [line: 4]
.   .   Sibling: 10  Var: ee of array of type int [mem: Local loc: -53 size: 11] [line: 4]
.   .   Sibling: 11  Var: ff of array of type int [mem: Local loc: -64 size: 11] [line: 4]
.   .   Child: 1  Assign: <= of type int [line: 9]
.   .   .   Child: 0  Op: [ of type int [line: 9]
.   .   .   .   Child: 0  Id: aa of array of type int [mem: Local loc: -9 size: 11] [line: 9]
.   .   .   .   Child: 1  Id: a of type int [mem: Local loc: -2 size: 1] [line: 9]
.   .   .   Child: 1  Id: b of type int [mem: Local loc: -3 size: 1] [line: 9]
.   .   Sibling: 1  Assign: ++ of type int [line: 10]
.   .   .   Child: 0  Op: [ of type int [line: 10]
.   .   .   .   Child: 0  Id: bb of array of type int [mem: Local loc: -20 size: 11] [line: 10]
.   .   .   .   Child: 1  Id: c of type int [mem: Local loc: -4 size: 1] [line: 10]
.   .   Sibling: 2  Assign: <= of type int [line: 11]
.   .   .   Child: 0  Op: [ of type int [line: 11]
.   .   .   .   Child: 0  Id: cc of array of type int [mem: Local loc: -31 size: 11] [line: 11]
.   .   .   .   Child: 1  Op: [ of type int [line: 11]
.   .   .   .   .   Child: 0  Id: aa of array of type int [mem: Local loc: -9 size: 11] [line: 11]
.   .   .   .   .   Child: 1  Id: d of type int [mem: Local loc: -5 size: 1] [line: 11]
.   .   .   Child: 1  Const 666 of type int [line: 11]
.   .   Sibling: 3  Assign: <= of type int [line: 12]
.   .   .   Child: 0  Op: [ of type int [line: 12]
.   .   .   .   Child: 0  Id: ee of array of type int [mem: Local loc: -53 size: 11] [line: 12]
.   .   .   .   Child: 1  Op: [ of type int [line: 12]
.   .   .   .   .   Child: 0  Id: ff of array of type int [mem: Local loc: -64 size: 11] [line: 12]
.   .   .   .   .   Child: 1  Const 3 of type int [line: 12]
.   .   .   Child: 1  Const 777 of type int [line: 12]
.   .   Sibling: 4  Assign: <= of type int [line: 13]
.   .   .   Child: 0  Id: e of type int [mem: Local loc: -6 size: 1] [line: 13]
.   .   .   Child: 1  Id: f of type int [mem: Local loc: -7 size: 1] [line: 13]
Offset for end of global space: 0
Number of warnings: 5
Number of errors: 0

==============
==============
./c- -M loops.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(4): Expecting to return type int but function 'dog' has no return statement.
WARNING(4): The function 'dog' seems not to be used.
WARNING(4): The parameter 'c' seems not to be used.
WARNING(4): The parameter 'd' seems not to be used.
WARNING(10): The variable 'y' seems not to be used.
ERROR(12): Symbol 'lyra' is already declared at line 11.
ERROR(16): Symbol 'asha' is not declared.
ERROR(16): Symbol 'bree' is not declared.
ERROR(16): Symbol 'cloe' is not declared.
WARNING(16): The variable 'lyra' seems not to be used.
ERROR(19): Symbol 'y' is not declared.
ERROR(20): Symbol 'y' is not declared.
WARNING(21): The variable 'y' seems not to be used.
WARNING(21): The variable 'z' seems not to be used.
Number of warnings: 8
Number of errors: 7

==============
==============
./c- -M loopscope2.c-
WARNING(3): The variable 'x' seems not to be used.
WARNING(6): The variable 'x' seems not to be used.
WARNING(10): The variable 'y' seems not to be used.
WARNING(11): The variable 'x' seems not to be used.
WARNING(14): The variable 'y' seems not to be used.
WARNING(15): The variable 'x' seems not to be used.
WARNING(18): The variable 'y' seems not to be used.
ERROR(19): Symbol 'y' is already declared at line 18.
WARNING(22): The variable 'y' seems not to be used.
WARNING(23): The variable 'y' seems not to be used.
WARNING(26): The variable 'y' seems not to be used.
WARNING(27): The variable 'y' seems not to be used.
Number of warnings: 11
Number of errors: 1

==============
==============
./c- -M loopscope.c-
ERROR(6): Symbol 'y' is already declared at line 5.
ERROR(11): Symbol 'y' is not declared.
Number of warnings: 0
Number of errors: 2

==============
==============
./c- -M matchunmatch.c-
WARNING(3): The variable 's' seems not to be used.
ERROR(6): Expecting Boolean test condition in if statement but got type int.
WARNING(6): Variable 'a' may be uninitialized when used here.
WARNING(6): Variable 'b' may be uninitialized when used here.
WARNING(6): Variable 't' may be uninitialized when used here.
ERROR(7): Expecting Boolean test condition in if statement but got type int.
WARNING(7): Variable 'u' may be uninitialized when used here.
ERROR(8): Expecting Boolean test condition in if statement but got type int.
WARNING(8): Variable 'c' may be uninitialized when used here.
WARNING(8): Variable 'd' may be uninitialized when used here.
WARNING(8): Variable 'v' may be uninitialized when used here.
ERROR(9): Expecting Boolean test condition in if statement but got type int.
ERROR(10): Expecting Boolean test condition in if statement but got type int.
WARNING(10): The variable 'z' seems not to be used.
ERROR(11): Expecting Boolean test condition in if statement but got type int.
WARNING(11): The variable 'z' seems not to be used.
Number of warnings: 10
Number of errors: 6

==============
==============
./c- -M mem2.c-
WARNING(1): The variable 'gg' seems not to be used.
WARNING(1): The variable 'g' seems not to be used.
WARNING(3): The function 'julia' seems not to be used.
WARNING(3): The parameter 'y' seems not to be used.
WARNING(3): The parameter 'z' seems not to be used.
WARNING(5): The variable 'aa' seems not to be used.
WARNING(6): The variable 'bb' seems not to be used.
WARNING(6): The variable 'b' seems not to be used.
WARNING(7): The variable 'c' seems not to be used.
WARNING(8): The variable 's' seems not to be used.
WARNING(8): The variable 't' seems not to be used.
WARNING(13): The variable 'p' seems not to be used.
WARNING(14): The variable 'q' seems not to be used.
WARNING(17): The variable 'h' seems not to be used.
Var: g of type int [mem: Global loc: 0 size: 1] [line: 1]
Sibling: 1  Var: gg of array of type int [mem: Global loc: -2 size: 11] [line: 1]
Sibling: 2  Func: julia returns type void [mem: Global loc: 0 size: -5] [line: 3]
.   Child: 0  Parm: x of type int [mem: Parameter loc: -2 size: 1] [line: 3]
.   Sibling: 1  Parm: y of type int [mem: Parameter loc: -3 size: 1] [line: 3]
.   Sibling: 2  Parm: z of type int [mem: Parameter loc: -4 size: 1] [line: 3]
.   Child: 1  Compound [mem: None loc: 0 size: -71] [line: 4]
.   .   Child: 0  Var: a of type int [mem: Local loc: -5 size: 1] [line: 5]
.   .   Sibling: 1  Var: aa of array of type int [mem: Local loc: -7 size: 11] [line: 5]
.   .   Sibling: 2  Var: b of type bool [mem: Local loc: -17 size: 1] [line: 6]
.   .   Sibling: 3  Var: bb of array of type bool [mem: Local loc: -19 size: 21] [line: 6]
.   .   Sibling: 4  Var: c of type char [mem: Local loc: -39 size: 1] [line: 7]
.   .   Sibling: 5  Var: cc of array of type char [mem: Local loc: -41 size: 31] [line: 7]
.   .   Sibling: 6  Var: s of static type int [mem: LocalStatic loc: -12 size: 1] [line: 8]
.   .   Sibling: 7  Var: t of static type int [mem: LocalStatic loc: -13 size: 1] [line: 8]
.   .   Child: 1  Assign: <= of type int [line: 10]
.   .   .   Child: 0  Id: a of type int [mem: Local loc: -5 size: 1] [line: 10]
.   .   .   Child: 1  Id: x of type int [mem: Parameter loc: -2 size: 1] [line: 10]
.   .   Sibling: 1  Assign: <= of array of type char [line: 11]
.   .   .   Child: 0  Id: cc of array of type char [mem: Local loc: -41 size: 31] [line: 11]
.   .   .   Child: 1  Const "reconnaissance" of array of type char [mem: Global loc: -15 size: 15] [line: 11]
.   .   Sibling: 2  Compound [mem: None loc: 0 size: -72] [line: 13]
.   .   .   Child: 0  Var: p of type int [mem: Local loc: -71 size: 1] [line: 13]
.   .   Sibling: 3  Compound [mem: None loc: 0 size: -72] [line: 14]
.   .   .   Child: 0  Var: q of type int [mem: Local loc: -71 size: 1] [line: 14]
Sibling: 3  Var: h of type int [mem: Global loc: -29 size: 1] [line: 17]
Sibling: 4  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 19]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 19]
Offset for end of global space: -30
Number of warnings: 14
Number of errors: 0

==============
==============
./c- -M mem.c-
WARNING(7): The variable 'z' seems not to be used.
ERROR(14): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(15): '<=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
WARNING(23): The variable 'bb' seems not to be used.
WARNING(24): The variable 'c' seems not to be used.
Number of warnings: 3
Number of errors: 2

==============
==============
./c- -M memcall.c-
WARNING(3): The parameter 'x' seems not to be used.
WARNING(15): The variable 'x' seems not to be used.
Func: yvonne returns type void [mem: Global loc: 0 size: -3] [line: 3]
.   Child: 0  Parm: x of type int [mem: Parameter loc: -2 size: 1] [line: 3]
.   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 4]
.   .   Child: 0  Var: y of type int [mem: Local loc: -3 size: 1] [line: 5]
.   .   Child: 1  Assign: <= of type int [line: 6]
.   .   .   Child: 0  Id: y of type int [mem: Local loc: -3 size: 1] [line: 6]
.   .   .   Child: 1  Const 11111 of type int [line: 6]
Sibling: 1  Func: louise returns type int [mem: Global loc: 0 size: -3] [line: 9]
.   Child: 0  Parm: x of type int [mem: Parameter loc: -2 size: 1] [line: 9]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 9]
.   .   Child: 1  Return [line: 9]
.   .   .   Child: 0  Op: * of type int [line: 9]
.   .   .   .   Child: 0  Const 101 of type int [line: 9]
.   .   .   .   Child: 1  Id: x of type int [mem: Parameter loc: -2 size: 1] [line: 9]
Sibling: 2  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 11]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 12]
.   .   Child: 0  Var: z of type int [mem: Local loc: -2 size: 1] [line: 13]
.   .   Child: 1  Assign: <= of type int [line: 14]
.   .   .   Child: 0  Id: z of type int [mem: Local loc: -2 size: 1] [line: 14]
.   .   .   Child: 1  Const 22222 of type int [line: 14]
.   .   Sibling: 1  Compound [mem: None loc: 0 size: -9] [line: 15]
.   .   .   Child: 0  Var: x of array of type int [mem: Local loc: -4 size: 6] [line: 15]
.   .   .   Child: 1  Call: yvonne of type void [line: 16]
.   .   .   .   Child: 0  Const 11 of type int [line: 16]
.   .   Sibling: 2  Call: yvonne of type void [line: 18]
.   .   .   Child: 0  Const 101 of type int [line: 18]
.   .   Sibling: 3  Assign: <= of type int [line: 20]
.   .   .   Child: 0  Id: z of type int [mem: Local loc: -2 size: 1] [line: 20]
.   .   .   Child: 1  Op: + of type int [line: 20]
.   .   .   .   Child: 0  Op: * of type int [line: 20]
.   .   .   .   .   Child: 0  Const 451 of type int [line: 20]
.   .   .   .   .   Child: 1  Const 8 of type int [line: 20]
.   .   .   .   Child: 1  Call: louise of type int [line: 20]
.   .   .   .   .   Child: 0  Const 33 of type int [line: 20]
Offset for end of global space: 0
Number of warnings: 2
Number of errors: 0

==============
==============
./c- -M memory2.c-
WARNING(8): The parameter 'b' seems not to be used.
WARNING(19): The variable 'ai' seems not to be used.
WARNING(20): The variable 'ab' seems not to be used.
WARNING(23): Variable 'b' may be uninitialized when used here.
WARNING(23): Variable 'i' may be uninitialized when used here.
Var: u of type int [mem: Global loc: 0 size: 1] [line: 5]
Sibling: 1  Var: v of array of type bool [mem: Global loc: -2 size: 5] [line: 6]
Sibling: 2  Func: polgara returns type int [mem: Global loc: 0 size: -4] [line: 8]
.   Child: 0  Parm: a of type int [mem: Parameter loc: -2 size: 1] [line: 8]
.   Sibling: 1  Parm: b of type bool [mem: Parameter loc: -3 size: 1] [line: 8]
.   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 9]
.   .   Child: 0  Var: x of type int [mem: Local loc: -4 size: 1] [line: 10]
.   .   Child: 1  Assign: <= of type int [line: 11]
.   .   .   Child: 0  Id: x of type int [mem: Local loc: -4 size: 1] [line: 11]
.   .   .   Child: 1  Id: a of type int [mem: Parameter loc: -2 size: 1] [line: 11]
.   .   Sibling: 1  Return [line: 12]
.   .   .   Child: 0  Id: x of type int [mem: Local loc: -4 size: 1] [line: 12]
Sibling: 3  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 15]
.   Child: 1  Compound [mem: None loc: 0 size: -12] [line: 16]
.   .   Child: 0  Var: i of type int [mem: Local loc: -2 size: 1] [line: 17]
.   .   Sibling: 1  Var: b of type bool [mem: Local loc: -3 size: 1] [line: 18]
.   .   Sibling: 2  Var: ai of array of type int [mem: Local loc: -5 size: 4] [line: 19]
.   .   Sibling: 3  Var: ab of array of type bool [mem: Local loc: -9 size: 3] [line: 20]
.   .   Sibling: 4  Var: z of type int [mem: Local loc: -11 size: 1] [line: 21]
.   .   Child: 1  Assign: <= of type int [line: 23]
.   .   .   Child: 0  Id: z of type int [mem: Local loc: -11 size: 1] [line: 23]
.   .   .   Child: 1  Call: polgara of type int [line: 23]
.   .   .   .   Child: 0  Op: + of type int [line: 23]
.   .   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -2 size: 1] [line: 23]
.   .   .   .   .   Child: 1  Const 43 of type int [line: 23]
.   .   .   .   Sibling: 1  Id: b of type bool [mem: Local loc: -3 size: 1] [line: 23]
.   .   Sibling: 1  Assign: <= of type int [line: 25]
.   .   .   Child: 0  Id: u of type int [mem: Global loc: 0 size: 1] [line: 25]
.   .   .   Child: 1  Const 666 of type int [line: 25]
.   .   Sibling: 2  Assign: <= of type bool [line: 26]
.   .   .   Child: 0  Op: [ of type bool [line: 26]
.   .   .   .   Child: 0  Id: v of array of type bool [mem: Global loc: -2 size: 5] [line: 26]
.   .   .   .   Child: 1  Const 3 of type int [line: 26]
.   .   .   Child: 1  Const true of type bool [line: 26]
Offset for end of global space: -6
Number of warnings: 5
Number of errors: 0

==============
==============
./c- -M memory.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(2): The variable 'h' seems not to be used.
WARNING(3): The variable 'ee' seems not to be used.
WARNING(5): The parameter 'x' seems not to be used.
WARNING(5): The parameter 'y' seems not to be used.
WARNING(5): The parameter 'z' seems not to be used.
WARNING(7): The variable 'bat' seems not to be used.
WARNING(9): The parameter 'x' seems not to be used.
WARNING(9): The parameter 'y' seems not to be used.
WARNING(9): The parameter 'z' seems not to be used.
WARNING(10): The variable 'd' seems not to be used.
ERROR(23): '<=' requires operands of the same type but lhs is type char and rhs is type int.
WARNING(26): The variable 'tmp' seems not to be used.
ERROR(28): '<=' requires operands of the same type but lhs is type char and rhs is type int.
WARNING(34): The variable 'cow' seems not to be used.
Number of warnings: 12
Number of errors: 3

==============
==============
./c- -M memtype.c-
WARNING(1): The variable 'g' seems not to be used.
WARNING(2): The function 'dog' seems not to be used.
WARNING(2): The parameter 'p' seems not to be used.
WARNING(4): The variable 's' seems not to be used.
WARNING(5): The variable 'i' seems not to be used.
Var: g of type int [mem: Global loc: 0 size: 1] [line: 1]
Sibling: 1  Func: dog returns type void [mem: Global loc: 0 size: -3] [line: 2]
.   Child: 0  Parm: p of type int [mem: Parameter loc: -2 size: 1] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 3]
.   .   Child: 0  Var: s of static type int [mem: LocalStatic loc: -1 size: 1] [line: 4]
.   .   Sibling: 1  Var: i of type int [mem: Local loc: -3 size: 1] [line: 5]
Sibling: 2  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 8]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 8]
Offset for end of global space: -2
Number of warnings: 5
Number of errors: 0

==============
==============
./c- -M minus.c-
Func: main returns type void [mem: Global loc: 0 size: -2] [line: 1]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 2]
.   .   Child: 0  Var: x of type int [mem: Local loc: -2 size: 1] [line: 3]
.   .   Child: 1  Assign: <= of type int [line: 5]
.   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 5]
.   .   .   Child: 1  Const 333 of type int [line: 5]
.   .   Sibling: 1  Assign: <= of type int [line: 6]
.   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 6]
.   .   .   Child: 1  Op: - of type int [line: 6]
.   .   .   .   Child: 0  Op: chsign of type int [line: 6]
.   .   .   .   .   Child: 0  Const 22 of type int [line: 6]
.   .   .   .   Child: 1  Op: chsign of type int [line: 6]
.   .   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 6]
.   .   Sibling: 2  Assign: <= of type int [line: 7]
.   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 7]
.   .   .   Child: 1  Op: + of type int [line: 7]
.   .   .   .   Child: 0  Const 4 of type int [line: 7]
.   .   .   .   Child: 1  Op: chsign of type int [line: 7]
.   .   .   .   .   Child: 0  Op: - of type int [line: 7]
.   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 7]
.   .   .   .   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 7]
.   .   .   .   .   .   Child: 1  Op: chsign of type int [line: 7]
.   .   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 7]
.   .   .   .   .   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 7]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M mixed.c-
WARNING(2): The variable 'c' seems not to be used.
WARNING(14): The parameter 'c' seems not to be used.
ERROR(25): Symbol 'thelma' is already declared at line 14.
WARNING(25): Expecting to return type int but function 'thelma' has no return statement.
WARNING(25): The parameter 'c' seems not to be used.
WARNING(27): The variable 'zz' seems not to be used.
ERROR(29): Expecting array in parameter 2 of call to 'thelma' declared on line 14.
Number of warnings: 5
Number of errors: 2

==============
==============
./c- -M mixedControl2.c-
ERROR(4): Expecting Boolean test condition in if statement but got type int.
ERROR(5): Expecting Boolean test condition in while statement but got type int.
ERROR(6): Expecting Boolean test condition in if statement but got type int.
ERROR(7): Expecting Boolean test condition in while statement but got type int.
ERROR(11): Expecting Boolean test condition in if statement but got type int.
ERROR(12): Expecting Boolean test condition in while statement but got type int.
ERROR(14): Expecting Boolean test condition in while statement but got type int.
ERROR(16): Expecting Boolean test condition in if statement but got type int.
ERROR(17): Expecting Boolean test condition in while statement but got type int.
ERROR(18): Expecting Boolean test condition in while statement but got type int.
Number of warnings: 0
Number of errors: 10

==============
==============
./c- -M mixedControl3.c-
WARNING(4): The variable 'x' seems not to be used.
ERROR(6): Expecting Boolean test condition in if statement but got type int.
ERROR(8): Expecting Boolean test condition in if statement but got type int.
ERROR(13): Expecting Boolean test condition in if statement but got type int.
ERROR(18): Expecting Boolean test condition in if statement but got type int.
WARNING(19): The variable 'x' seems not to be used.
Number of warnings: 2
Number of errors: 4

==============
==============
./c- -M mixedControl.c-
WARNING(6): Variable 'x' may be uninitialized when used here.
WARNING(8): Variable 'y' may be uninitialized when used here.
WARNING(11): Variable 'z' may be uninitialized when used here.
Func: main returns type void [mem: Global loc: 0 size: -2] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 3]
.   .   Child: 0  Var: x of type int [mem: Local loc: -2 size: 1] [line: 4]
.   .   Sibling: 1  Var: y of type int [mem: Local loc: -3 size: 1] [line: 4]
.   .   Sibling: 2  Var: z of type int [mem: Local loc: -4 size: 1] [line: 4]
.   .   Child: 1  If [line: 6]
.   .   .   Child: 0  Op: !< of type bool [line: 6]
.   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 6]
.   .   .   .   Child: 1  Const 0 of type int [line: 6]
.   .   .   Child: 1  While [line: 7]
.   .   .   .   Child: 0  Const true of type bool [line: 7]
.   .   .   .   Child: 1  Id: x of type int [mem: Local loc: -2 size: 1] [line: 7]
.   .   .   Child: 2  Id: y of type int [mem: Local loc: -3 size: 1] [line: 8]
.   .   Sibling: 1  Const 111 of type int [line: 9]
.   .   Sibling: 2  If [line: 10]
.   .   .   Child: 0  Op: !< of type bool [line: 10]
.   .   .   .   Child: 0  Id: y of type int [mem: Local loc: -3 size: 1] [line: 10]
.   .   .   .   Child: 1  Const 0 of type int [line: 10]
.   .   .   Child: 1  Id: y of type int [mem: Local loc: -3 size: 1] [line: 10]
.   .   .   Child: 2  While [line: 11]
.   .   .   .   Child: 0  Const true of type bool [line: 11]
.   .   .   .   Child: 1  Id: z of type int [mem: Local loc: -4 size: 1] [line: 11]
.   .   Sibling: 3  Const 222 of type int [line: 12]
.   .   Sibling: 4  If [line: 13]
.   .   .   Child: 0  Op: !< of type bool [line: 13]
.   .   .   .   Child: 0  Id: y of type int [mem: Local loc: -3 size: 1] [line: 13]
.   .   .   .   Child: 1  Const 0 of type int [line: 13]
.   .   .   Child: 1  Id: y of type int [mem: Local loc: -3 size: 1] [line: 13]
.   .   Sibling: 5  While [line: 14]
.   .   .   Child: 0  Const true of type bool [line: 14]
.   .   .   Child: 1  If [line: 15]
.   .   .   .   Child: 0  Const true of type bool [line: 15]
.   .   .   .   Child: 1  Id: z of type int [mem: Local loc: -4 size: 1] [line: 15]
.   .   .   .   Child: 2  Id: x of type int [mem: Local loc: -2 size: 1] [line: 16]
.   .   Sibling: 6  Const 333 of type int [line: 17]
.   .   Sibling: 7  If [line: 18]
.   .   .   Child: 0  Op: !< of type bool [line: 18]
.   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 18]
.   .   .   .   Child: 1  Const 0 of type int [line: 18]
.   .   .   Child: 1  While [line: 19]
.   .   .   .   Child: 0  Const true of type bool [line: 19]
.   .   .   .   Child: 1  If [line: 20]
.   .   .   .   .   Child: 0  Const true of type bool [line: 20]
.   .   .   .   .   Child: 1  Id: x of type int [mem: Local loc: -2 size: 1] [line: 20]
.   .   .   .   .   Child: 2  Id: y of type int [mem: Local loc: -3 size: 1] [line: 21]
.   .   .   Child: 2  Id: z of type int [mem: Local loc: -4 size: 1] [line: 22]
.   .   Sibling: 8  Const 444 of type int [line: 23]
.   .   Sibling: 9  If [line: 24]
.   .   .   Child: 0  Op: !< of type bool [line: 24]
.   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 24]
.   .   .   .   Child: 1  Const 0 of type int [line: 24]
.   .   .   Child: 1  Id: z of type int [mem: Local loc: -4 size: 1] [line: 24]
.   .   .   Child: 2  If [line: 26]
.   .   .   .   Child: 0  Const true of type bool [line: 26]
.   .   .   .   Child: 1  While [line: 27]
.   .   .   .   .   Child: 0  Const true of type bool [line: 27]
.   .   .   .   .   Child: 1  If [line: 28]
.   .   .   .   .   .   Child: 0  Const true of type bool [line: 28]
.   .   .   .   .   .   Child: 1  Id: x of type int [mem: Local loc: -2 size: 1] [line: 28]
.   .   .   .   .   .   Child: 2  Id: y of type int [mem: Local loc: -3 size: 1] [line: 29]
.   .   .   .   Child: 2  Id: z of type int [mem: Local loc: -4 size: 1] [line: 30]
Offset for end of global space: 0
Number of warnings: 3
Number of errors: 0

==============
==============
./c- -M nano.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(1): The parameter 'x' seems not to be used.
ERROR(3): Too many parameters passed for function 'main' declared on line 1.
Number of warnings: 1
Number of errors: 2

==============
==============
./c- -M nest.c-
Var: x of type int [mem: Global loc: 0 size: 1] [line: 3]
Sibling: 1  Var: y of type int [mem: Global loc: -1 size: 1] [line: 4]
Sibling: 2  Var: z of type int [mem: Global loc: -2 size: 1] [line: 5]
Sibling: 3  Func: agamemnon returns type void [mem: Global loc: 0 size: -2] [line: 7]
.   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 8]
.   .   Child: 0  Var: a of type int [mem: Local loc: -2 size: 1] [line: 9]
.   .   Sibling: 1  Var: b of type int [mem: Local loc: -3 size: 1] [line: 10]
.   .   Sibling: 2  Var: x of type int [mem: Local loc: -4 size: 1] [line: 11]
.   .   Child: 1  Assign: <= of type int [line: 13]
.   .   .   Child: 0  Id: a of type int [mem: Local loc: -2 size: 1] [line: 13]
.   .   .   Child: 1  Const 666 of type int [line: 13]
.   .   Sibling: 1  Assign: <= of type int [line: 14]
.   .   .   Child: 0  Id: b of type int [mem: Local loc: -3 size: 1] [line: 14]
.   .   .   Child: 1  Const 666 of type int [line: 14]
.   .   Sibling: 2  Assign: <= of type int [line: 15]
.   .   .   Child: 0  Id: x of type int [mem: Local loc: -4 size: 1] [line: 15]
.   .   .   Child: 1  Const 666 of type int [line: 15]
.   .   Sibling: 3  Assign: <= of type int [line: 16]
.   .   .   Child: 0  Id: z of type int [mem: Global loc: -2 size: 1] [line: 16]
.   .   .   Child: 1  Const 666 of type int [line: 16]
.   .   Sibling: 4  Call: output of type void [line: 18]
.   .   .   Child: 0  Id: a of type int [mem: Local loc: -2 size: 1] [line: 18]
.   .   Sibling: 5  Call: output of type void [line: 19]
.   .   .   Child: 0  Id: b of type int [mem: Local loc: -3 size: 1] [line: 19]
.   .   Sibling: 6  Call: output of type void [line: 20]
.   .   .   Child: 0  Id: x of type int [mem: Local loc: -4 size: 1] [line: 20]
.   .   Sibling: 7  Call: output of type void [line: 21]
.   .   .   Child: 0  Id: y of type int [mem: Global loc: -1 size: 1] [line: 21]
.   .   Sibling: 8  Call: output of type void [line: 22]
.   .   .   Child: 0  Id: z of type int [mem: Global loc: -2 size: 1] [line: 22]
.   .   Sibling: 9  Call: outnl of type void [line: 23]
.   .   Sibling: 10  Assign: <= of type int [line: 24]
.   .   .   Child: 0  Id: a of type int [mem: Local loc: -2 size: 1] [line: 24]
.   .   .   Child: 1  Const 1 of type int [line: 24]
.   .   Sibling: 11  Assign: <= of type int [line: 25]
.   .   .   Child: 0  Id: b of type int [mem: Local loc: -3 size: 1] [line: 25]
.   .   .   Child: 1  Const 2 of type int [line: 25]
.   .   Sibling: 12  Assign: <= of type int [line: 26]
.   .   .   Child: 0  Id: x of type int [mem: Local loc: -4 size: 1] [line: 26]
.   .   .   Child: 1  Const 3 of type int [line: 26]
.   .   Sibling: 13  Assign: <= of type int [line: 27]
.   .   .   Child: 0  Id: y of type int [mem: Global loc: -1 size: 1] [line: 27]
.   .   .   Child: 1  Const 4 of type int [line: 27]
.   .   Sibling: 14  Assign: <= of type int [line: 28]
.   .   .   Child: 0  Id: z of type int [mem: Global loc: -2 size: 1] [line: 28]
.   .   .   Child: 1  Const 5 of type int [line: 28]
Sibling: 4  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 31]
.   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 32]
.   .   Child: 0  Var: a of type int [mem: Local loc: -2 size: 1] [line: 33]
.   .   Sibling: 1  Var: b of type int [mem: Local loc: -3 size: 1] [line: 34]
.   .   Sibling: 2  Var: z of type int [mem: Local loc: -4 size: 1] [line: 35]
.   .   Child: 1  Assign: <= of type int [line: 37]
.   .   .   Child: 0  Id: a of type int [mem: Local loc: -2 size: 1] [line: 37]
.   .   .   Child: 1  Const 6 of type int [line: 37]
.   .   Sibling: 1  Assign: <= of type int [line: 38]
.   .   .   Child: 0  Id: b of type int [mem: Local loc: -3 size: 1] [line: 38]
.   .   .   Child: 1  Const 7 of type int [line: 38]
.   .   Sibling: 2  Assign: <= of type int [line: 39]
.   .   .   Child: 0  Id: x of type int [mem: Global loc: 0 size: 1] [line: 39]
.   .   .   Child: 1  Const 8 of type int [line: 39]
.   .   Sibling: 3  Assign: <= of type int [line: 40]
.   .   .   Child: 0  Id: y of type int [mem: Global loc: -1 size: 1] [line: 40]
.   .   .   Child: 1  Const 9 of type int [line: 40]
.   .   Sibling: 4  Assign: <= of type int [line: 41]
.   .   .   Child: 0  Id: z of type int [mem: Local loc: -4 size: 1] [line: 41]
.   .   .   Child: 1  Const 10 of type int [line: 41]
.   .   Sibling: 5  Call: output of type void [line: 43]
.   .   .   Child: 0  Id: a of type int [mem: Local loc: -2 size: 1] [line: 43]
.   .   Sibling: 6  Call: output of type void [line: 44]
.   .   .   Child: 0  Id: b of type int [mem: Local loc: -3 size: 1] [line: 44]
.   .   Sibling: 7  Call: output of type void [line: 45]
.   .   .   Child: 0  Id: x of type int [mem: Global loc: 0 size: 1] [line: 45]
.   .   Sibling: 8  Call: output of type void [line: 46]
.   .   .   Child: 0  Id: y of type int [mem: Global loc: -1 size: 1] [line: 46]
.   .   Sibling: 9  Call: output of type void [line: 47]
.   .   .   Child: 0  Id: z of type int [mem: Local loc: -4 size: 1] [line: 47]
.   .   Sibling: 10  Call: outnl of type void [line: 48]
.   .   Sibling: 11  Compound [mem: None loc: 0 size: -8] [line: 49]
.   .   .   Child: 0  Var: a of type int [mem: Local loc: -5 size: 1] [line: 50]
.   .   .   Sibling: 1  Var: b of type int [mem: Local loc: -6 size: 1] [line: 51]
.   .   .   Sibling: 2  Var: z of type int [mem: Local loc: -7 size: 1] [line: 52]
.   .   .   Child: 1  Assign: <= of type int [line: 54]
.   .   .   .   Child: 0  Id: a of type int [mem: Local loc: -5 size: 1] [line: 54]
.   .   .   .   Child: 1  Const 666 of type int [line: 54]
.   .   .   Sibling: 1  Assign: <= of type int [line: 55]
.   .   .   .   Child: 0  Id: b of type int [mem: Local loc: -6 size: 1] [line: 55]
.   .   .   .   Child: 1  Const 666 of type int [line: 55]
.   .   .   Sibling: 2  Assign: <= of type int [line: 56]
.   .   .   .   Child: 0  Id: z of type int [mem: Local loc: -7 size: 1] [line: 56]
.   .   .   .   Child: 1  Const 666 of type int [line: 56]
.   .   .   Sibling: 3  Call: output of type void [line: 58]
.   .   .   .   Child: 0  Id: a of type int [mem: Local loc: -5 size: 1] [line: 58]
.   .   .   Sibling: 4  Call: output of type void [line: 59]
.   .   .   .   Child: 0  Id: b of type int [mem: Local loc: -6 size: 1] [line: 59]
.   .   .   Sibling: 5  Call: output of type void [line: 60]
.   .   .   .   Child: 0  Id: x of type int [mem: Global loc: 0 size: 1] [line: 60]
.   .   .   Sibling: 6  Call: output of type void [line: 61]
.   .   .   .   Child: 0  Id: y of type int [mem: Global loc: -1 size: 1] [line: 61]
.   .   .   Sibling: 7  Call: output of type void [line: 62]
.   .   .   .   Child: 0  Id: z of type int [mem: Local loc: -7 size: 1] [line: 62]
.   .   .   Sibling: 8  Call: outnl of type void [line: 63]
.   .   .   Sibling: 9  Assign: <= of type int [line: 65]
.   .   .   .   Child: 0  Id: a of type int [mem: Local loc: -5 size: 1] [line: 65]
.   .   .   .   Child: 1  Const 11 of type int [line: 65]
.   .   .   Sibling: 10  Assign: <= of type int [line: 66]
.   .   .   .   Child: 0  Id: b of type int [mem: Local loc: -6 size: 1] [line: 66]
.   .   .   .   Child: 1  Const 12 of type int [line: 66]
.   .   .   Sibling: 11  Assign: <= of type int [line: 67]
.   .   .   .   Child: 0  Id: x of type int [mem: Global loc: 0 size: 1] [line: 67]
.   .   .   .   Child: 1  Const 13 of type int [line: 67]
.   .   .   Sibling: 12  Assign: <= of type int [line: 68]
.   .   .   .   Child: 0  Id: y of type int [mem: Global loc: -1 size: 1] [line: 68]
.   .   .   .   Child: 1  Const 14 of type int [line: 68]
.   .   .   Sibling: 13  Assign: <= of type int [line: 69]
.   .   .   .   Child: 0  Id: z of type int [mem: Local loc: -7 size: 1] [line: 69]
.   .   .   .   Child: 1  Const 15 of type int [line: 69]
.   .   .   Sibling: 14  Call: output of type void [line: 70]
.   .   .   .   Child: 0  Id: a of type int [mem: Local loc: -5 size: 1] [line: 70]
.   .   .   Sibling: 15  Call: output of type void [line: 71]
.   .   .   .   Child: 0  Id: b of type int [mem: Local loc: -6 size: 1] [line: 71]
.   .   .   Sibling: 16  Call: output of type void [line: 72]
.   .   .   .   Child: 0  Id: x of type int [mem: Global loc: 0 size: 1] [line: 72]
.   .   .   Sibling: 17  Call: output of type void [line: 73]
.   .   .   .   Child: 0  Id: y of type int [mem: Global loc: -1 size: 1] [line: 73]
.   .   .   Sibling: 18  Call: output of type void [line: 74]
.   .   .   .   Child: 0  Id: z of type int [mem: Local loc: -7 size: 1] [line: 74]
.   .   .   Sibling: 19  Call: outnl of type void [line: 75]
.   .   .   Sibling: 20  Compound [mem: None loc: 0 size: -8] [line: 76]
.   .   .   .   Child: 1  Call: output of type void [line: 77]
.   .   .   .   .   Child: 0  Id: a of type int [mem: Local loc: -5 size: 1] [line: 77]
.   .   .   .   Sibling: 1  Call: output of type void [line: 78]
.   .   .   .   .   Child: 0  Id: b of type int [mem: Local loc: -6 size: 1] [line: 78]
.   .   .   .   Sibling: 2  Call: output of type void [line: 79]
.   .   .   .   .   Child: 0  Id: x of type int [mem: Global loc: 0 size: 1] [line: 79]
.   .   .   .   Sibling: 3  Call: output of type void [line: 80]
.   .   .   .   .   Child: 0  Id: y of type int [mem: Global loc: -1 size: 1] [line: 80]
.   .   .   .   Sibling: 4  Call: output of type void [line: 81]
.   .   .   .   .   Child: 0  Id: z of type int [mem: Local loc: -7 size: 1] [line: 81]
.   .   .   .   Sibling: 5  Call: outnl of type void [line: 82]
.   .   .   .   Sibling: 6  Assign: <= of type int [line: 84]
.   .   .   .   .   Child: 0  Id: a of type int [mem: Local loc: -5 size: 1] [line: 84]
.   .   .   .   .   Child: 1  Const 16 of type int [line: 84]
.   .   .   .   Sibling: 7  Assign: <= of type int [line: 85]
.   .   .   .   .   Child: 0  Id: b of type int [mem: Local loc: -6 size: 1] [line: 85]
.   .   .   .   .   Child: 1  Const 17 of type int [line: 85]
.   .   .   .   Sibling: 8  Assign: <= of type int [line: 86]
.   .   .   .   .   Child: 0  Id: x of type int [mem: Global loc: 0 size: 1] [line: 86]
.   .   .   .   .   Child: 1  Const 18 of type int [line: 86]
.   .   .   .   Sibling: 9  Assign: <= of type int [line: 87]
.   .   .   .   .   Child: 0  Id: y of type int [mem: Global loc: -1 size: 1] [line: 87]
.   .   .   .   .   Child: 1  Const 19 of type int [line: 87]
.   .   .   .   Sibling: 10  Assign: <= of type int [line: 88]
.   .   .   .   .   Child: 0  Id: z of type int [mem: Local loc: -7 size: 1] [line: 88]
.   .   .   .   .   Child: 1  Const 20 of type int [line: 88]
.   .   .   .   Sibling: 11  Call: output of type void [line: 89]
.   .   .   .   .   Child: 0  Id: a of type int [mem: Local loc: -5 size: 1] [line: 89]
.   .   .   .   Sibling: 12  Call: output of type void [line: 90]
.   .   .   .   .   Child: 0  Id: b of type int [mem: Local loc: -6 size: 1] [line: 90]
.   .   .   .   Sibling: 13  Call: output of type void [line: 91]
.   .   .   .   .   Child: 0  Id: x of type int [mem: Global loc: 0 size: 1] [line: 91]
.   .   .   .   Sibling: 14  Call: output of type void [line: 92]
.   .   .   .   .   Child: 0  Id: y of type int [mem: Global loc: -1 size: 1] [line: 92]
.   .   .   .   Sibling: 15  Call: output of type void [line: 93]
.   .   .   .   .   Child: 0  Id: z of type int [mem: Local loc: -7 size: 1] [line: 93]
.   .   .   .   Sibling: 16  Call: outnl of type void [line: 94]
.   .   .   Sibling: 21  Call: output of type void [line: 97]
.   .   .   .   Child: 0  Id: a of type int [mem: Local loc: -5 size: 1] [line: 97]
.   .   .   Sibling: 22  Call: output of type void [line: 98]
.   .   .   .   Child: 0  Id: b of type int [mem: Local loc: -6 size: 1] [line: 98]
.   .   .   Sibling: 23  Call: output of type void [line: 99]
.   .   .   .   Child: 0  Id: x of type int [mem: Global loc: 0 size: 1] [line: 99]
.   .   .   Sibling: 24  Call: output of type void [line: 100]
.   .   .   .   Child: 0  Id: y of type int [mem: Global loc: -1 size: 1] [line: 100]
.   .   .   Sibling: 25  Call: output of type void [line: 101]
.   .   .   .   Child: 0  Id: z of type int [mem: Local loc: -7 size: 1] [line: 101]
.   .   .   Sibling: 26  Call: outnl of type void [line: 102]
.   .   .   Sibling: 27  Call: agamemnon of type void [line: 104]
.   .   .   Sibling: 28  Call: output of type void [line: 106]
.   .   .   .   Child: 0  Id: a of type int [mem: Local loc: -5 size: 1] [line: 106]
.   .   .   Sibling: 29  Call: output of type void [line: 107]
.   .   .   .   Child: 0  Id: b of type int [mem: Local loc: -6 size: 1] [line: 107]
.   .   .   Sibling: 30  Call: output of type void [line: 108]
.   .   .   .   Child: 0  Id: x of type int [mem: Global loc: 0 size: 1] [line: 108]
.   .   .   Sibling: 31  Call: output of type void [line: 109]
.   .   .   .   Child: 0  Id: y of type int [mem: Global loc: -1 size: 1] [line: 109]
.   .   .   Sibling: 32  Call: output of type void [line: 110]
.   .   .   .   Child: 0  Id: z of type int [mem: Local loc: -7 size: 1] [line: 110]
.   .   .   Sibling: 33  Call: outnl of type void [line: 111]
Offset for end of global space: -3
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M nested.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(1): The function 'fred' seems not to be used.
WARNING(3): The variable 'i' seems not to be used.
WARNING(4): The variable 'i' seems not to be used.
WARNING(6): The variable 'i' seems not to be used.
WARNING(8): The variable 'i' seems not to be used.
WARNING(12): The function 'cat' seems not to be used.
WARNING(12): The parameter 'i' seems not to be used.
WARNING(14): The variable 'i' seems not to be used.
WARNING(18): The function 'errorZ' seems not to be used.
WARNING(18): The parameter 'i' seems not to be used.
ERROR(19): Symbol 'i' is already declared at line 18.
WARNING(21): The variable 'i' seems not to be used.
WARNING(24): The variable 'i' seems not to be used.
WARNING(28): The variable 'i' seems not to be used.
ERROR(30): Symbol 'i' is already declared at line 28.
Number of warnings: 13
Number of errors: 3

==============
==============
./c- -M nestedfors.c-
WARNING(7): The variable 'j' seems not to be used.
Func: main returns type void [mem: Global loc: 0 size: -2] [line: 1]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 2]
.   .   Child: 0  Var: n of type int [mem: Local loc: -2 size: 1] [line: 3]
.   .   Child: 1  Assign: <= of type int [line: 5]
.   .   .   Child: 0  Id: n of type int [mem: Local loc: -2 size: 1] [line: 5]
.   .   .   Child: 1  Const 0 of type int [line: 5]
.   .   Sibling: 1  For [mem: None loc: 0 size: -4] [line: 6]
.   .   .   Child: 0  Var: i of type int [mem: Local loc: -3 size: 1] [line: 6]
.   .   .   Child: 1  Range [line: 6]
.   .   .   .   Child: 0  Const 1 of type int [line: 6]
.   .   .   .   Child: 1  Const 10 of type int [line: 6]
.   .   .   Child: 2  Compound [mem: None loc: 0 size: -4] [line: 6]
.   .   .   .   Child: 1  For [mem: None loc: 0 size: -5] [line: 7]
.   .   .   .   .   Child: 0  Var: j of type int [mem: Local loc: -4 size: 1] [line: 7]
.   .   .   .   .   Child: 1  Range [line: 7]
.   .   .   .   .   .   Child: 0  Const 1 of type int [line: 7]
.   .   .   .   .   .   Child: 1  Id: i of type int [mem: Local loc: -3 size: 1] [line: 7]
.   .   .   .   .   Child: 2  Assign: ++ of type int [line: 7]
.   .   .   .   .   .   Child: 0  Id: n of type int [mem: Local loc: -2 size: 1] [line: 7]
.   .   .   .   Sibling: 1  Call: output of type void [line: 8]
.   .   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -3 size: 1] [line: 8]
.   .   .   .   Sibling: 2  Call: output of type void [line: 9]
.   .   .   .   .   Child: 0  Id: n of type int [mem: Local loc: -2 size: 1] [line: 9]
.   .   .   .   Sibling: 3  Call: outnl of type void [line: 10]
Offset for end of global space: 0
Number of warnings: 1
Number of errors: 0

==============
==============
./c- -M nestedmem.c-
WARNING(5): The variable 'i' seems not to be used.
WARNING(8): The variable 'i' seems not to be used.
WARNING(13): The variable 'i' seems not to be used.
WARNING(18): The variable 'i' seems not to be used.
WARNING(19): The variable 'z' seems not to be used.
WARNING(24): The variable 'z' seems not to be used.
WARNING(29): The parameter 'i' seems not to be used.
WARNING(37): The variable 'ii' seems not to be used.
WARNING(48): The variable 'i' seems not to be used.
Func: fred returns type void [mem: Global loc: 0 size: -2] [line: 3]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 4]
.   .   Child: 1  For [mem: None loc: 0 size: -3] [line: 5]
.   .   .   Child: 0  Var: i of type int [mem: Local loc: -2 size: 1] [line: 5]
.   .   .   Child: 1  Range [line: 5]
.   .   .   .   Child: 0  Const 1 of type int [line: 5]
.   .   .   .   Child: 1  Const 10 of type int [line: 5]
.   .   .   Child: 2  For [mem: None loc: 0 size: -4] [line: 6]
.   .   .   .   Child: 0  Var: i of type int [mem: Local loc: -3 size: 1] [line: 6]
.   .   .   .   Child: 1  Range [line: 6]
.   .   .   .   .   Child: 0  Const 1 of type int [line: 6]
.   .   .   .   .   Child: 1  Const 10 of type int [line: 6]
.   .   .   .   Child: 2  Assign: <= of type int [line: 7]
.   .   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -3 size: 1] [line: 7]
.   .   .   .   .   Child: 1  Const 0 of type int [line: 7]
.   .   Sibling: 1  For [mem: None loc: 0 size: -3] [line: 8]
.   .   .   Child: 0  Var: i of type int [mem: Local loc: -2 size: 1] [line: 8]
.   .   .   Child: 1  Range [line: 8]
.   .   .   .   Child: 0  Const 1 of type int [line: 8]
.   .   .   .   Child: 1  Const 10 of type int [line: 8]
.   .   .   Child: 2  If [line: 9]
.   .   .   .   Child: 0  Const true of type bool [line: 9]
.   .   .   .   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 9]
.   .   .   .   .   Child: 0  Var: i of type int [mem: Local loc: -3 size: 1] [line: 10]
.   .   .   .   .   Child: 1  Assign: <= of type int [line: 11]
.   .   .   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -3 size: 1] [line: 11]
.   .   .   .   .   .   Child: 1  Const 0 of type int [line: 11]
.   .   Sibling: 2  For [mem: None loc: 0 size: -3] [line: 13]
.   .   .   Child: 0  Var: i of type int [mem: Local loc: -2 size: 1] [line: 13]
.   .   .   Child: 1  Range [line: 13]
.   .   .   .   Child: 0  Const 1 of type int [line: 13]
.   .   .   .   Child: 1  Const 10 of type int [line: 13]
.   .   .   Child: 2  While [line: 14]
.   .   .   .   Child: 0  Const false of type bool [line: 14]
.   .   .   .   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 14]
.   .   .   .   .   Child: 0  Var: i of type int [mem: Local loc: -3 size: 1] [line: 15]
.   .   .   .   .   Child: 1  Assign: <= of type int [line: 16]
.   .   .   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -3 size: 1] [line: 16]
.   .   .   .   .   .   Child: 1  Const 0 of type int [line: 16]
.   .   Sibling: 3  For [mem: None loc: 0 size: -3] [line: 18]
.   .   .   Child: 0  Var: i of type int [mem: Local loc: -2 size: 1] [line: 18]
.   .   .   Child: 1  Range [line: 18]
.   .   .   .   Child: 0  Const 1 of type int [line: 18]
.   .   .   .   Child: 1  Const 10 of type int [line: 18]
.   .   .   Child: 2  For [mem: None loc: 0 size: -4] [line: 19]
.   .   .   .   Child: 0  Var: z of type int [mem: Local loc: -3 size: 1] [line: 19]
.   .   .   .   Child: 1  Range [line: 19]
.   .   .   .   .   Child: 0  Const 1 of type int [line: 19]
.   .   .   .   .   Child: 1  Const 11 of type int [line: 19]
.   .   .   .   Child: 2  Compound [mem: None loc: 0 size: -5] [line: 19]
.   .   .   .   .   Child: 0  Var: i of type int [mem: Local loc: -4 size: 1] [line: 20]
.   .   .   .   .   Child: 1  Assign: <= of type int [line: 21]
.   .   .   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -4 size: 1] [line: 21]
.   .   .   .   .   .   Child: 1  Const 0 of type int [line: 21]
.   .   Sibling: 4  For [mem: None loc: 0 size: -3] [line: 23]
.   .   .   Child: 0  Var: i of type int [mem: Local loc: -2 size: 1] [line: 23]
.   .   .   Child: 1  Range [line: 23]
.   .   .   .   Child: 0  Const 1 of type int [line: 23]
.   .   .   .   Child: 1  Const 10 of type int [line: 23]
.   .   .   Child: 2  For [mem: None loc: 0 size: -4] [line: 24]
.   .   .   .   Child: 0  Var: z of type int [mem: Local loc: -3 size: 1] [line: 24]
.   .   .   .   Child: 1  Range [line: 24]
.   .   .   .   .   Child: 0  Const 1 of type int [line: 24]
.   .   .   .   .   Child: 1  Const 11 of type int [line: 24]
.   .   .   .   Child: 2  Compound [mem: None loc: 0 size: -4] [line: 24]
.   .   .   .   .   Child: 1  Assign: <= of type int [line: 25]
.   .   .   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -2 size: 1] [line: 25]
.   .   .   .   .   .   Child: 1  Const 0 of type int [line: 25]
Sibling: 1  Func: cat returns type void [mem: Global loc: 0 size: -3] [line: 29]
.   Child: 0  Parm: i of type int [mem: Parameter loc: -2 size: 1] [line: 29]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 29]
.   .   Child: 1  If [line: 30]
.   .   .   Child: 0  Const true of type bool [line: 30]
.   .   .   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 30]
.   .   .   .   Child: 0  Var: i of type int [mem: Local loc: -3 size: 1] [line: 31]
.   .   .   .   Child: 1  Assign: <= of type int [line: 32]
.   .   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -3 size: 1] [line: 32]
.   .   .   .   .   Child: 1  Const 0 of type int [line: 32]
Sibling: 2  Func: errorZ returns type void [mem: Global loc: 0 size: -3] [line: 36]
.   Child: 0  Parm: i of type int [mem: Parameter loc: -2 size: 1] [line: 36]
.   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 36]
.   .   Child: 0  Var: ii of type int [mem: Local loc: -3 size: 1] [line: 37]
.   .   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 38]
.   .   .   Child: 0  Var: i of type int [mem: Local loc: -4 size: 1] [line: 39]
.   .   .   Child: 1  If [line: 41]
.   .   .   .   Child: 0  Const true of type bool [line: 41]
.   .   .   .   Child: 1  Compound [mem: None loc: 0 size: -6] [line: 41]
.   .   .   .   .   Child: 0  Var: i of type int [mem: Local loc: -5 size: 1] [line: 42]
.   .   .   .   .   Child: 1  Assign: <= of type int [line: 43]
.   .   .   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -5 size: 1] [line: 43]
.   .   .   .   .   .   Child: 1  Const 0 of type int [line: 43]
.   .   .   Sibling: 1  Assign: <= of type int [line: 45]
.   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -4 size: 1] [line: 45]
.   .   .   .   Child: 1  Const 0 of type int [line: 45]
.   .   Sibling: 1  For [mem: None loc: 0 size: -5] [line: 48]
.   .   .   Child: 0  Var: i of type int [mem: Local loc: -4 size: 1] [line: 48]
.   .   .   Child: 1  Range [line: 48]
.   .   .   .   Child: 0  Const 1 of type int [line: 48]
.   .   .   .   Child: 1  Const 10 of type int [line: 48]
.   .   .   Child: 2  Compound [mem: None loc: 0 size: -6] [line: 49]
.   .   .   .   Child: 0  Var: ii of type int [mem: Local loc: -5 size: 1] [line: 50]
.   .   .   .   Child: 1  Assign: <= of type int [line: 51]
.   .   .   .   .   Child: 0  Id: ii of type int [mem: Local loc: -5 size: 1] [line: 51]
.   .   .   .   .   Child: 1  Const 0 of type int [line: 51]
.   .   .   .   Sibling: 1  Call: cat of type void [line: 52]
.   .   .   .   .   Child: 0  Id: ii of type int [mem: Local loc: -5 size: 1] [line: 52]
.   .   Sibling: 2  Call: errorZ of type void [line: 54]
.   .   .   Child: 0  Id: i of type int [mem: Parameter loc: -2 size: 1] [line: 54]
Sibling: 3  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 57]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 57]
.   .   Child: 1  Call: fred of type void [line: 57]
Offset for end of global space: 0
Number of warnings: 9
Number of errors: 0

==============
==============
./c- -M notused.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(1): The variable 'g' seems not to be used.
WARNING(8): Expecting to return type int but function 'main' has no return statement.
WARNING(8): The parameter 'u' seems not to be used.
WARNING(8): The parameter 'z' seems not to be used.
WARNING(10): The variable 'w' seems not to be used.
WARNING(12): The variable 'y' seems not to be used.
WARNING(20): Expecting to return type int but function 'elk' has no return statement.
WARNING(20): The function 'elk' seems not to be used.
ERROR(21): Cannot use function 'dog' as a variable.
ERROR(22): Symbol 'klingon' is not declared.
ERROR(23): Symbol 'klingon' is not declared.
ERROR(23): Symbol 'romulon' is not declared.
Number of warnings: 8
Number of errors: 5

==============
==============
./c- -M oparray.c-
WARNING(9): The variable 'ya' seems not to be used.
WARNING(9): The variable 'y' seems not to be used.
ERROR(11): Cannot index nonarray 'main'.
ERROR(11): Cannot use function 'main' as a variable.
WARNING(13): Variable 'xa' may be uninitialized when used here.
WARNING(14): Variable 'ca' may be uninitialized when used here.
WARNING(15): Variable 'ba' may be uninitialized when used here.
ERROR(16): '<=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(17): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(18): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(20): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
WARNING(20): Variable 'x' may be uninitialized when used here.
ERROR(21): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
WARNING(21): Variable 'c' may be uninitialized when used here.
ERROR(22): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
WARNING(22): Variable 'b' may be uninitialized when used here.
ERROR(23): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(23): '<=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(24): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(24): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(26): '<=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(27): '<=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(28): '<=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(29): '<=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(29): '<=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(30): '<=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(30): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(39): '>' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(40): '>' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(42): The operation '?' does not work with arrays.
ERROR(45): The operation 'sizeof' only works with arrays.
ERROR(46): Cannot index nonarray 'x'.
ERROR(47): Cannot index nonarray 'x'.
ERROR(47): The operation 'sizeof' only works with arrays.
ERROR(49): The operation 'sizeof' only works with arrays.
Number of warnings: 8
Number of errors: 27

==============
==============
./c- -M op.c-
WARNING(8): Variable 'a' may be uninitialized when used here.
ERROR(9): '<' requires operands of the same type but lhs is type int and rhs is type bool.
WARNING(9): Variable 'b' may be uninitialized when used here.
ERROR(10): '<' requires operands of the same type but lhs is type int and rhs is type char.
WARNING(10): Variable 'c' may be uninitialized when used here.
ERROR(11): '<' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(13): '<' requires operands of the same type but lhs is type bool and rhs is type char.
ERROR(14): '<' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(15): '<' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(18): Symbol 'x' is not declared.
ERROR(19): Symbol 'x' is not declared.
ERROR(20): Symbol 'x' is not declared.
Number of warnings: 3
Number of errors: 9

==============
==============
./c- -M ops.c-
Var: y of array of type int [mem: Global loc: -1 size: 11] [line: 4]
Sibling: 1  Var: x of type bool [mem: Global loc: -11 size: 1] [line: 5]
Sibling: 2  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 7]
.   Child: 1  Compound [mem: None loc: 0 size: -6] [line: 8]
.   .   Child: 0  Var: a of type int [mem: Local loc: -2 size: 1] [line: 9]
.   .   Sibling: 1  Var: b of type int [mem: Local loc: -3 size: 1] [line: 10]
.   .   Sibling: 2  Var: c of type int [mem: Local loc: -4 size: 1] [line: 11]
.   .   Sibling: 3  Var: z of type bool [mem: Local loc: -5 size: 1] [line: 12]
.   .   Child: 1  Assign: <= of type int [line: 14]
.   .   .   Child: 0  Op: [ of type int [line: 14]
.   .   .   .   Child: 0  Id: y of array of type int [mem: Global loc: -1 size: 11] [line: 14]
.   .   .   .   Child: 1  Const 0 of type int [line: 14]
.   .   .   Child: 1  Const 50 of type int [line: 14]
.   .   Sibling: 1  Assign: <= of type int [line: 15]
.   .   .   Child: 0  Op: [ of type int [line: 15]
.   .   .   .   Child: 0  Id: y of array of type int [mem: Global loc: -1 size: 11] [line: 15]
.   .   .   .   Child: 1  Const 5 of type int [line: 15]
.   .   .   Child: 1  Const 1 of type int [line: 15]
.   .   Sibling: 2  Assign: <= of type int [line: 16]
.   .   .   Child: 0  Op: [ of type int [line: 16]
.   .   .   .   Child: 0  Id: y of array of type int [mem: Global loc: -1 size: 11] [line: 16]
.   .   .   .   Child: 1  Const 8 of type int [line: 16]
.   .   .   Child: 1  Const 2 of type int [line: 16]
.   .   Sibling: 3  Assign: <= of type int [line: 18]
.   .   .   Child: 0  Id: a of type int [mem: Local loc: -2 size: 1] [line: 18]
.   .   .   Child: 1  Const 50 of type int [line: 18]
.   .   Sibling: 4  Assign: <= of type int [line: 19]
.   .   .   Child: 0  Id: b of type int [mem: Local loc: -3 size: 1] [line: 19]
.   .   .   Child: 1  Const 1 of type int [line: 19]
.   .   Sibling: 5  Assign: <= of type int [line: 20]
.   .   .   Child: 0  Id: c of type int [mem: Local loc: -4 size: 1] [line: 20]
.   .   .   Child: 1  Const 8 of type int [line: 20]
.   .   Sibling: 6  Assign: <= of type bool [line: 22]
.   .   .   Child: 0  Id: x of type bool [mem: Global loc: -11 size: 1] [line: 22]
.   .   .   Child: 1  Const false of type bool [line: 22]
.   .   Sibling: 7  Assign: <= of type bool [line: 23]
.   .   .   Child: 0  Id: z of type bool [mem: Local loc: -5 size: 1] [line: 23]
.   .   .   Child: 1  Const true of type bool [line: 23]
.   .   Sibling: 8  Call: outputb of type void [line: 25]
.   .   .   Child: 0  Op: !> of type bool [line: 25]
.   .   .   .   Child: 0  Id: a of type int [mem: Local loc: -2 size: 1] [line: 25]
.   .   .   .   Child: 1  Const 1 of type int [line: 25]
.   .   Sibling: 9  Call: outputb of type void [line: 26]
.   .   .   Child: 0  Op: !> of type bool [line: 26]
.   .   .   .   Child: 0  Id: b of type int [mem: Local loc: -3 size: 1] [line: 26]
.   .   .   .   Child: 1  Const 50 of type int [line: 26]
.   .   Sibling: 10  Call: outputb of type void [line: 27]
.   .   .   Child: 0  Op: !> of type bool [line: 27]
.   .   .   .   Child: 0  Const 50 of type int [line: 27]
.   .   .   .   Child: 1  Const 50 of type int [line: 27]
.   .   Sibling: 11  Call: outnl of type void [line: 28]
.   .   Sibling: 12  Call: outputb of type void [line: 30]
.   .   .   Child: 0  Op: < of type bool [line: 30]
.   .   .   .   Child: 0  Const 50 of type int [line: 30]
.   .   .   .   Child: 1  Const 1 of type int [line: 30]
.   .   Sibling: 13  Call: outputb of type void [line: 31]
.   .   .   Child: 0  Op: < of type bool [line: 31]
.   .   .   .   Child: 0  Id: b of type int [mem: Local loc: -3 size: 1] [line: 31]
.   .   .   .   Child: 1  Id: a of type int [mem: Local loc: -2 size: 1] [line: 31]
.   .   Sibling: 14  Call: outputb of type void [line: 32]
.   .   .   Child: 0  Op: < of type bool [line: 32]
.   .   .   .   Child: 0  Id: a of type int [mem: Local loc: -2 size: 1] [line: 32]
.   .   .   .   Child: 1  Id: a of type int [mem: Local loc: -2 size: 1] [line: 32]
.   .   Sibling: 15  Call: outnl of type void [line: 33]
.   .   Sibling: 16  Call: outputb of type void [line: 35]
.   .   .   Child: 0  Op: > of type bool [line: 35]
.   .   .   .   Child: 0  Const 50 of type int [line: 35]
.   .   .   .   Child: 1  Const 1 of type int [line: 35]
.   .   Sibling: 17  Call: outputb of type void [line: 36]
.   .   .   Child: 0  Op: > of type bool [line: 36]
.   .   .   .   Child: 0  Const 1 of type int [line: 36]
.   .   .   .   Child: 1  Const 50 of type int [line: 36]
.   .   Sibling: 18  Call: outputb of type void [line: 37]
.   .   .   Child: 0  Op: > of type bool [line: 37]
.   .   .   .   Child: 0  Const 50 of type int [line: 37]
.   .   .   .   Child: 1  Const 50 of type int [line: 37]
.   .   Sibling: 19  Call: outnl of type void [line: 38]
.   .   Sibling: 20  Call: outputb of type void [line: 40]
.   .   .   Child: 0  Op: !< of type bool [line: 40]
.   .   .   .   Child: 0  Const 50 of type int [line: 40]
.   .   .   .   Child: 1  Const 1 of type int [line: 40]
.   .   Sibling: 21  Call: outputb of type void [line: 41]
.   .   .   Child: 0  Op: !< of type bool [line: 41]
.   .   .   .   Child: 0  Const 1 of type int [line: 41]
.   .   .   .   Child: 1  Const 50 of type int [line: 41]
.   .   Sibling: 22  Call: outputb of type void [line: 42]
.   .   .   Child: 0  Op: !< of type bool [line: 42]
.   .   .   .   Child: 0  Const 50 of type int [line: 42]
.   .   .   .   Child: 1  Const 50 of type int [line: 42]
.   .   Sibling: 23  Call: outnl of type void [line: 43]
.   .   Sibling: 24  Call: outputb of type void [line: 45]
.   .   .   Child: 0  Op: = of type bool [line: 45]
.   .   .   .   Child: 0  Op: [ of type int [line: 45]
.   .   .   .   .   Child: 0  Id: y of array of type int [mem: Global loc: -1 size: 11] [line: 45]
.   .   .   .   .   Child: 1  Const 0 of type int [line: 45]
.   .   .   .   Child: 1  Id: b of type int [mem: Local loc: -3 size: 1] [line: 45]
.   .   Sibling: 25  Call: outputb of type void [line: 46]
.   .   .   Child: 0  Op: = of type bool [line: 46]
.   .   .   .   Child: 0  Id: a of type int [mem: Local loc: -2 size: 1] [line: 46]
.   .   .   .   Child: 1  Id: b of type int [mem: Local loc: -3 size: 1] [line: 46]
.   .   Sibling: 26  Call: outputb of type void [line: 47]
.   .   .   Child: 0  Op: = of type bool [line: 47]
.   .   .   .   Child: 0  Id: b of type int [mem: Local loc: -3 size: 1] [line: 47]
.   .   .   .   Child: 1  Id: b of type int [mem: Local loc: -3 size: 1] [line: 47]
.   .   Sibling: 27  Call: outnl of type void [line: 48]
.   .   Sibling: 28  Call: outputb of type void [line: 50]
.   .   .   Child: 0  Op: != of type bool [line: 50]
.   .   .   .   Child: 0  Op: [ of type int [line: 50]
.   .   .   .   .   Child: 0  Id: y of array of type int [mem: Global loc: -1 size: 11] [line: 50]
.   .   .   .   .   Child: 1  Const 0 of type int [line: 50]
.   .   .   .   Child: 1  Id: a of type int [mem: Local loc: -2 size: 1] [line: 50]
.   .   Sibling: 29  Call: outputb of type void [line: 51]
.   .   .   Child: 0  Op: != of type bool [line: 51]
.   .   .   .   Child: 0  Op: [ of type int [line: 51]
.   .   .   .   .   Child: 0  Id: y of array of type int [mem: Global loc: -1 size: 11] [line: 51]
.   .   .   .   .   Child: 1  Const 0 of type int [line: 51]
.   .   .   .   Child: 1  Id: b of type int [mem: Local loc: -3 size: 1] [line: 51]
.   .   Sibling: 30  Call: outputb of type void [line: 52]
.   .   .   Child: 0  Op: != of type bool [line: 52]
.   .   .   .   Child: 0  Id: a of type int [mem: Local loc: -2 size: 1] [line: 52]
.   .   .   .   Child: 1  Id: b of type int [mem: Local loc: -3 size: 1] [line: 52]
.   .   Sibling: 31  Call: outputb of type void [line: 53]
.   .   .   Child: 0  Op: != of type bool [line: 53]
.   .   .   .   Child: 0  Id: b of type int [mem: Local loc: -3 size: 1] [line: 53]
.   .   .   .   Child: 1  Id: b of type int [mem: Local loc: -3 size: 1] [line: 53]
.   .   Sibling: 32  Call: outnl of type void [line: 54]
.   .   Sibling: 33  Call: outputb of type void [line: 56]
.   .   .   Child: 0  Op: and of type bool [line: 56]
.   .   .   .   Child: 0  Const true of type bool [line: 56]
.   .   .   .   Child: 1  Const true of type bool [line: 56]
.   .   Sibling: 34  Call: outputb of type void [line: 57]
.   .   .   Child: 0  Op: and of type bool [line: 57]
.   .   .   .   Child: 0  Const true of type bool [line: 57]
.   .   .   .   Child: 1  Const false of type bool [line: 57]
.   .   Sibling: 35  Call: outputb of type void [line: 58]
.   .   .   Child: 0  Op: and of type bool [line: 58]
.   .   .   .   Child: 0  Const false of type bool [line: 58]
.   .   .   .   Child: 1  Const true of type bool [line: 58]
.   .   Sibling: 36  Call: outputb of type void [line: 59]
.   .   .   Child: 0  Op: and of type bool [line: 59]
.   .   .   .   Child: 0  Const false of type bool [line: 59]
.   .   .   .   Child: 1  Const false of type bool [line: 59]
.   .   Sibling: 37  Call: outnl of type void [line: 60]
.   .   Sibling: 38  Call: outputb of type void [line: 62]
.   .   .   Child: 0  Op: or of type bool [line: 62]
.   .   .   .   Child: 0  Const true of type bool [line: 62]
.   .   .   .   Child: 1  Const true of type bool [line: 62]
.   .   Sibling: 39  Call: outputb of type void [line: 63]
.   .   .   Child: 0  Op: or of type bool [line: 63]
.   .   .   .   Child: 0  Id: z of type bool [mem: Local loc: -5 size: 1] [line: 63]
.   .   .   .   Child: 1  Const false of type bool [line: 63]
.   .   Sibling: 40  Call: outputb of type void [line: 64]
.   .   .   Child: 0  Op: or of type bool [line: 64]
.   .   .   .   Child: 0  Const false of type bool [line: 64]
.   .   .   .   Child: 1  Const true of type bool [line: 64]
.   .   Sibling: 41  Call: outputb of type void [line: 65]
.   .   .   Child: 0  Op: or of type bool [line: 65]
.   .   .   .   Child: 0  Const false of type bool [line: 65]
.   .   .   .   Child: 1  Const false of type bool [line: 65]
.   .   Sibling: 42  Call: outnl of type void [line: 66]
.   .   Sibling: 43  Call: outputb of type void [line: 68]
.   .   .   Child: 0  Op: not of type bool [line: 68]
.   .   .   .   Child: 0  Const true of type bool [line: 68]
.   .   Sibling: 44  Call: outputb of type void [line: 69]
.   .   .   Child: 0  Op: not of type bool [line: 69]
.   .   .   .   Child: 0  Const false of type bool [line: 69]
.   .   Sibling: 45  Call: outputb of type void [line: 70]
.   .   .   Child: 0  Op: not of type bool [line: 70]
.   .   .   .   Child: 0  Id: x of type bool [mem: Global loc: -11 size: 1] [line: 70]
.   .   Sibling: 46  Call: outputb of type void [line: 71]
.   .   .   Child: 0  Op: not of type bool [line: 71]
.   .   .   .   Child: 0  Op: not of type bool [line: 71]
.   .   .   .   .   Child: 0  Op: not of type bool [line: 71]
.   .   .   .   .   .   Child: 0  Id: x of type bool [mem: Global loc: -11 size: 1] [line: 71]
.   .   Sibling: 47  Call: outnl of type void [line: 72]
.   .   Sibling: 48  Call: output of type void [line: 74]
.   .   .   Child: 0  Op: + of type int [line: 74]
.   .   .   .   Child: 0  Const 5 of type int [line: 74]
.   .   .   .   Child: 1  Const 50 of type int [line: 74]
.   .   Sibling: 49  Call: output of type void [line: 75]
.   .   .   Child: 0  Op: + of type int [line: 75]
.   .   .   .   Child: 0  Op: [ of type int [line: 75]
.   .   .   .   .   Child: 0  Id: y of array of type int [mem: Global loc: -1 size: 11] [line: 75]
.   .   .   .   .   Child: 1  Id: c of type int [mem: Local loc: -4 size: 1] [line: 75]
.   .   .   .   Child: 1  Const 50 of type int [line: 75]
.   .   Sibling: 50  Call: outnl of type void [line: 76]
.   .   Sibling: 51  Call: output of type void [line: 78]
.   .   .   Child: 0  Op: - of type int [line: 78]
.   .   .   .   Child: 0  Const 5 of type int [line: 78]
.   .   .   .   Child: 1  Const 50 of type int [line: 78]
.   .   Sibling: 52  Call: output of type void [line: 79]
.   .   .   Child: 0  Op: - of type int [line: 79]
.   .   .   .   Child: 0  Op: - of type int [line: 79]
.   .   .   .   .   Child: 0  Const 30 of type int [line: 79]
.   .   .   .   .   Child: 1  Const 5 of type int [line: 79]
.   .   .   .   Child: 1  Const 50 of type int [line: 79]
.   .   Sibling: 53  Call: outnl of type void [line: 80]
.   .   Sibling: 54  Assign: <= of type int [line: 82]
.   .   .   Child: 0  Id: a of type int [mem: Local loc: -2 size: 1] [line: 82]
.   .   .   Child: 1  Const 50 of type int [line: 82]
.   .   Sibling: 55  Call: output of type void [line: 83]
.   .   .   Child: 0  Op: chsign of type int [line: 83]
.   .   .   .   Child: 0  Id: a of type int [mem: Local loc: -2 size: 1] [line: 83]
.   .   Sibling: 56  Call: output of type void [line: 84]
.   .   .   Child: 0  Op: chsign of type int [line: 84]
.   .   .   .   Child: 0  Op: chsign of type int [line: 84]
.   .   .   .   .   Child: 0  Id: a of type int [mem: Local loc: -2 size: 1] [line: 84]
.   .   Sibling: 57  Call: output of type void [line: 85]
.   .   .   Child: 0  Op: chsign of type int [line: 85]
.   .   .   .   Child: 0  Id: a of type int [mem: Local loc: -2 size: 1] [line: 85]
.   .   Sibling: 58  Call: output of type void [line: 86]
.   .   .   Child: 0  Op: chsign of type int [line: 86]
.   .   .   .   Child: 0  Const 0 of type int [line: 86]
.   .   Sibling: 59  Call: output of type void [line: 87]
.   .   .   Child: 0  Op: chsign of type int [line: 87]
.   .   .   .   Child: 0  Const 1 of type int [line: 87]
.   .   Sibling: 60  Call: outnl of type void [line: 88]
.   .   Sibling: 61  Call: output of type void [line: 90]
.   .   .   Child: 0  Op: * of type int [line: 90]
.   .   .   .   Child: 0  Op: * of type int [line: 90]
.   .   .   .   .   Child: 0  Op: * of type int [line: 90]
.   .   .   .   .   .   Child: 0  Op: * of type int [line: 90]
.   .   .   .   .   .   .   Child: 0  Const 2 of type int [line: 90]
.   .   .   .   .   .   .   Child: 1  Const 3 of type int [line: 90]
.   .   .   .   .   .   Child: 1  Const 5 of type int [line: 90]
.   .   .   .   .   Child: 1  Const 7 of type int [line: 90]
.   .   .   .   Child: 1  Const 11 of type int [line: 90]
.   .   Sibling: 62  Call: output of type void [line: 91]
.   .   .   Child: 0  Op: * of type int [line: 91]
.   .   .   .   Child: 0  Const 50 of type int [line: 91]
.   .   .   .   Child: 1  Op: [ of type int [line: 91]
.   .   .   .   .   Child: 0  Id: y of array of type int [mem: Global loc: -1 size: 11] [line: 91]
.   .   .   .   .   Child: 1  Const 8 of type int [line: 91]
.   .   Sibling: 63  Call: output of type void [line: 92]
.   .   .   Child: 0  Op: * of type int [line: 92]
.   .   .   .   Child: 0  Op: [ of type int [line: 92]
.   .   .   .   .   Child: 0  Id: y of array of type int [mem: Global loc: -1 size: 11] [line: 92]
.   .   .   .   .   Child: 1  Const 8 of type int [line: 92]
.   .   .   .   Child: 1  Const 50 of type int [line: 92]
.   .   Sibling: 64  Call: outnl of type void [line: 93]
.   .   Sibling: 65  Call: output of type void [line: 95]
.   .   .   Child: 0  Op: / of type int [line: 95]
.   .   .   .   Child: 0  Const 50 of type int [line: 95]
.   .   .   .   Child: 1  Op: [ of type int [line: 95]
.   .   .   .   .   Child: 0  Id: y of array of type int [mem: Global loc: -1 size: 11] [line: 95]
.   .   .   .   .   Child: 1  Const 8 of type int [line: 95]
.   .   Sibling: 66  Call: output of type void [line: 96]
.   .   .   Child: 0  Op: / of type int [line: 96]
.   .   .   .   Child: 0  Op: [ of type int [line: 96]
.   .   .   .   .   Child: 0  Id: y of array of type int [mem: Global loc: -1 size: 11] [line: 96]
.   .   .   .   .   Child: 1  Const 8 of type int [line: 96]
.   .   .   .   Child: 1  Const 50 of type int [line: 96]
.   .   Sibling: 67  Call: output of type void [line: 97]
.   .   .   Child: 0  Op: / of type int [line: 97]
.   .   .   .   Child: 0  Op: [ of type int [line: 97]
.   .   .   .   .   Child: 0  Id: y of array of type int [mem: Global loc: -1 size: 11] [line: 97]
.   .   .   .   .   Child: 1  Const 8 of type int [line: 97]
.   .   .   .   Child: 1  Id: b of type int [mem: Local loc: -3 size: 1] [line: 97]
.   .   Sibling: 68  Call: output of type void [line: 98]
.   .   .   Child: 0  Op: / of type int [line: 98]
.   .   .   .   Child: 0  Op: / of type int [line: 98]
.   .   .   .   .   Child: 0  Const 210 of type int [line: 98]
.   .   .   .   .   Child: 1  Const 7 of type int [line: 98]
.   .   .   .   Child: 1  Const 3 of type int [line: 98]
.   .   Sibling: 69  Call: outnl of type void [line: 99]
.   .   Sibling: 70  Call: output of type void [line: 102]
.   .   .   Child: 0  Op: % of type int [line: 102]
.   .   .   .   Child: 0  Const 211 of type int [line: 102]
.   .   .   .   Child: 1  Const 7 of type int [line: 102]
.   .   Sibling: 71  Call: output of type void [line: 103]
.   .   .   Child: 0  Op: % of type int [line: 103]
.   .   .   .   Child: 0  Const 211 of type int [line: 103]
.   .   .   .   Child: 1  Const 6 of type int [line: 103]
.   .   Sibling: 72  Call: output of type void [line: 104]
.   .   .   Child: 0  Op: % of type int [line: 104]
.   .   .   .   Child: 0  Const 211 of type int [line: 104]
.   .   .   .   Child: 1  Const 5 of type int [line: 104]
.   .   Sibling: 73  Call: output of type void [line: 105]
.   .   .   Child: 0  Op: % of type int [line: 105]
.   .   .   .   Child: 0  Const 211 of type int [line: 105]
.   .   .   .   Child: 1  Const 4 of type int [line: 105]
.   .   Sibling: 74  Call: output of type void [line: 106]
.   .   .   Child: 0  Op: - of type int [line: 106]
.   .   .   .   Child: 0  Const 211 of type int [line: 106]
.   .   .   .   Child: 1  Op: * of type int [line: 106]
.   .   .   .   .   Child: 0  Op: / of type int [line: 106]
.   .   .   .   .   .   Child: 0  Const 211 of type int [line: 106]
.   .   .   .   .   .   Child: 1  Const 4 of type int [line: 106]
.   .   .   .   .   Child: 1  Const 4 of type int [line: 106]
.   .   Sibling: 75  Call: output of type void [line: 107]
.   .   .   Child: 0  Op: % of type int [line: 107]
.   .   .   .   Child: 0  Op: % of type int [line: 107]
.   .   .   .   .   Child: 0  Const 211 of type int [line: 107]
.   .   .   .   .   Child: 1  Const 100 of type int [line: 107]
.   .   .   .   Child: 1  Const 3 of type int [line: 107]
.   .   Sibling: 76  Call: outnl of type void [line: 108]
.   .   Sibling: 77  Call: output of type void [line: 110]
.   .   .   Child: 0  Assign: <= of type int [line: 110]
.   .   .   .   Child: 0  Id: a of type int [mem: Local loc: -2 size: 1] [line: 110]
.   .   .   .   Child: 1  Assign: <= of type int [line: 110]
.   .   .   .   .   Child: 0  Id: b of type int [mem: Local loc: -3 size: 1] [line: 110]
.   .   .   .   .   Child: 1  Assign: <= of type int [line: 110]
.   .   .   .   .   .   Child: 0  Id: c of type int [mem: Local loc: -4 size: 1] [line: 110]
.   .   .   .   .   .   Child: 1  Const 43 of type int [line: 110]
.   .   Sibling: 78  Call: output of type void [line: 111]
.   .   .   Child: 0  Id: a of type int [mem: Local loc: -2 size: 1] [line: 111]
.   .   Sibling: 79  Assign: <= of type int [line: 112]
.   .   .   Child: 0  Id: a of type int [mem: Local loc: -2 size: 1] [line: 112]
.   .   .   Child: 1  Op: * of type int [line: 112]
.   .   .   .   Child: 0  Assign: <= of type int [line: 112]
.   .   .   .   .   Child: 0  Id: b of type int [mem: Local loc: -3 size: 1] [line: 112]
.   .   .   .   .   Child: 1  Const 3 of type int [line: 112]
.   .   .   .   Child: 1  Assign: <= of type int [line: 112]
.   .   .   .   .   Child: 0  Id: c of type int [mem: Local loc: -4 size: 1] [line: 112]
.   .   .   .   .   Child: 1  Const 4 of type int [line: 112]
.   .   Sibling: 80  Call: output of type void [line: 113]
.   .   .   Child: 0  Id: a of type int [mem: Local loc: -2 size: 1] [line: 113]
.   .   Sibling: 81  Call: outnl of type void [line: 114]
.   .   Sibling: 82  Assign: <= of type int [line: 116]
.   .   .   Child: 0  Id: a of type int [mem: Local loc: -2 size: 1] [line: 116]
.   .   .   Child: 1  Const 44 of type int [line: 116]
.   .   Sibling: 83  Assign: <= of type int [line: 117]
.   .   .   Child: 0  Id: b of type int [mem: Local loc: -3 size: 1] [line: 117]
.   .   .   Child: 1  Const 2 of type int [line: 117]
.   .   Sibling: 84  Call: output of type void [line: 118]
.   .   .   Child: 0  Assign: += of type int [line: 118]
.   .   .   .   Child: 0  Id: a of type int [mem: Local loc: -2 size: 1] [line: 118]
.   .   .   .   Child: 1  Id: b of type int [mem: Local loc: -3 size: 1] [line: 118]
.   .   Sibling: 85  Call: output of type void [line: 119]
.   .   .   Child: 0  Assign: -= of type int [line: 119]
.   .   .   .   Child: 0  Id: a of type int [mem: Local loc: -2 size: 1] [line: 119]
.   .   .   .   Child: 1  Id: b of type int [mem: Local loc: -3 size: 1] [line: 119]
.   .   Sibling: 86  Call: output of type void [line: 120]
.   .   .   Child: 0  Assign: -= of type int [line: 120]
.   .   .   .   Child: 0  Id: a of type int [mem: Local loc: -2 size: 1] [line: 120]
.   .   .   .   Child: 1  Id: a of type int [mem: Local loc: -2 size: 1] [line: 120]
.   .   Sibling: 87  Call: output of type void [line: 121]
.   .   .   Child: 0  Assign: += of type int [line: 121]
.   .   .   .   Child: 0  Id: a of type int [mem: Local loc: -2 size: 1] [line: 121]
.   .   .   .   Child: 1  Assign: += of type int [line: 121]
.   .   .   .   .   Child: 0  Id: b of type int [mem: Local loc: -3 size: 1] [line: 121]
.   .   .   .   .   Child: 1  Const 10 of type int [line: 121]
.   .   Sibling: 88  Call: outnl of type void [line: 122]
.   .   Sibling: 89  Assign: <= of type int [line: 124]
.   .   .   Child: 0  Id: a of type int [mem: Local loc: -2 size: 1] [line: 124]
.   .   .   Child: 1  Const 44 of type int [line: 124]
.   .   Sibling: 90  Assign: <= of type int [line: 125]
.   .   .   Child: 0  Id: b of type int [mem: Local loc: -3 size: 1] [line: 125]
.   .   .   Child: 1  Const 2 of type int [line: 125]
.   .   Sibling: 91  Call: output of type void [line: 126]
.   .   .   Child: 0  Assign: *= of type int [line: 126]
.   .   .   .   Child: 0  Id: a of type int [mem: Local loc: -2 size: 1] [line: 126]
.   .   .   .   Child: 1  Id: b of type int [mem: Local loc: -3 size: 1] [line: 126]
.   .   Sibling: 92  Call: output of type void [line: 127]
.   .   .   Child: 0  Assign: /= of type int [line: 127]
.   .   .   .   Child: 0  Id: a of type int [mem: Local loc: -2 size: 1] [line: 127]
.   .   .   .   Child: 1  Id: b of type int [mem: Local loc: -3 size: 1] [line: 127]
.   .   Sibling: 93  Call: output of type void [line: 128]
.   .   .   Child: 0  Assign: /= of type int [line: 128]
.   .   .   .   Child: 0  Id: a of type int [mem: Local loc: -2 size: 1] [line: 128]
.   .   .   .   Child: 1  Assign: /= of type int [line: 128]
.   .   .   .   .   Child: 0  Id: a of type int [mem: Local loc: -2 size: 1] [line: 128]
.   .   .   .   .   Child: 1  Const 2 of type int [line: 128]
.   .   Sibling: 94  Call: output of type void [line: 129]
.   .   .   Child: 0  Assign: *= of type int [line: 129]
.   .   .   .   Child: 0  Id: a of type int [mem: Local loc: -2 size: 1] [line: 129]
.   .   .   .   Child: 1  Assign: *= of type int [line: 129]
.   .   .   .   .   Child: 0  Id: b of type int [mem: Local loc: -3 size: 1] [line: 129]
.   .   .   .   .   Child: 1  Const 10 of type int [line: 129]
.   .   Sibling: 95  Call: outnl of type void [line: 130]
.   .   Sibling: 96  Assign: <= of type int [line: 132]
.   .   .   Child: 0  Id: a of type int [mem: Local loc: -2 size: 1] [line: 132]
.   .   .   Child: 1  Const 44 of type int [line: 132]
.   .   Sibling: 97  Assign: <= of type int [line: 133]
.   .   .   Child: 0  Id: b of type int [mem: Local loc: -3 size: 1] [line: 133]
.   .   .   Child: 1  Const 2 of type int [line: 133]
.   .   Sibling: 98  Call: output of type void [line: 134]
.   .   .   Child: 0  Assign: ++ of type int [line: 134]
.   .   .   .   Child: 0  Id: a of type int [mem: Local loc: -2 size: 1] [line: 134]
.   .   Sibling: 99  Call: output of type void [line: 135]
.   .   .   Child: 0  Assign: -- of type int [line: 135]
.   .   .   .   Child: 0  Id: b of type int [mem: Local loc: -3 size: 1] [line: 135]
.   .   Sibling: 100  Call: outnl of type void [line: 136]
.   .   Sibling: 101  Call: output of type void [line: 138]
.   .   .   Child: 0  Op: - of type int [line: 138]
.   .   .   .   Child: 0  Op: - of type int [line: 138]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 138]
.   .   .   .   .   Child: 1  Const 4 of type int [line: 138]
.   .   .   .   Child: 1  Const 5 of type int [line: 138]
.   .   Sibling: 102  Call: output of type void [line: 139]
.   .   .   Child: 0  Op: / of type int [line: 139]
.   .   .   .   Child: 0  Op: / of type int [line: 139]
.   .   .   .   .   Child: 0  Const 211 of type int [line: 139]
.   .   .   .   .   Child: 1  Const 17 of type int [line: 139]
.   .   .   .   Child: 1  Const 5 of type int [line: 139]
.   .   Sibling: 103  Call: output of type void [line: 140]
.   .   .   Child: 0  Op: / of type int [line: 140]
.   .   .   .   Child: 0  Const 211 of type int [line: 140]
.   .   .   .   Child: 1  Op: / of type int [line: 140]
.   .   .   .   .   Child: 0  Const 17 of type int [line: 140]
.   .   .   .   .   Child: 1  Const 5 of type int [line: 140]
.   .   Sibling: 104  Call: outnl of type void [line: 141]
.   .   Sibling: 105  Call: outputb of type void [line: 143]
.   .   .   Child: 0  Op: and of type bool [line: 143]
.   .   .   .   Child: 0  Op: or of type bool [line: 143]
.   .   .   .   .   Child: 0  Const true of type bool [line: 143]
.   .   .   .   .   Child: 1  Const false of type bool [line: 143]
.   .   .   .   Child: 1  Const false of type bool [line: 143]
.   .   Sibling: 106  Call: outputb of type void [line: 144]
.   .   .   Child: 0  Op: or of type bool [line: 144]
.   .   .   .   Child: 0  Const true of type bool [line: 144]
.   .   .   .   Child: 1  Op: and of type bool [line: 144]
.   .   .   .   .   Child: 0  Const false of type bool [line: 144]
.   .   .   .   .   Child: 1  Const false of type bool [line: 144]
.   .   Sibling: 107  Call: outputb of type void [line: 145]
.   .   .   Child: 0  Op: or of type bool [line: 145]
.   .   .   .   Child: 0  Const true of type bool [line: 145]
.   .   .   .   Child: 1  Op: and of type bool [line: 145]
.   .   .   .   .   Child: 0  Const false of type bool [line: 145]
.   .   .   .   .   Child: 1  Const false of type bool [line: 145]
.   .   Sibling: 108  Call: outnl of type void [line: 146]
.   .   Sibling: 109  Call: outputb of type void [line: 148]
.   .   .   Child: 0  Op: < of type bool [line: 148]
.   .   .   .   Child: 0  Op: ? of type int [line: 148]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 148]
.   .   .   .   Child: 1  Const 3 of type int [line: 148]
.   .   Sibling: 110  Call: outputb of type void [line: 149]
.   .   .   Child: 0  Op: < of type bool [line: 149]
.   .   .   .   Child: 0  Op: ? of type int [line: 149]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 149]
.   .   .   .   Child: 1  Const 3 of type int [line: 149]
.   .   Sibling: 111  Call: outputb of type void [line: 150]
.   .   .   Child: 0  Op: < of type bool [line: 150]
.   .   .   .   Child: 0  Op: ? of type int [line: 150]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 150]
.   .   .   .   Child: 1  Const 3 of type int [line: 150]
.   .   Sibling: 112  Call: outputb of type void [line: 151]
.   .   .   Child: 0  Op: < of type bool [line: 151]
.   .   .   .   Child: 0  Op: ? of type int [line: 151]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 151]
.   .   .   .   Child: 1  Const 3 of type int [line: 151]
.   .   Sibling: 113  Call: outputb of type void [line: 152]
.   .   .   Child: 0  Op: < of type bool [line: 152]
.   .   .   .   Child: 0  Op: ? of type int [line: 152]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 152]
.   .   .   .   Child: 1  Const 3 of type int [line: 152]
.   .   Sibling: 114  Call: outputb of type void [line: 153]
.   .   .   Child: 0  Op: < of type bool [line: 153]
.   .   .   .   Child: 0  Op: ? of type int [line: 153]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 153]
.   .   .   .   Child: 1  Const 3 of type int [line: 153]
.   .   Sibling: 115  Call: outputb of type void [line: 154]
.   .   .   Child: 0  Op: < of type bool [line: 154]
.   .   .   .   Child: 0  Op: ? of type int [line: 154]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 154]
.   .   .   .   Child: 1  Const 3 of type int [line: 154]
.   .   Sibling: 116  Call: outputb of type void [line: 155]
.   .   .   Child: 0  Op: < of type bool [line: 155]
.   .   .   .   Child: 0  Op: ? of type int [line: 155]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 155]
.   .   .   .   Child: 1  Const 3 of type int [line: 155]
.   .   Sibling: 117  Call: outputb of type void [line: 156]
.   .   .   Child: 0  Op: < of type bool [line: 156]
.   .   .   .   Child: 0  Op: ? of type int [line: 156]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 156]
.   .   .   .   Child: 1  Const 3 of type int [line: 156]
.   .   Sibling: 118  Call: outputb of type void [line: 157]
.   .   .   Child: 0  Op: < of type bool [line: 157]
.   .   .   .   Child: 0  Op: ? of type int [line: 157]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 157]
.   .   .   .   Child: 1  Const 3 of type int [line: 157]
.   .   Sibling: 119  Call: outputb of type void [line: 158]
.   .   .   Child: 0  Op: < of type bool [line: 158]
.   .   .   .   Child: 0  Op: ? of type int [line: 158]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 158]
.   .   .   .   Child: 1  Const 3 of type int [line: 158]
.   .   Sibling: 120  Call: outputb of type void [line: 159]
.   .   .   Child: 0  Op: < of type bool [line: 159]
.   .   .   .   Child: 0  Op: ? of type int [line: 159]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 159]
.   .   .   .   Child: 1  Const 3 of type int [line: 159]
.   .   Sibling: 121  Call: outputb of type void [line: 160]
.   .   .   Child: 0  Op: = of type bool [line: 160]
.   .   .   .   Child: 0  Op: ? of type int [line: 160]
.   .   .   .   .   Child: 0  Const 1 of type int [line: 160]
.   .   .   .   Child: 1  Const 0 of type int [line: 160]
.   .   Sibling: 122  Call: outnl of type void [line: 161]
.   .   Sibling: 123  Call: outputb of type void [line: 163]
.   .   .   Child: 0  Op: > of type bool [line: 163]
.   .   .   .   Child: 0  Op: ? of type int [line: 163]
.   .   .   .   .   Child: 0  Const 10000 of type int [line: 163]
.   .   .   .   Child: 1  Const 0 of type int [line: 163]
.   .   Sibling: 124  Call: outputb of type void [line: 164]
.   .   .   Child: 0  Op: > of type bool [line: 164]
.   .   .   .   Child: 0  Op: ? of type int [line: 164]
.   .   .   .   .   Child: 0  Const 10000 of type int [line: 164]
.   .   .   .   Child: 1  Const 0 of type int [line: 164]
.   .   Sibling: 125  Call: outnl of type void [line: 165]
Offset for end of global space: -12
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M optype.c-
WARNING(7): Variable 'a' may be uninitialized when used here.
ERROR(8): '<' requires operands of the same type but lhs is type int and rhs is type bool.
WARNING(8): Variable 'b' may be uninitialized when used here.
ERROR(9): '<' requires operands of the same type but lhs is type int and rhs is type char.
WARNING(9): Variable 'c' may be uninitialized when used here.
ERROR(10): '<' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(12): '<' requires operands of the same type but lhs is type bool and rhs is type char.
ERROR(13): '<' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(14): '<' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(17): Symbol 'x' is not declared.
ERROR(18): Symbol 'x' is not declared.
ERROR(19): Symbol 'x' is not declared.
Number of warnings: 3
Number of errors: 9

==============
==============
./c- -M overkill.c-
ERROR(25): 'and' requires operands of type bool but lhs is of type int.
ERROR(25): 'and' requires operands of type bool but rhs is of type int.
ERROR(26): 'or' requires operands of type bool but lhs is of type int.
ERROR(26): 'or' requires operands of type bool but rhs is of type int.
ERROR(28): '!=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(29): '!>' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(30): '=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(31): '!<' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(32): '<' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(33): '>' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(34): The operation '*=' does not work with arrays.
ERROR(35): The operation '+=' does not work with arrays.
ERROR(36): The operation '-=' does not work with arrays.
ERROR(37): The operation '/=' does not work with arrays.
ERROR(38): The operation '+' does not work with arrays.
ERROR(39): The operation '-' does not work with arrays.
ERROR(40): The operation '*' does not work with arrays.
ERROR(41): The operation '/' does not work with arrays.
ERROR(42): The operation '%' does not work with arrays.
ERROR(43): 'and' requires operands of type bool but lhs is of type int.
ERROR(43): 'and' requires operands of type bool but rhs is of type int.
ERROR(43): The operation 'and' does not work with arrays.
ERROR(44): 'or' requires operands of type bool but lhs is of type int.
ERROR(44): 'or' requires operands of type bool but rhs is of type int.
ERROR(44): The operation 'or' does not work with arrays.
ERROR(45): '<=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(46): '!=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(47): '!>' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(48): '=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(49): '!<' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(50): '<' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(51): '>' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(52): '*=' requires operands of type int but rhs is of type char.
ERROR(53): '+=' requires operands of type int but rhs is of type char.
ERROR(54): '-=' requires operands of type int but rhs is of type char.
ERROR(55): '/=' requires operands of type int but rhs is of type char.
ERROR(56): '+' requires operands of type int but rhs is of type char.
ERROR(57): '-' requires operands of type int but rhs is of type char.
ERROR(58): '*' requires operands of type int but rhs is of type char.
ERROR(59): '/' requires operands of type int but rhs is of type char.
ERROR(60): '%' requires operands of type int but rhs is of type char.
ERROR(61): 'and' requires operands of type bool but lhs is of type int.
ERROR(61): 'and' requires operands of type bool but rhs is of type char.
ERROR(62): 'or' requires operands of type bool but lhs is of type int.
ERROR(62): 'or' requires operands of type bool but rhs is of type char.
ERROR(63): '<=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(64): '!=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(64): '!=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(65): '!>' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(65): '!>' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(66): '=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(66): '=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(67): '!<' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(67): '!<' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(68): '<' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(68): '<' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(69): '>' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(69): '>' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(70): '*=' requires operands of type int but rhs is of type char.
ERROR(70): The operation '*=' does not work with arrays.
ERROR(71): '+=' requires operands of type int but rhs is of type char.
ERROR(71): The operation '+=' does not work with arrays.
ERROR(72): '-=' requires operands of type int but rhs is of type char.
ERROR(72): The operation '-=' does not work with arrays.
ERROR(73): '/=' requires operands of type int but rhs is of type char.
ERROR(73): The operation '/=' does not work with arrays.
ERROR(74): '+' requires operands of type int but rhs is of type char.
ERROR(74): The operation '+' does not work with arrays.
ERROR(75): '-' requires operands of type int but rhs is of type char.
ERROR(75): The operation '-' does not work with arrays.
ERROR(76): '*' requires operands of type int but rhs is of type char.
ERROR(76): The operation '*' does not work with arrays.
ERROR(77): '/' requires operands of type int but rhs is of type char.
ERROR(77): The operation '/' does not work with arrays.
ERROR(78): '%' requires operands of type int but rhs is of type char.
ERROR(78): The operation '%' does not work with arrays.
ERROR(79): 'and' requires operands of type bool but lhs is of type int.
ERROR(79): 'and' requires operands of type bool but rhs is of type char.
ERROR(79): The operation 'and' does not work with arrays.
ERROR(80): 'or' requires operands of type bool but lhs is of type int.
ERROR(80): 'or' requires operands of type bool but rhs is of type char.
ERROR(80): The operation 'or' does not work with arrays.
ERROR(81): '<=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(81): '<=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(82): '!=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(83): '!>' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(84): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(85): '!<' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(86): '<' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(87): '>' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(88): '*=' requires operands of type int but rhs is of type bool.
ERROR(89): '+=' requires operands of type int but rhs is of type bool.
ERROR(90): '-=' requires operands of type int but rhs is of type bool.
ERROR(91): '/=' requires operands of type int but rhs is of type bool.
ERROR(92): '+' requires operands of type int but rhs is of type bool.
ERROR(93): '-' requires operands of type int but rhs is of type bool.
ERROR(94): '*' requires operands of type int but rhs is of type bool.
ERROR(95): '/' requires operands of type int but rhs is of type bool.
ERROR(96): '%' requires operands of type int but rhs is of type bool.
ERROR(97): 'and' requires operands of type bool but lhs is of type int.
ERROR(98): 'or' requires operands of type bool but lhs is of type int.
ERROR(99): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(100): '!=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(100): '!=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(101): '!>' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(101): '!>' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(102): '=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(102): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(103): '!<' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(103): '!<' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(104): '<' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(104): '<' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(105): '>' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(105): '>' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(106): '*=' requires operands of type int but rhs is of type bool.
ERROR(106): The operation '*=' does not work with arrays.
ERROR(107): '+=' requires operands of type int but rhs is of type bool.
ERROR(107): The operation '+=' does not work with arrays.
ERROR(108): '-=' requires operands of type int but rhs is of type bool.
ERROR(108): The operation '-=' does not work with arrays.
ERROR(109): '/=' requires operands of type int but rhs is of type bool.
ERROR(109): The operation '/=' does not work with arrays.
ERROR(110): '+' requires operands of type int but rhs is of type bool.
ERROR(110): The operation '+' does not work with arrays.
ERROR(111): '-' requires operands of type int but rhs is of type bool.
ERROR(111): The operation '-' does not work with arrays.
ERROR(112): '*' requires operands of type int but rhs is of type bool.
ERROR(112): The operation '*' does not work with arrays.
ERROR(113): '/' requires operands of type int but rhs is of type bool.
ERROR(113): The operation '/' does not work with arrays.
ERROR(114): '%' requires operands of type int but rhs is of type bool.
ERROR(114): The operation '%' does not work with arrays.
ERROR(115): 'and' requires operands of type bool but lhs is of type int.
ERROR(115): The operation 'and' does not work with arrays.
ERROR(116): 'or' requires operands of type bool but lhs is of type int.
ERROR(116): The operation 'or' does not work with arrays.
ERROR(117): '<=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(117): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(118): '!=' requires operands of the same type but lhs is type int and rhs is type void.
ERROR(119): '!>' requires operands of the same type but lhs is type int and rhs is type void.
ERROR(120): '=' requires operands of the same type but lhs is type int and rhs is type void.
ERROR(121): '!<' requires operands of the same type but lhs is type int and rhs is type void.
ERROR(122): '<' requires operands of the same type but lhs is type int and rhs is type void.
ERROR(123): '>' requires operands of the same type but lhs is type int and rhs is type void.
ERROR(124): '*=' requires operands of type int but rhs is of type void.
ERROR(125): '+=' requires operands of type int but rhs is of type void.
ERROR(126): '-=' requires operands of type int but rhs is of type void.
ERROR(127): '/=' requires operands of type int but rhs is of type void.
ERROR(128): '+' requires operands of type int but rhs is of type void.
ERROR(129): '-' requires operands of type int but rhs is of type void.
ERROR(130): '*' requires operands of type int but rhs is of type void.
ERROR(131): '/' requires operands of type int but rhs is of type void.
ERROR(132): '%' requires operands of type int but rhs is of type void.
ERROR(133): 'and' requires operands of type bool but lhs is of type int.
ERROR(133): 'and' requires operands of type bool but rhs is of type void.
ERROR(134): 'or' requires operands of type bool but lhs is of type int.
ERROR(134): 'or' requires operands of type bool but rhs is of type void.
ERROR(135): '<=' requires operands of the same type but lhs is type int and rhs is type void.
ERROR(136): '!=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(137): '!>' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(138): '=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(139): '!<' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(140): '<' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(141): '>' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(142): The operation '*=' does not work with arrays.
ERROR(143): The operation '+=' does not work with arrays.
ERROR(144): The operation '-=' does not work with arrays.
ERROR(145): The operation '/=' does not work with arrays.
ERROR(146): The operation '+' does not work with arrays.
ERROR(147): The operation '-' does not work with arrays.
ERROR(148): The operation '*' does not work with arrays.
ERROR(149): The operation '/' does not work with arrays.
ERROR(150): The operation '%' does not work with arrays.
ERROR(151): 'and' requires operands of type bool but lhs is of type int.
ERROR(151): 'and' requires operands of type bool but rhs is of type int.
ERROR(151): The operation 'and' does not work with arrays.
ERROR(152): 'or' requires operands of type bool but lhs is of type int.
ERROR(152): 'or' requires operands of type bool but rhs is of type int.
ERROR(152): The operation 'or' does not work with arrays.
ERROR(153): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(160): The operation '*=' does not work with arrays.
ERROR(161): The operation '+=' does not work with arrays.
ERROR(162): The operation '-=' does not work with arrays.
ERROR(163): The operation '/=' does not work with arrays.
ERROR(164): The operation '+' does not work with arrays.
ERROR(165): The operation '-' does not work with arrays.
ERROR(166): The operation '*' does not work with arrays.
ERROR(167): The operation '/' does not work with arrays.
ERROR(168): The operation '%' does not work with arrays.
ERROR(169): 'and' requires operands of type bool but lhs is of type int.
ERROR(169): 'and' requires operands of type bool but rhs is of type int.
ERROR(169): The operation 'and' does not work with arrays.
ERROR(170): 'or' requires operands of type bool but lhs is of type int.
ERROR(170): 'or' requires operands of type bool but rhs is of type int.
ERROR(170): The operation 'or' does not work with arrays.
ERROR(172): '!=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(172): '!=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(173): '!>' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(173): '!>' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(174): '=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(174): '=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(175): '!<' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(175): '!<' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(176): '<' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(176): '<' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(177): '>' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(177): '>' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(178): '*=' requires operands of type int but rhs is of type char.
ERROR(178): The operation '*=' does not work with arrays.
ERROR(179): '+=' requires operands of type int but rhs is of type char.
ERROR(179): The operation '+=' does not work with arrays.
ERROR(180): '-=' requires operands of type int but rhs is of type char.
ERROR(180): The operation '-=' does not work with arrays.
ERROR(181): '/=' requires operands of type int but rhs is of type char.
ERROR(181): The operation '/=' does not work with arrays.
ERROR(182): '+' requires operands of type int but rhs is of type char.
ERROR(182): The operation '+' does not work with arrays.
ERROR(183): '-' requires operands of type int but rhs is of type char.
ERROR(183): The operation '-' does not work with arrays.
ERROR(184): '*' requires operands of type int but rhs is of type char.
ERROR(184): The operation '*' does not work with arrays.
ERROR(185): '/' requires operands of type int but rhs is of type char.
ERROR(185): The operation '/' does not work with arrays.
ERROR(186): '%' requires operands of type int but rhs is of type char.
ERROR(186): The operation '%' does not work with arrays.
ERROR(187): 'and' requires operands of type bool but lhs is of type int.
ERROR(187): 'and' requires operands of type bool but rhs is of type char.
ERROR(187): The operation 'and' does not work with arrays.
ERROR(188): 'or' requires operands of type bool but lhs is of type int.
ERROR(188): 'or' requires operands of type bool but rhs is of type char.
ERROR(188): The operation 'or' does not work with arrays.
ERROR(189): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(189): '<=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(190): '!=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(191): '!>' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(192): '=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(193): '!<' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(194): '<' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(195): '>' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(196): '*=' requires operands of type int but rhs is of type char.
ERROR(196): The operation '*=' does not work with arrays.
ERROR(197): '+=' requires operands of type int but rhs is of type char.
ERROR(197): The operation '+=' does not work with arrays.
ERROR(198): '-=' requires operands of type int but rhs is of type char.
ERROR(198): The operation '-=' does not work with arrays.
ERROR(199): '/=' requires operands of type int but rhs is of type char.
ERROR(199): The operation '/=' does not work with arrays.
ERROR(200): '+' requires operands of type int but rhs is of type char.
ERROR(200): The operation '+' does not work with arrays.
ERROR(201): '-' requires operands of type int but rhs is of type char.
ERROR(201): The operation '-' does not work with arrays.
ERROR(202): '*' requires operands of type int but rhs is of type char.
ERROR(202): The operation '*' does not work with arrays.
ERROR(203): '/' requires operands of type int but rhs is of type char.
ERROR(203): The operation '/' does not work with arrays.
ERROR(204): '%' requires operands of type int but rhs is of type char.
ERROR(204): The operation '%' does not work with arrays.
ERROR(205): 'and' requires operands of type bool but lhs is of type int.
ERROR(205): 'and' requires operands of type bool but rhs is of type char.
ERROR(205): The operation 'and' does not work with arrays.
ERROR(206): 'or' requires operands of type bool but lhs is of type int.
ERROR(206): 'or' requires operands of type bool but rhs is of type char.
ERROR(206): The operation 'or' does not work with arrays.
ERROR(207): '<=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(208): '!=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(208): '!=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(209): '!>' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(209): '!>' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(210): '=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(210): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(211): '!<' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(211): '!<' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(212): '<' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(212): '<' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(213): '>' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(213): '>' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(214): '*=' requires operands of type int but rhs is of type bool.
ERROR(214): The operation '*=' does not work with arrays.
ERROR(215): '+=' requires operands of type int but rhs is of type bool.
ERROR(215): The operation '+=' does not work with arrays.
ERROR(216): '-=' requires operands of type int but rhs is of type bool.
ERROR(216): The operation '-=' does not work with arrays.
ERROR(217): '/=' requires operands of type int but rhs is of type bool.
ERROR(217): The operation '/=' does not work with arrays.
ERROR(218): '+' requires operands of type int but rhs is of type bool.
ERROR(218): The operation '+' does not work with arrays.
ERROR(219): '-' requires operands of type int but rhs is of type bool.
ERROR(219): The operation '-' does not work with arrays.
ERROR(220): '*' requires operands of type int but rhs is of type bool.
ERROR(220): The operation '*' does not work with arrays.
ERROR(221): '/' requires operands of type int but rhs is of type bool.
ERROR(221): The operation '/' does not work with arrays.
ERROR(222): '%' requires operands of type int but rhs is of type bool.
ERROR(222): The operation '%' does not work with arrays.
ERROR(223): 'and' requires operands of type bool but lhs is of type int.
ERROR(223): The operation 'and' does not work with arrays.
ERROR(224): 'or' requires operands of type bool but lhs is of type int.
ERROR(224): The operation 'or' does not work with arrays.
ERROR(225): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(225): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(226): '!=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(227): '!>' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(228): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(229): '!<' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(230): '<' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(231): '>' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(232): '*=' requires operands of type int but rhs is of type bool.
ERROR(232): The operation '*=' does not work with arrays.
ERROR(233): '+=' requires operands of type int but rhs is of type bool.
ERROR(233): The operation '+=' does not work with arrays.
ERROR(234): '-=' requires operands of type int but rhs is of type bool.
ERROR(234): The operation '-=' does not work with arrays.
ERROR(235): '/=' requires operands of type int but rhs is of type bool.
ERROR(235): The operation '/=' does not work with arrays.
ERROR(236): '+' requires operands of type int but rhs is of type bool.
ERROR(236): The operation '+' does not work with arrays.
ERROR(237): '-' requires operands of type int but rhs is of type bool.
ERROR(237): The operation '-' does not work with arrays.
ERROR(238): '*' requires operands of type int but rhs is of type bool.
ERROR(238): The operation '*' does not work with arrays.
ERROR(239): '/' requires operands of type int but rhs is of type bool.
ERROR(239): The operation '/' does not work with arrays.
ERROR(240): '%' requires operands of type int but rhs is of type bool.
ERROR(240): The operation '%' does not work with arrays.
ERROR(241): 'and' requires operands of type bool but lhs is of type int.
ERROR(241): The operation 'and' does not work with arrays.
ERROR(242): 'or' requires operands of type bool but lhs is of type int.
ERROR(242): The operation 'or' does not work with arrays.
ERROR(243): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(244): '!=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(244): '!=' requires operands of the same type but lhs is type int and rhs is type void.
ERROR(245): '!>' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(245): '!>' requires operands of the same type but lhs is type int and rhs is type void.
ERROR(246): '=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(246): '=' requires operands of the same type but lhs is type int and rhs is type void.
ERROR(247): '!<' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(247): '!<' requires operands of the same type but lhs is type int and rhs is type void.
ERROR(248): '<' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(248): '<' requires operands of the same type but lhs is type int and rhs is type void.
ERROR(249): '>' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(249): '>' requires operands of the same type but lhs is type int and rhs is type void.
ERROR(250): '*=' requires operands of type int but rhs is of type void.
ERROR(250): The operation '*=' does not work with arrays.
ERROR(251): '+=' requires operands of type int but rhs is of type void.
ERROR(251): The operation '+=' does not work with arrays.
ERROR(252): '-=' requires operands of type int but rhs is of type void.
ERROR(252): The operation '-=' does not work with arrays.
ERROR(253): '/=' requires operands of type int but rhs is of type void.
ERROR(253): The operation '/=' does not work with arrays.
ERROR(254): '+' requires operands of type int but rhs is of type void.
ERROR(254): The operation '+' does not work with arrays.
ERROR(255): '-' requires operands of type int but rhs is of type void.
ERROR(255): The operation '-' does not work with arrays.
ERROR(256): '*' requires operands of type int but rhs is of type void.
ERROR(256): The operation '*' does not work with arrays.
ERROR(257): '/' requires operands of type int but rhs is of type void.
ERROR(257): The operation '/' does not work with arrays.
ERROR(258): '%' requires operands of type int but rhs is of type void.
ERROR(258): The operation '%' does not work with arrays.
ERROR(259): 'and' requires operands of type bool but lhs is of type int.
ERROR(259): 'and' requires operands of type bool but rhs is of type void.
ERROR(259): The operation 'and' does not work with arrays.
ERROR(260): 'or' requires operands of type bool but lhs is of type int.
ERROR(260): 'or' requires operands of type bool but rhs is of type void.
ERROR(260): The operation 'or' does not work with arrays.
ERROR(261): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(261): '<=' requires operands of the same type but lhs is type int and rhs is type void.
ERROR(262): '!=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(263): '!>' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(264): '=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(265): '!<' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(266): '<' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(267): '>' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(268): '*=' requires operands of type int but lhs is of type char.
ERROR(269): '+=' requires operands of type int but lhs is of type char.
ERROR(270): '-=' requires operands of type int but lhs is of type char.
ERROR(271): '/=' requires operands of type int but lhs is of type char.
ERROR(272): '+' requires operands of type int but lhs is of type char.
ERROR(273): '-' requires operands of type int but lhs is of type char.
ERROR(274): '*' requires operands of type int but lhs is of type char.
ERROR(275): '/' requires operands of type int but lhs is of type char.
ERROR(276): '%' requires operands of type int but lhs is of type char.
ERROR(277): 'and' requires operands of type bool but lhs is of type char.
ERROR(277): 'and' requires operands of type bool but rhs is of type int.
ERROR(278): 'or' requires operands of type bool but lhs is of type char.
ERROR(278): 'or' requires operands of type bool but rhs is of type int.
ERROR(279): '<=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(280): '!=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(280): '!=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(281): '!>' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(281): '!>' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(282): '=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(282): '=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(283): '!<' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(283): '!<' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(284): '<' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(284): '<' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(285): '>' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(285): '>' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(286): '*=' requires operands of type int but lhs is of type char.
ERROR(286): The operation '*=' does not work with arrays.
ERROR(287): '+=' requires operands of type int but lhs is of type char.
ERROR(287): The operation '+=' does not work with arrays.
ERROR(288): '-=' requires operands of type int but lhs is of type char.
ERROR(288): The operation '-=' does not work with arrays.
ERROR(289): '/=' requires operands of type int but lhs is of type char.
ERROR(289): The operation '/=' does not work with arrays.
ERROR(290): '+' requires operands of type int but lhs is of type char.
ERROR(290): The operation '+' does not work with arrays.
ERROR(291): '-' requires operands of type int but lhs is of type char.
ERROR(291): The operation '-' does not work with arrays.
ERROR(292): '*' requires operands of type int but lhs is of type char.
ERROR(292): The operation '*' does not work with arrays.
ERROR(293): '/' requires operands of type int but lhs is of type char.
ERROR(293): The operation '/' does not work with arrays.
ERROR(294): '%' requires operands of type int but lhs is of type char.
ERROR(294): The operation '%' does not work with arrays.
ERROR(295): 'and' requires operands of type bool but lhs is of type char.
ERROR(295): 'and' requires operands of type bool but rhs is of type int.
ERROR(295): The operation 'and' does not work with arrays.
ERROR(296): 'or' requires operands of type bool but lhs is of type char.
ERROR(296): 'or' requires operands of type bool but rhs is of type int.
ERROR(296): The operation 'or' does not work with arrays.
ERROR(297): '<=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(297): '<=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(304): '*=' requires operands of type int but lhs is of type char.
ERROR(304): '*=' requires operands of type int but rhs is of type char.
ERROR(305): '+=' requires operands of type int but lhs is of type char.
ERROR(305): '+=' requires operands of type int but rhs is of type char.
ERROR(306): '-=' requires operands of type int but lhs is of type char.
ERROR(306): '-=' requires operands of type int but rhs is of type char.
ERROR(307): '/=' requires operands of type int but lhs is of type char.
ERROR(307): '/=' requires operands of type int but rhs is of type char.
ERROR(308): '+' requires operands of type int but lhs is of type char.
ERROR(308): '+' requires operands of type int but rhs is of type char.
ERROR(309): '-' requires operands of type int but lhs is of type char.
ERROR(309): '-' requires operands of type int but rhs is of type char.
ERROR(310): '*' requires operands of type int but lhs is of type char.
ERROR(310): '*' requires operands of type int but rhs is of type char.
ERROR(311): '/' requires operands of type int but lhs is of type char.
ERROR(311): '/' requires operands of type int but rhs is of type char.
ERROR(312): '%' requires operands of type int but lhs is of type char.
ERROR(312): '%' requires operands of type int but rhs is of type char.
ERROR(313): 'and' requires operands of type bool but lhs is of type char.
ERROR(313): 'and' requires operands of type bool but rhs is of type char.
ERROR(314): 'or' requires operands of type bool but lhs is of type char.
ERROR(314): 'or' requires operands of type bool but rhs is of type char.
ERROR(316): '!=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(317): '!>' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(318): '=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(319): '!<' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(320): '<' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(321): '>' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(322): '*=' requires operands of type int but lhs is of type char.
ERROR(322): '*=' requires operands of type int but rhs is of type char.
ERROR(322): The operation '*=' does not work with arrays.
ERROR(323): '+=' requires operands of type int but lhs is of type char.
ERROR(323): '+=' requires operands of type int but rhs is of type char.
ERROR(323): The operation '+=' does not work with arrays.
ERROR(324): '-=' requires operands of type int but lhs is of type char.
ERROR(324): '-=' requires operands of type int but rhs is of type char.
ERROR(324): The operation '-=' does not work with arrays.
ERROR(325): '/=' requires operands of type int but lhs is of type char.
ERROR(325): '/=' requires operands of type int but rhs is of type char.
ERROR(325): The operation '/=' does not work with arrays.
ERROR(326): '+' requires operands of type int but lhs is of type char.
ERROR(326): '+' requires operands of type int but rhs is of type char.
ERROR(326): The operation '+' does not work with arrays.
ERROR(327): '-' requires operands of type int but lhs is of type char.
ERROR(327): '-' requires operands of type int but rhs is of type char.
ERROR(327): The operation '-' does not work with arrays.
ERROR(328): '*' requires operands of type int but lhs is of type char.
ERROR(328): '*' requires operands of type int but rhs is of type char.
ERROR(328): The operation '*' does not work with arrays.
ERROR(329): '/' requires operands of type int but lhs is of type char.
ERROR(329): '/' requires operands of type int but rhs is of type char.
ERROR(329): The operation '/' does not work with arrays.
ERROR(330): '%' requires operands of type int but lhs is of type char.
ERROR(330): '%' requires operands of type int but rhs is of type char.
ERROR(330): The operation '%' does not work with arrays.
ERROR(331): 'and' requires operands of type bool but lhs is of type char.
ERROR(331): 'and' requires operands of type bool but rhs is of type char.
ERROR(331): The operation 'and' does not work with arrays.
ERROR(332): 'or' requires operands of type bool but lhs is of type char.
ERROR(332): 'or' requires operands of type bool but rhs is of type char.
ERROR(332): The operation 'or' does not work with arrays.
ERROR(333): '<=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(334): '!=' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(335): '!>' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(336): '=' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(337): '!<' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(338): '<' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(339): '>' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(340): '*=' requires operands of type int but lhs is of type char.
ERROR(340): '*=' requires operands of type int but rhs is of type bool.
ERROR(341): '+=' requires operands of type int but lhs is of type char.
ERROR(341): '+=' requires operands of type int but rhs is of type bool.
ERROR(342): '-=' requires operands of type int but lhs is of type char.
ERROR(342): '-=' requires operands of type int but rhs is of type bool.
ERROR(343): '/=' requires operands of type int but lhs is of type char.
ERROR(343): '/=' requires operands of type int but rhs is of type bool.
ERROR(344): '+' requires operands of type int but lhs is of type char.
ERROR(344): '+' requires operands of type int but rhs is of type bool.
ERROR(345): '-' requires operands of type int but lhs is of type char.
ERROR(345): '-' requires operands of type int but rhs is of type bool.
ERROR(346): '*' requires operands of type int but lhs is of type char.
ERROR(346): '*' requires operands of type int but rhs is of type bool.
ERROR(347): '/' requires operands of type int but lhs is of type char.
ERROR(347): '/' requires operands of type int but rhs is of type bool.
ERROR(348): '%' requires operands of type int but lhs is of type char.
ERROR(348): '%' requires operands of type int but rhs is of type bool.
ERROR(349): 'and' requires operands of type bool but lhs is of type char.
ERROR(350): 'or' requires operands of type bool but lhs is of type char.
ERROR(351): '<=' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(352): '!=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(352): '!=' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(353): '!>' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(353): '!>' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(354): '=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(354): '=' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(355): '!<' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(355): '!<' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(356): '<' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(356): '<' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(357): '>' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(357): '>' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(358): '*=' requires operands of type int but lhs is of type char.
ERROR(358): '*=' requires operands of type int but rhs is of type bool.
ERROR(358): The operation '*=' does not work with arrays.
ERROR(359): '+=' requires operands of type int but lhs is of type char.
ERROR(359): '+=' requires operands of type int but rhs is of type bool.
ERROR(359): The operation '+=' does not work with arrays.
ERROR(360): '-=' requires operands of type int but lhs is of type char.
ERROR(360): '-=' requires operands of type int but rhs is of type bool.
ERROR(360): The operation '-=' does not work with arrays.
ERROR(361): '/=' requires operands of type int but lhs is of type char.
ERROR(361): '/=' requires operands of type int but rhs is of type bool.
ERROR(361): The operation '/=' does not work with arrays.
ERROR(362): '+' requires operands of type int but lhs is of type char.
ERROR(362): '+' requires operands of type int but rhs is of type bool.
ERROR(362): The operation '+' does not work with arrays.
ERROR(363): '-' requires operands of type int but lhs is of type char.
ERROR(363): '-' requires operands of type int but rhs is of type bool.
ERROR(363): The operation '-' does not work with arrays.
ERROR(364): '*' requires operands of type int but lhs is of type char.
ERROR(364): '*' requires operands of type int but rhs is of type bool.
ERROR(364): The operation '*' does not work with arrays.
ERROR(365): '/' requires operands of type int but lhs is of type char.
ERROR(365): '/' requires operands of type int but rhs is of type bool.
ERROR(365): The operation '/' does not work with arrays.
ERROR(366): '%' requires operands of type int but lhs is of type char.
ERROR(366): '%' requires operands of type int but rhs is of type bool.
ERROR(366): The operation '%' does not work with arrays.
ERROR(367): 'and' requires operands of type bool but lhs is of type char.
ERROR(367): The operation 'and' does not work with arrays.
ERROR(368): 'or' requires operands of type bool but lhs is of type char.
ERROR(368): The operation 'or' does not work with arrays.
ERROR(369): '<=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(369): '<=' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(370): '!=' requires operands of the same type but lhs is type char and rhs is type void.
ERROR(371): '!>' requires operands of the same type but lhs is type char and rhs is type void.
ERROR(372): '=' requires operands of the same type but lhs is type char and rhs is type void.
ERROR(373): '!<' requires operands of the same type but lhs is type char and rhs is type void.
ERROR(374): '<' requires operands of the same type but lhs is type char and rhs is type void.
ERROR(375): '>' requires operands of the same type but lhs is type char and rhs is type void.
ERROR(376): '*=' requires operands of type int but lhs is of type char.
ERROR(376): '*=' requires operands of type int but rhs is of type void.
ERROR(377): '+=' requires operands of type int but lhs is of type char.
ERROR(377): '+=' requires operands of type int but rhs is of type void.
ERROR(378): '-=' requires operands of type int but lhs is of type char.
ERROR(378): '-=' requires operands of type int but rhs is of type void.
ERROR(379): '/=' requires operands of type int but lhs is of type char.
ERROR(379): '/=' requires operands of type int but rhs is of type void.
ERROR(380): '+' requires operands of type int but lhs is of type char.
ERROR(380): '+' requires operands of type int but rhs is of type void.
ERROR(381): '-' requires operands of type int but lhs is of type char.
ERROR(381): '-' requires operands of type int but rhs is of type void.
ERROR(382): '*' requires operands of type int but lhs is of type char.
ERROR(382): '*' requires operands of type int but rhs is of type void.
ERROR(383): '/' requires operands of type int but lhs is of type char.
ERROR(383): '/' requires operands of type int but rhs is of type void.
ERROR(384): '%' requires operands of type int but lhs is of type char.
ERROR(384): '%' requires operands of type int but rhs is of type void.
ERROR(385): 'and' requires operands of type bool but lhs is of type char.
ERROR(385): 'and' requires operands of type bool but rhs is of type void.
ERROR(386): 'or' requires operands of type bool but lhs is of type char.
ERROR(386): 'or' requires operands of type bool but rhs is of type void.
ERROR(387): '<=' requires operands of the same type but lhs is type char and rhs is type void.
ERROR(388): '!=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(388): '!=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(389): '!>' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(389): '!>' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(390): '=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(390): '=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(391): '!<' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(391): '!<' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(392): '<' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(392): '<' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(393): '>' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(393): '>' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(394): '*=' requires operands of type int but lhs is of type char.
ERROR(394): The operation '*=' does not work with arrays.
ERROR(395): '+=' requires operands of type int but lhs is of type char.
ERROR(395): The operation '+=' does not work with arrays.
ERROR(396): '-=' requires operands of type int but lhs is of type char.
ERROR(396): The operation '-=' does not work with arrays.
ERROR(397): '/=' requires operands of type int but lhs is of type char.
ERROR(397): The operation '/=' does not work with arrays.
ERROR(398): '+' requires operands of type int but lhs is of type char.
ERROR(398): The operation '+' does not work with arrays.
ERROR(399): '-' requires operands of type int but lhs is of type char.
ERROR(399): The operation '-' does not work with arrays.
ERROR(400): '*' requires operands of type int but lhs is of type char.
ERROR(400): The operation '*' does not work with arrays.
ERROR(401): '/' requires operands of type int but lhs is of type char.
ERROR(401): The operation '/' does not work with arrays.
ERROR(402): '%' requires operands of type int but lhs is of type char.
ERROR(402): The operation '%' does not work with arrays.
ERROR(403): 'and' requires operands of type bool but lhs is of type char.
ERROR(403): 'and' requires operands of type bool but rhs is of type int.
ERROR(403): The operation 'and' does not work with arrays.
ERROR(404): 'or' requires operands of type bool but lhs is of type char.
ERROR(404): 'or' requires operands of type bool but rhs is of type int.
ERROR(404): The operation 'or' does not work with arrays.
ERROR(405): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(405): '<=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(406): '!=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(407): '!>' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(408): '=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(409): '!<' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(410): '<' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(411): '>' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(412): '*=' requires operands of type int but lhs is of type char.
ERROR(412): The operation '*=' does not work with arrays.
ERROR(413): '+=' requires operands of type int but lhs is of type char.
ERROR(413): The operation '+=' does not work with arrays.
ERROR(414): '-=' requires operands of type int but lhs is of type char.
ERROR(414): The operation '-=' does not work with arrays.
ERROR(415): '/=' requires operands of type int but lhs is of type char.
ERROR(415): The operation '/=' does not work with arrays.
ERROR(416): '+' requires operands of type int but lhs is of type char.
ERROR(416): The operation '+' does not work with arrays.
ERROR(417): '-' requires operands of type int but lhs is of type char.
ERROR(417): The operation '-' does not work with arrays.
ERROR(418): '*' requires operands of type int but lhs is of type char.
ERROR(418): The operation '*' does not work with arrays.
ERROR(419): '/' requires operands of type int but lhs is of type char.
ERROR(419): The operation '/' does not work with arrays.
ERROR(420): '%' requires operands of type int but lhs is of type char.
ERROR(420): The operation '%' does not work with arrays.
ERROR(421): 'and' requires operands of type bool but lhs is of type char.
ERROR(421): 'and' requires operands of type bool but rhs is of type int.
ERROR(421): The operation 'and' does not work with arrays.
ERROR(422): 'or' requires operands of type bool but lhs is of type char.
ERROR(422): 'or' requires operands of type bool but rhs is of type int.
ERROR(422): The operation 'or' does not work with arrays.
ERROR(423): '<=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(424): '!=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(425): '!>' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(426): '=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(427): '!<' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(428): '<' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(429): '>' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(430): '*=' requires operands of type int but lhs is of type char.
ERROR(430): '*=' requires operands of type int but rhs is of type char.
ERROR(430): The operation '*=' does not work with arrays.
ERROR(431): '+=' requires operands of type int but lhs is of type char.
ERROR(431): '+=' requires operands of type int but rhs is of type char.
ERROR(431): The operation '+=' does not work with arrays.
ERROR(432): '-=' requires operands of type int but lhs is of type char.
ERROR(432): '-=' requires operands of type int but rhs is of type char.
ERROR(432): The operation '-=' does not work with arrays.
ERROR(433): '/=' requires operands of type int but lhs is of type char.
ERROR(433): '/=' requires operands of type int but rhs is of type char.
ERROR(433): The operation '/=' does not work with arrays.
ERROR(434): '+' requires operands of type int but lhs is of type char.
ERROR(434): '+' requires operands of type int but rhs is of type char.
ERROR(434): The operation '+' does not work with arrays.
ERROR(435): '-' requires operands of type int but lhs is of type char.
ERROR(435): '-' requires operands of type int but rhs is of type char.
ERROR(435): The operation '-' does not work with arrays.
ERROR(436): '*' requires operands of type int but lhs is of type char.
ERROR(436): '*' requires operands of type int but rhs is of type char.
ERROR(436): The operation '*' does not work with arrays.
ERROR(437): '/' requires operands of type int but lhs is of type char.
ERROR(437): '/' requires operands of type int but rhs is of type char.
ERROR(437): The operation '/' does not work with arrays.
ERROR(438): '%' requires operands of type int but lhs is of type char.
ERROR(438): '%' requires operands of type int but rhs is of type char.
ERROR(438): The operation '%' does not work with arrays.
ERROR(439): 'and' requires operands of type bool but lhs is of type char.
ERROR(439): 'and' requires operands of type bool but rhs is of type char.
ERROR(439): The operation 'and' does not work with arrays.
ERROR(440): 'or' requires operands of type bool but lhs is of type char.
ERROR(440): 'or' requires operands of type bool but rhs is of type char.
ERROR(440): The operation 'or' does not work with arrays.
ERROR(441): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(448): '*=' requires operands of type int but lhs is of type char.
ERROR(448): '*=' requires operands of type int but rhs is of type char.
ERROR(448): The operation '*=' does not work with arrays.
ERROR(449): '+=' requires operands of type int but lhs is of type char.
ERROR(449): '+=' requires operands of type int but rhs is of type char.
ERROR(449): The operation '+=' does not work with arrays.
ERROR(450): '-=' requires operands of type int but lhs is of type char.
ERROR(450): '-=' requires operands of type int but rhs is of type char.
ERROR(450): The operation '-=' does not work with arrays.
ERROR(451): '/=' requires operands of type int but lhs is of type char.
ERROR(451): '/=' requires operands of type int but rhs is of type char.
ERROR(451): The operation '/=' does not work with arrays.
ERROR(452): '+' requires operands of type int but lhs is of type char.
ERROR(452): '+' requires operands of type int but rhs is of type char.
ERROR(452): The operation '+' does not work with arrays.
ERROR(453): '-' requires operands of type int but lhs is of type char.
ERROR(453): '-' requires operands of type int but rhs is of type char.
ERROR(453): The operation '-' does not work with arrays.
ERROR(454): '*' requires operands of type int but lhs is of type char.
ERROR(454): '*' requires operands of type int but rhs is of type char.
ERROR(454): The operation '*' does not work with arrays.
ERROR(455): '/' requires operands of type int but lhs is of type char.
ERROR(455): '/' requires operands of type int but rhs is of type char.
ERROR(455): The operation '/' does not work with arrays.
ERROR(456): '%' requires operands of type int but lhs is of type char.
ERROR(456): '%' requires operands of type int but rhs is of type char.
ERROR(456): The operation '%' does not work with arrays.
ERROR(457): 'and' requires operands of type bool but lhs is of type char.
ERROR(457): 'and' requires operands of type bool but rhs is of type char.
ERROR(457): The operation 'and' does not work with arrays.
ERROR(458): 'or' requires operands of type bool but lhs is of type char.
ERROR(458): 'or' requires operands of type bool but rhs is of type char.
ERROR(458): The operation 'or' does not work with arrays.
ERROR(460): '!=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(460): '!=' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(461): '!>' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(461): '!>' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(462): '=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(462): '=' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(463): '!<' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(463): '!<' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(464): '<' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(464): '<' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(465): '>' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(465): '>' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(466): '*=' requires operands of type int but lhs is of type char.
ERROR(466): '*=' requires operands of type int but rhs is of type bool.
ERROR(466): The operation '*=' does not work with arrays.
ERROR(467): '+=' requires operands of type int but lhs is of type char.
ERROR(467): '+=' requires operands of type int but rhs is of type bool.
ERROR(467): The operation '+=' does not work with arrays.
ERROR(468): '-=' requires operands of type int but lhs is of type char.
ERROR(468): '-=' requires operands of type int but rhs is of type bool.
ERROR(468): The operation '-=' does not work with arrays.
ERROR(469): '/=' requires operands of type int but lhs is of type char.
ERROR(469): '/=' requires operands of type int but rhs is of type bool.
ERROR(469): The operation '/=' does not work with arrays.
ERROR(470): '+' requires operands of type int but lhs is of type char.
ERROR(470): '+' requires operands of type int but rhs is of type bool.
ERROR(470): The operation '+' does not work with arrays.
ERROR(471): '-' requires operands of type int but lhs is of type char.
ERROR(471): '-' requires operands of type int but rhs is of type bool.
ERROR(471): The operation '-' does not work with arrays.
ERROR(472): '*' requires operands of type int but lhs is of type char.
ERROR(472): '*' requires operands of type int but rhs is of type bool.
ERROR(472): The operation '*' does not work with arrays.
ERROR(473): '/' requires operands of type int but lhs is of type char.
ERROR(473): '/' requires operands of type int but rhs is of type bool.
ERROR(473): The operation '/' does not work with arrays.
ERROR(474): '%' requires operands of type int but lhs is of type char.
ERROR(474): '%' requires operands of type int but rhs is of type bool.
ERROR(474): The operation '%' does not work with arrays.
ERROR(475): 'and' requires operands of type bool but lhs is of type char.
ERROR(475): The operation 'and' does not work with arrays.
ERROR(476): 'or' requires operands of type bool but lhs is of type char.
ERROR(476): The operation 'or' does not work with arrays.
ERROR(477): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(477): '<=' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(478): '!=' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(479): '!>' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(480): '=' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(481): '!<' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(482): '<' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(483): '>' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(484): '*=' requires operands of type int but lhs is of type char.
ERROR(484): '*=' requires operands of type int but rhs is of type bool.
ERROR(484): The operation '*=' does not work with arrays.
ERROR(485): '+=' requires operands of type int but lhs is of type char.
ERROR(485): '+=' requires operands of type int but rhs is of type bool.
ERROR(485): The operation '+=' does not work with arrays.
ERROR(486): '-=' requires operands of type int but lhs is of type char.
ERROR(486): '-=' requires operands of type int but rhs is of type bool.
ERROR(486): The operation '-=' does not work with arrays.
ERROR(487): '/=' requires operands of type int but lhs is of type char.
ERROR(487): '/=' requires operands of type int but rhs is of type bool.
ERROR(487): The operation '/=' does not work with arrays.
ERROR(488): '+' requires operands of type int but lhs is of type char.
ERROR(488): '+' requires operands of type int but rhs is of type bool.
ERROR(488): The operation '+' does not work with arrays.
ERROR(489): '-' requires operands of type int but lhs is of type char.
ERROR(489): '-' requires operands of type int but rhs is of type bool.
ERROR(489): The operation '-' does not work with arrays.
ERROR(490): '*' requires operands of type int but lhs is of type char.
ERROR(490): '*' requires operands of type int but rhs is of type bool.
ERROR(490): The operation '*' does not work with arrays.
ERROR(491): '/' requires operands of type int but lhs is of type char.
ERROR(491): '/' requires operands of type int but rhs is of type bool.
ERROR(491): The operation '/' does not work with arrays.
ERROR(492): '%' requires operands of type int but lhs is of type char.
ERROR(492): '%' requires operands of type int but rhs is of type bool.
ERROR(492): The operation '%' does not work with arrays.
ERROR(493): 'and' requires operands of type bool but lhs is of type char.
ERROR(493): The operation 'and' does not work with arrays.
ERROR(494): 'or' requires operands of type bool but lhs is of type char.
ERROR(494): The operation 'or' does not work with arrays.
ERROR(495): '<=' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(496): '!=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(496): '!=' requires operands of the same type but lhs is type char and rhs is type void.
ERROR(497): '!>' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(497): '!>' requires operands of the same type but lhs is type char and rhs is type void.
ERROR(498): '=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(498): '=' requires operands of the same type but lhs is type char and rhs is type void.
ERROR(499): '!<' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(499): '!<' requires operands of the same type but lhs is type char and rhs is type void.
ERROR(500): '<' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(500): '<' requires operands of the same type but lhs is type char and rhs is type void.
ERROR(501): '>' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(501): '>' requires operands of the same type but lhs is type char and rhs is type void.
ERROR(502): '*=' requires operands of type int but lhs is of type char.
ERROR(502): '*=' requires operands of type int but rhs is of type void.
ERROR(502): The operation '*=' does not work with arrays.
ERROR(503): '+=' requires operands of type int but lhs is of type char.
ERROR(503): '+=' requires operands of type int but rhs is of type void.
ERROR(503): The operation '+=' does not work with arrays.
ERROR(504): '-=' requires operands of type int but lhs is of type char.
ERROR(504): '-=' requires operands of type int but rhs is of type void.
ERROR(504): The operation '-=' does not work with arrays.
ERROR(505): '/=' requires operands of type int but lhs is of type char.
ERROR(505): '/=' requires operands of type int but rhs is of type void.
ERROR(505): The operation '/=' does not work with arrays.
ERROR(506): '+' requires operands of type int but lhs is of type char.
ERROR(506): '+' requires operands of type int but rhs is of type void.
ERROR(506): The operation '+' does not work with arrays.
ERROR(507): '-' requires operands of type int but lhs is of type char.
ERROR(507): '-' requires operands of type int but rhs is of type void.
ERROR(507): The operation '-' does not work with arrays.
ERROR(508): '*' requires operands of type int but lhs is of type char.
ERROR(508): '*' requires operands of type int but rhs is of type void.
ERROR(508): The operation '*' does not work with arrays.
ERROR(509): '/' requires operands of type int but lhs is of type char.
ERROR(509): '/' requires operands of type int but rhs is of type void.
ERROR(509): The operation '/' does not work with arrays.
ERROR(510): '%' requires operands of type int but lhs is of type char.
ERROR(510): '%' requires operands of type int but rhs is of type void.
ERROR(510): The operation '%' does not work with arrays.
ERROR(511): 'and' requires operands of type bool but lhs is of type char.
ERROR(511): 'and' requires operands of type bool but rhs is of type void.
ERROR(511): The operation 'and' does not work with arrays.
ERROR(512): 'or' requires operands of type bool but lhs is of type char.
ERROR(512): 'or' requires operands of type bool but rhs is of type void.
ERROR(512): The operation 'or' does not work with arrays.
ERROR(513): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(513): '<=' requires operands of the same type but lhs is type char and rhs is type void.
ERROR(514): '!=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(515): '!>' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(516): '=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(517): '!<' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(518): '<' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(519): '>' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(520): '*=' requires operands of type int but lhs is of type bool.
ERROR(521): '+=' requires operands of type int but lhs is of type bool.
ERROR(522): '-=' requires operands of type int but lhs is of type bool.
ERROR(523): '/=' requires operands of type int but lhs is of type bool.
ERROR(524): '+' requires operands of type int but lhs is of type bool.
ERROR(525): '-' requires operands of type int but lhs is of type bool.
ERROR(526): '*' requires operands of type int but lhs is of type bool.
ERROR(527): '/' requires operands of type int but lhs is of type bool.
ERROR(528): '%' requires operands of type int but lhs is of type bool.
ERROR(529): 'and' requires operands of type bool but rhs is of type int.
ERROR(530): 'or' requires operands of type bool but rhs is of type int.
ERROR(531): '<=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(532): '!=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(532): '!=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(533): '!>' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(533): '!>' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(534): '=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(534): '=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(535): '!<' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(535): '!<' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(536): '<' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(536): '<' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(537): '>' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(537): '>' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(538): '*=' requires operands of type int but lhs is of type bool.
ERROR(538): The operation '*=' does not work with arrays.
ERROR(539): '+=' requires operands of type int but lhs is of type bool.
ERROR(539): The operation '+=' does not work with arrays.
ERROR(540): '-=' requires operands of type int but lhs is of type bool.
ERROR(540): The operation '-=' does not work with arrays.
ERROR(541): '/=' requires operands of type int but lhs is of type bool.
ERROR(541): The operation '/=' does not work with arrays.
ERROR(542): '+' requires operands of type int but lhs is of type bool.
ERROR(542): The operation '+' does not work with arrays.
ERROR(543): '-' requires operands of type int but lhs is of type bool.
ERROR(543): The operation '-' does not work with arrays.
ERROR(544): '*' requires operands of type int but lhs is of type bool.
ERROR(544): The operation '*' does not work with arrays.
ERROR(545): '/' requires operands of type int but lhs is of type bool.
ERROR(545): The operation '/' does not work with arrays.
ERROR(546): '%' requires operands of type int but lhs is of type bool.
ERROR(546): The operation '%' does not work with arrays.
ERROR(547): 'and' requires operands of type bool but rhs is of type int.
ERROR(547): The operation 'and' does not work with arrays.
ERROR(548): 'or' requires operands of type bool but rhs is of type int.
ERROR(548): The operation 'or' does not work with arrays.
ERROR(549): '<=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(549): '<=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(550): '!=' requires operands of the same type but lhs is type bool and rhs is type char.
ERROR(551): '!>' requires operands of the same type but lhs is type bool and rhs is type char.
ERROR(552): '=' requires operands of the same type but lhs is type bool and rhs is type char.
ERROR(553): '!<' requires operands of the same type but lhs is type bool and rhs is type char.
ERROR(554): '<' requires operands of the same type but lhs is type bool and rhs is type char.
ERROR(555): '>' requires operands of the same type but lhs is type bool and rhs is type char.
ERROR(556): '*=' requires operands of type int but lhs is of type bool.
ERROR(556): '*=' requires operands of type int but rhs is of type char.
ERROR(557): '+=' requires operands of type int but lhs is of type bool.
ERROR(557): '+=' requires operands of type int but rhs is of type char.
ERROR(558): '-=' requires operands of type int but lhs is of type bool.
ERROR(558): '-=' requires operands of type int but rhs is of type char.
ERROR(559): '/=' requires operands of type int but lhs is of type bool.
ERROR(559): '/=' requires operands of type int but rhs is of type char.
ERROR(560): '+' requires operands of type int but lhs is of type bool.
ERROR(560): '+' requires operands of type int but rhs is of type char.
ERROR(561): '-' requires operands of type int but lhs is of type bool.
ERROR(561): '-' requires operands of type int but rhs is of type char.
ERROR(562): '*' requires operands of type int but lhs is of type bool.
ERROR(562): '*' requires operands of type int but rhs is of type char.
ERROR(563): '/' requires operands of type int but lhs is of type bool.
ERROR(563): '/' requires operands of type int but rhs is of type char.
ERROR(564): '%' requires operands of type int but lhs is of type bool.
ERROR(564): '%' requires operands of type int but rhs is of type char.
ERROR(565): 'and' requires operands of type bool but rhs is of type char.
ERROR(566): 'or' requires operands of type bool but rhs is of type char.
ERROR(567): '<=' requires operands of the same type but lhs is type bool and rhs is type char.
ERROR(568): '!=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(568): '!=' requires operands of the same type but lhs is type bool and rhs is type char.
ERROR(569): '!>' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(569): '!>' requires operands of the same type but lhs is type bool and rhs is type char.
ERROR(570): '=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(570): '=' requires operands of the same type but lhs is type bool and rhs is type char.
ERROR(571): '!<' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(571): '!<' requires operands of the same type but lhs is type bool and rhs is type char.
ERROR(572): '<' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(572): '<' requires operands of the same type but lhs is type bool and rhs is type char.
ERROR(573): '>' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(573): '>' requires operands of the same type but lhs is type bool and rhs is type char.
ERROR(574): '*=' requires operands of type int but lhs is of type bool.
ERROR(574): '*=' requires operands of type int but rhs is of type char.
ERROR(574): The operation '*=' does not work with arrays.
ERROR(575): '+=' requires operands of type int but lhs is of type bool.
ERROR(575): '+=' requires operands of type int but rhs is of type char.
ERROR(575): The operation '+=' does not work with arrays.
ERROR(576): '-=' requires operands of type int but lhs is of type bool.
ERROR(576): '-=' requires operands of type int but rhs is of type char.
ERROR(576): The operation '-=' does not work with arrays.
ERROR(577): '/=' requires operands of type int but lhs is of type bool.
ERROR(577): '/=' requires operands of type int but rhs is of type char.
ERROR(577): The operation '/=' does not work with arrays.
ERROR(578): '+' requires operands of type int but lhs is of type bool.
ERROR(578): '+' requires operands of type int but rhs is of type char.
ERROR(578): The operation '+' does not work with arrays.
ERROR(579): '-' requires operands of type int but lhs is of type bool.
ERROR(579): '-' requires operands of type int but rhs is of type char.
ERROR(579): The operation '-' does not work with arrays.
ERROR(580): '*' requires operands of type int but lhs is of type bool.
ERROR(580): '*' requires operands of type int but rhs is of type char.
ERROR(580): The operation '*' does not work with arrays.
ERROR(581): '/' requires operands of type int but lhs is of type bool.
ERROR(581): '/' requires operands of type int but rhs is of type char.
ERROR(581): The operation '/' does not work with arrays.
ERROR(582): '%' requires operands of type int but lhs is of type bool.
ERROR(582): '%' requires operands of type int but rhs is of type char.
ERROR(582): The operation '%' does not work with arrays.
ERROR(583): 'and' requires operands of type bool but rhs is of type char.
ERROR(583): The operation 'and' does not work with arrays.
ERROR(584): 'or' requires operands of type bool but rhs is of type char.
ERROR(584): The operation 'or' does not work with arrays.
ERROR(585): '<=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(585): '<=' requires operands of the same type but lhs is type bool and rhs is type char.
ERROR(592): '*=' requires operands of type int but lhs is of type bool.
ERROR(592): '*=' requires operands of type int but rhs is of type bool.
ERROR(593): '+=' requires operands of type int but lhs is of type bool.
ERROR(593): '+=' requires operands of type int but rhs is of type bool.
ERROR(594): '-=' requires operands of type int but lhs is of type bool.
ERROR(594): '-=' requires operands of type int but rhs is of type bool.
ERROR(595): '/=' requires operands of type int but lhs is of type bool.
ERROR(595): '/=' requires operands of type int but rhs is of type bool.
ERROR(596): '+' requires operands of type int but lhs is of type bool.
ERROR(596): '+' requires operands of type int but rhs is of type bool.
ERROR(597): '-' requires operands of type int but lhs is of type bool.
ERROR(597): '-' requires operands of type int but rhs is of type bool.
ERROR(598): '*' requires operands of type int but lhs is of type bool.
ERROR(598): '*' requires operands of type int but rhs is of type bool.
ERROR(599): '/' requires operands of type int but lhs is of type bool.
ERROR(599): '/' requires operands of type int but rhs is of type bool.
ERROR(600): '%' requires operands of type int but lhs is of type bool.
ERROR(600): '%' requires operands of type int but rhs is of type bool.
ERROR(604): '!=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(605): '!>' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(606): '=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(607): '!<' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(608): '<' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(609): '>' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(610): '*=' requires operands of type int but lhs is of type bool.
ERROR(610): '*=' requires operands of type int but rhs is of type bool.
ERROR(610): The operation '*=' does not work with arrays.
ERROR(611): '+=' requires operands of type int but lhs is of type bool.
ERROR(611): '+=' requires operands of type int but rhs is of type bool.
ERROR(611): The operation '+=' does not work with arrays.
ERROR(612): '-=' requires operands of type int but lhs is of type bool.
ERROR(612): '-=' requires operands of type int but rhs is of type bool.
ERROR(612): The operation '-=' does not work with arrays.
ERROR(613): '/=' requires operands of type int but lhs is of type bool.
ERROR(613): '/=' requires operands of type int but rhs is of type bool.
ERROR(613): The operation '/=' does not work with arrays.
ERROR(614): '+' requires operands of type int but lhs is of type bool.
ERROR(614): '+' requires operands of type int but rhs is of type bool.
ERROR(614): The operation '+' does not work with arrays.
ERROR(615): '-' requires operands of type int but lhs is of type bool.
ERROR(615): '-' requires operands of type int but rhs is of type bool.
ERROR(615): The operation '-' does not work with arrays.
ERROR(616): '*' requires operands of type int but lhs is of type bool.
ERROR(616): '*' requires operands of type int but rhs is of type bool.
ERROR(616): The operation '*' does not work with arrays.
ERROR(617): '/' requires operands of type int but lhs is of type bool.
ERROR(617): '/' requires operands of type int but rhs is of type bool.
ERROR(617): The operation '/' does not work with arrays.
ERROR(618): '%' requires operands of type int but lhs is of type bool.
ERROR(618): '%' requires operands of type int but rhs is of type bool.
ERROR(618): The operation '%' does not work with arrays.
ERROR(619): The operation 'and' does not work with arrays.
ERROR(620): The operation 'or' does not work with arrays.
ERROR(621): '<=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(622): '!=' requires operands of the same type but lhs is type bool and rhs is type void.
ERROR(623): '!>' requires operands of the same type but lhs is type bool and rhs is type void.
ERROR(624): '=' requires operands of the same type but lhs is type bool and rhs is type void.
ERROR(625): '!<' requires operands of the same type but lhs is type bool and rhs is type void.
ERROR(626): '<' requires operands of the same type but lhs is type bool and rhs is type void.
ERROR(627): '>' requires operands of the same type but lhs is type bool and rhs is type void.
ERROR(628): '*=' requires operands of type int but lhs is of type bool.
ERROR(628): '*=' requires operands of type int but rhs is of type void.
ERROR(629): '+=' requires operands of type int but lhs is of type bool.
ERROR(629): '+=' requires operands of type int but rhs is of type void.
ERROR(630): '-=' requires operands of type int but lhs is of type bool.
ERROR(630): '-=' requires operands of type int but rhs is of type void.
ERROR(631): '/=' requires operands of type int but lhs is of type bool.
ERROR(631): '/=' requires operands of type int but rhs is of type void.
ERROR(632): '+' requires operands of type int but lhs is of type bool.
ERROR(632): '+' requires operands of type int but rhs is of type void.
ERROR(633): '-' requires operands of type int but lhs is of type bool.
ERROR(633): '-' requires operands of type int but rhs is of type void.
ERROR(634): '*' requires operands of type int but lhs is of type bool.
ERROR(634): '*' requires operands of type int but rhs is of type void.
ERROR(635): '/' requires operands of type int but lhs is of type bool.
ERROR(635): '/' requires operands of type int but rhs is of type void.
ERROR(636): '%' requires operands of type int but lhs is of type bool.
ERROR(636): '%' requires operands of type int but rhs is of type void.
ERROR(637): 'and' requires operands of type bool but rhs is of type void.
ERROR(638): 'or' requires operands of type bool but rhs is of type void.
ERROR(639): '<=' requires operands of the same type but lhs is type bool and rhs is type void.
ERROR(640): '!=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(640): '!=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(641): '!>' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(641): '!>' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(642): '=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(642): '=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(643): '!<' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(643): '!<' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(644): '<' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(644): '<' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(645): '>' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(645): '>' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(646): '*=' requires operands of type int but lhs is of type bool.
ERROR(646): The operation '*=' does not work with arrays.
ERROR(647): '+=' requires operands of type int but lhs is of type bool.
ERROR(647): The operation '+=' does not work with arrays.
ERROR(648): '-=' requires operands of type int but lhs is of type bool.
ERROR(648): The operation '-=' does not work with arrays.
ERROR(649): '/=' requires operands of type int but lhs is of type bool.
ERROR(649): The operation '/=' does not work with arrays.
ERROR(650): '+' requires operands of type int but lhs is of type bool.
ERROR(650): The operation '+' does not work with arrays.
ERROR(651): '-' requires operands of type int but lhs is of type bool.
ERROR(651): The operation '-' does not work with arrays.
ERROR(652): '*' requires operands of type int but lhs is of type bool.
ERROR(652): The operation '*' does not work with arrays.
ERROR(653): '/' requires operands of type int but lhs is of type bool.
ERROR(653): The operation '/' does not work with arrays.
ERROR(654): '%' requires operands of type int but lhs is of type bool.
ERROR(654): The operation '%' does not work with arrays.
ERROR(655): 'and' requires operands of type bool but rhs is of type int.
ERROR(655): The operation 'and' does not work with arrays.
ERROR(656): 'or' requires operands of type bool but rhs is of type int.
ERROR(656): The operation 'or' does not work with arrays.
ERROR(657): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(657): '<=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(658): '!=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(659): '!>' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(660): '=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(661): '!<' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(662): '<' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(663): '>' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(664): '*=' requires operands of type int but lhs is of type bool.
ERROR(664): The operation '*=' does not work with arrays.
ERROR(665): '+=' requires operands of type int but lhs is of type bool.
ERROR(665): The operation '+=' does not work with arrays.
ERROR(666): '-=' requires operands of type int but lhs is of type bool.
ERROR(666): The operation '-=' does not work with arrays.
ERROR(667): '/=' requires operands of type int but lhs is of type bool.
ERROR(667): The operation '/=' does not work with arrays.
ERROR(668): '+' requires operands of type int but lhs is of type bool.
ERROR(668): The operation '+' does not work with arrays.
ERROR(669): '-' requires operands of type int but lhs is of type bool.
ERROR(669): The operation '-' does not work with arrays.
ERROR(670): '*' requires operands of type int but lhs is of type bool.
ERROR(670): The operation '*' does not work with arrays.
ERROR(671): '/' requires operands of type int but lhs is of type bool.
ERROR(671): The operation '/' does not work with arrays.
ERROR(672): '%' requires operands of type int but lhs is of type bool.
ERROR(672): The operation '%' does not work with arrays.
ERROR(673): 'and' requires operands of type bool but rhs is of type int.
ERROR(673): The operation 'and' does not work with arrays.
ERROR(674): 'or' requires operands of type bool but rhs is of type int.
ERROR(674): The operation 'or' does not work with arrays.
ERROR(675): '<=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(676): '!=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(676): '!=' requires operands of the same type but lhs is type bool and rhs is type char.
ERROR(677): '!>' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(677): '!>' requires operands of the same type but lhs is type bool and rhs is type char.
ERROR(678): '=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(678): '=' requires operands of the same type but lhs is type bool and rhs is type char.
ERROR(679): '!<' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(679): '!<' requires operands of the same type but lhs is type bool and rhs is type char.
ERROR(680): '<' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(680): '<' requires operands of the same type but lhs is type bool and rhs is type char.
ERROR(681): '>' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(681): '>' requires operands of the same type but lhs is type bool and rhs is type char.
ERROR(682): '*=' requires operands of type int but lhs is of type bool.
ERROR(682): '*=' requires operands of type int but rhs is of type char.
ERROR(682): The operation '*=' does not work with arrays.
ERROR(683): '+=' requires operands of type int but lhs is of type bool.
ERROR(683): '+=' requires operands of type int but rhs is of type char.
ERROR(683): The operation '+=' does not work with arrays.
ERROR(684): '-=' requires operands of type int but lhs is of type bool.
ERROR(684): '-=' requires operands of type int but rhs is of type char.
ERROR(684): The operation '-=' does not work with arrays.
ERROR(685): '/=' requires operands of type int but lhs is of type bool.
ERROR(685): '/=' requires operands of type int but rhs is of type char.
ERROR(685): The operation '/=' does not work with arrays.
ERROR(686): '+' requires operands of type int but lhs is of type bool.
ERROR(686): '+' requires operands of type int but rhs is of type char.
ERROR(686): The operation '+' does not work with arrays.
ERROR(687): '-' requires operands of type int but lhs is of type bool.
ERROR(687): '-' requires operands of type int but rhs is of type char.
ERROR(687): The operation '-' does not work with arrays.
ERROR(688): '*' requires operands of type int but lhs is of type bool.
ERROR(688): '*' requires operands of type int but rhs is of type char.
ERROR(688): The operation '*' does not work with arrays.
ERROR(689): '/' requires operands of type int but lhs is of type bool.
ERROR(689): '/' requires operands of type int but rhs is of type char.
ERROR(689): The operation '/' does not work with arrays.
ERROR(690): '%' requires operands of type int but lhs is of type bool.
ERROR(690): '%' requires operands of type int but rhs is of type char.
ERROR(690): The operation '%' does not work with arrays.
ERROR(691): 'and' requires operands of type bool but rhs is of type char.
ERROR(691): The operation 'and' does not work with arrays.
ERROR(692): 'or' requires operands of type bool but rhs is of type char.
ERROR(692): The operation 'or' does not work with arrays.
ERROR(693): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(693): '<=' requires operands of the same type but lhs is type bool and rhs is type char.
ERROR(694): '!=' requires operands of the same type but lhs is type bool and rhs is type char.
ERROR(695): '!>' requires operands of the same type but lhs is type bool and rhs is type char.
ERROR(696): '=' requires operands of the same type but lhs is type bool and rhs is type char.
ERROR(697): '!<' requires operands of the same type but lhs is type bool and rhs is type char.
ERROR(698): '<' requires operands of the same type but lhs is type bool and rhs is type char.
ERROR(699): '>' requires operands of the same type but lhs is type bool and rhs is type char.
ERROR(700): '*=' requires operands of type int but lhs is of type bool.
ERROR(700): '*=' requires operands of type int but rhs is of type char.
ERROR(700): The operation '*=' does not work with arrays.
ERROR(701): '+=' requires operands of type int but lhs is of type bool.
ERROR(701): '+=' requires operands of type int but rhs is of type char.
ERROR(701): The operation '+=' does not work with arrays.
ERROR(702): '-=' requires operands of type int but lhs is of type bool.
ERROR(702): '-=' requires operands of type int but rhs is of type char.
ERROR(702): The operation '-=' does not work with arrays.
ERROR(703): '/=' requires operands of type int but lhs is of type bool.
ERROR(703): '/=' requires operands of type int but rhs is of type char.
ERROR(703): The operation '/=' does not work with arrays.
ERROR(704): '+' requires operands of type int but lhs is of type bool.
ERROR(704): '+' requires operands of type int but rhs is of type char.
ERROR(704): The operation '+' does not work with arrays.
ERROR(705): '-' requires operands of type int but lhs is of type bool.
ERROR(705): '-' requires operands of type int but rhs is of type char.
ERROR(705): The operation '-' does not work with arrays.
ERROR(706): '*' requires operands of type int but lhs is of type bool.
ERROR(706): '*' requires operands of type int but rhs is of type char.
ERROR(706): The operation '*' does not work with arrays.
ERROR(707): '/' requires operands of type int but lhs is of type bool.
ERROR(707): '/' requires operands of type int but rhs is of type char.
ERROR(707): The operation '/' does not work with arrays.
ERROR(708): '%' requires operands of type int but lhs is of type bool.
ERROR(708): '%' requires operands of type int but rhs is of type char.
ERROR(708): The operation '%' does not work with arrays.
ERROR(709): 'and' requires operands of type bool but rhs is of type char.
ERROR(709): The operation 'and' does not work with arrays.
ERROR(710): 'or' requires operands of type bool but rhs is of type char.
ERROR(710): The operation 'or' does not work with arrays.
ERROR(711): '<=' requires operands of the same type but lhs is type bool and rhs is type char.
ERROR(712): '!=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(713): '!>' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(714): '=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(715): '!<' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(716): '<' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(717): '>' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(718): '*=' requires operands of type int but lhs is of type bool.
ERROR(718): '*=' requires operands of type int but rhs is of type bool.
ERROR(718): The operation '*=' does not work with arrays.
ERROR(719): '+=' requires operands of type int but lhs is of type bool.
ERROR(719): '+=' requires operands of type int but rhs is of type bool.
ERROR(719): The operation '+=' does not work with arrays.
ERROR(720): '-=' requires operands of type int but lhs is of type bool.
ERROR(720): '-=' requires operands of type int but rhs is of type bool.
ERROR(720): The operation '-=' does not work with arrays.
ERROR(721): '/=' requires operands of type int but lhs is of type bool.
ERROR(721): '/=' requires operands of type int but rhs is of type bool.
ERROR(721): The operation '/=' does not work with arrays.
ERROR(722): '+' requires operands of type int but lhs is of type bool.
ERROR(722): '+' requires operands of type int but rhs is of type bool.
ERROR(722): The operation '+' does not work with arrays.
ERROR(723): '-' requires operands of type int but lhs is of type bool.
ERROR(723): '-' requires operands of type int but rhs is of type bool.
ERROR(723): The operation '-' does not work with arrays.
ERROR(724): '*' requires operands of type int but lhs is of type bool.
ERROR(724): '*' requires operands of type int but rhs is of type bool.
ERROR(724): The operation '*' does not work with arrays.
ERROR(725): '/' requires operands of type int but lhs is of type bool.
ERROR(725): '/' requires operands of type int but rhs is of type bool.
ERROR(725): The operation '/' does not work with arrays.
ERROR(726): '%' requires operands of type int but lhs is of type bool.
ERROR(726): '%' requires operands of type int but rhs is of type bool.
ERROR(726): The operation '%' does not work with arrays.
ERROR(727): The operation 'and' does not work with arrays.
ERROR(728): The operation 'or' does not work with arrays.
ERROR(729): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(736): '*=' requires operands of type int but lhs is of type bool.
ERROR(736): '*=' requires operands of type int but rhs is of type bool.
ERROR(736): The operation '*=' does not work with arrays.
ERROR(737): '+=' requires operands of type int but lhs is of type bool.
ERROR(737): '+=' requires operands of type int but rhs is of type bool.
ERROR(737): The operation '+=' does not work with arrays.
ERROR(738): '-=' requires operands of type int but lhs is of type bool.
ERROR(738): '-=' requires operands of type int but rhs is of type bool.
ERROR(738): The operation '-=' does not work with arrays.
ERROR(739): '/=' requires operands of type int but lhs is of type bool.
ERROR(739): '/=' requires operands of type int but rhs is of type bool.
ERROR(739): The operation '/=' does not work with arrays.
ERROR(740): '+' requires operands of type int but lhs is of type bool.
ERROR(740): '+' requires operands of type int but rhs is of type bool.
ERROR(740): The operation '+' does not work with arrays.
ERROR(741): '-' requires operands of type int but lhs is of type bool.
ERROR(741): '-' requires operands of type int but rhs is of type bool.
ERROR(741): The operation '-' does not work with arrays.
ERROR(742): '*' requires operands of type int but lhs is of type bool.
ERROR(742): '*' requires operands of type int but rhs is of type bool.
ERROR(742): The operation '*' does not work with arrays.
ERROR(743): '/' requires operands of type int but lhs is of type bool.
ERROR(743): '/' requires operands of type int but rhs is of type bool.
ERROR(743): The operation '/' does not work with arrays.
ERROR(744): '%' requires operands of type int but lhs is of type bool.
ERROR(744): '%' requires operands of type int but rhs is of type bool.
ERROR(744): The operation '%' does not work with arrays.
ERROR(745): The operation 'and' does not work with arrays.
ERROR(746): The operation 'or' does not work with arrays.
ERROR(748): '!=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(748): '!=' requires operands of the same type but lhs is type bool and rhs is type void.
ERROR(749): '!>' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(749): '!>' requires operands of the same type but lhs is type bool and rhs is type void.
ERROR(750): '=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(750): '=' requires operands of the same type but lhs is type bool and rhs is type void.
ERROR(751): '!<' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(751): '!<' requires operands of the same type but lhs is type bool and rhs is type void.
ERROR(752): '<' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(752): '<' requires operands of the same type but lhs is type bool and rhs is type void.
ERROR(753): '>' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(753): '>' requires operands of the same type but lhs is type bool and rhs is type void.
ERROR(754): '*=' requires operands of type int but lhs is of type bool.
ERROR(754): '*=' requires operands of type int but rhs is of type void.
ERROR(754): The operation '*=' does not work with arrays.
ERROR(755): '+=' requires operands of type int but lhs is of type bool.
ERROR(755): '+=' requires operands of type int but rhs is of type void.
ERROR(755): The operation '+=' does not work with arrays.
ERROR(756): '-=' requires operands of type int but lhs is of type bool.
ERROR(756): '-=' requires operands of type int but rhs is of type void.
ERROR(756): The operation '-=' does not work with arrays.
ERROR(757): '/=' requires operands of type int but lhs is of type bool.
ERROR(757): '/=' requires operands of type int but rhs is of type void.
ERROR(757): The operation '/=' does not work with arrays.
ERROR(758): '+' requires operands of type int but lhs is of type bool.
ERROR(758): '+' requires operands of type int but rhs is of type void.
ERROR(758): The operation '+' does not work with arrays.
ERROR(759): '-' requires operands of type int but lhs is of type bool.
ERROR(759): '-' requires operands of type int but rhs is of type void.
ERROR(759): The operation '-' does not work with arrays.
ERROR(760): '*' requires operands of type int but lhs is of type bool.
ERROR(760): '*' requires operands of type int but rhs is of type void.
ERROR(760): The operation '*' does not work with arrays.
ERROR(761): '/' requires operands of type int but lhs is of type bool.
ERROR(761): '/' requires operands of type int but rhs is of type void.
ERROR(761): The operation '/' does not work with arrays.
ERROR(762): '%' requires operands of type int but lhs is of type bool.
ERROR(762): '%' requires operands of type int but rhs is of type void.
ERROR(762): The operation '%' does not work with arrays.
ERROR(763): 'and' requires operands of type bool but rhs is of type void.
ERROR(763): The operation 'and' does not work with arrays.
ERROR(764): 'or' requires operands of type bool but rhs is of type void.
ERROR(764): The operation 'or' does not work with arrays.
ERROR(765): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(765): '<=' requires operands of the same type but lhs is type bool and rhs is type void.
ERROR(766): '<' requires operands of the same type but lhs is type void and rhs is type int.
ERROR(767): '>' requires operands of the same type but lhs is type void and rhs is type int.
ERROR(768): '+' requires operands of type int but lhs is of type void.
ERROR(769): '-' requires operands of type int but lhs is of type void.
ERROR(770): '*' requires operands of type int but lhs is of type void.
ERROR(771): '/' requires operands of type int but lhs is of type void.
ERROR(772): '%' requires operands of type int but lhs is of type void.
ERROR(773): 'and' requires operands of type bool but lhs is of type void.
ERROR(773): 'and' requires operands of type bool but rhs is of type int.
ERROR(774): 'or' requires operands of type bool but lhs is of type void.
ERROR(774): 'or' requires operands of type bool but rhs is of type int.
ERROR(775): '<' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(775): '<' requires operands of the same type but lhs is type void and rhs is type int.
ERROR(776): '>' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(776): '>' requires operands of the same type but lhs is type void and rhs is type int.
ERROR(777): '+' requires operands of type int but lhs is of type void.
ERROR(777): The operation '+' does not work with arrays.
ERROR(778): '-' requires operands of type int but lhs is of type void.
ERROR(778): The operation '-' does not work with arrays.
ERROR(779): '*' requires operands of type int but lhs is of type void.
ERROR(779): The operation '*' does not work with arrays.
ERROR(780): '/' requires operands of type int but lhs is of type void.
ERROR(780): The operation '/' does not work with arrays.
ERROR(781): '%' requires operands of type int but lhs is of type void.
ERROR(781): The operation '%' does not work with arrays.
ERROR(782): 'and' requires operands of type bool but lhs is of type void.
ERROR(782): 'and' requires operands of type bool but rhs is of type int.
ERROR(782): The operation 'and' does not work with arrays.
ERROR(783): 'or' requires operands of type bool but lhs is of type void.
ERROR(783): 'or' requires operands of type bool but rhs is of type int.
ERROR(783): The operation 'or' does not work with arrays.
ERROR(784): '<' requires operands of the same type but lhs is type void and rhs is type char.
ERROR(785): '>' requires operands of the same type but lhs is type void and rhs is type char.
ERROR(786): '+' requires operands of type int but lhs is of type void.
ERROR(786): '+' requires operands of type int but rhs is of type char.
ERROR(787): '-' requires operands of type int but lhs is of type void.
ERROR(787): '-' requires operands of type int but rhs is of type char.
ERROR(788): '*' requires operands of type int but lhs is of type void.
ERROR(788): '*' requires operands of type int but rhs is of type char.
ERROR(789): '/' requires operands of type int but lhs is of type void.
ERROR(789): '/' requires operands of type int but rhs is of type char.
ERROR(790): '%' requires operands of type int but lhs is of type void.
ERROR(790): '%' requires operands of type int but rhs is of type char.
ERROR(791): 'and' requires operands of type bool but lhs is of type void.
ERROR(791): 'and' requires operands of type bool but rhs is of type char.
ERROR(792): 'or' requires operands of type bool but lhs is of type void.
ERROR(792): 'or' requires operands of type bool but rhs is of type char.
ERROR(793): '<' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(793): '<' requires operands of the same type but lhs is type void and rhs is type char.
ERROR(794): '>' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(794): '>' requires operands of the same type but lhs is type void and rhs is type char.
ERROR(795): '+' requires operands of type int but lhs is of type void.
ERROR(795): '+' requires operands of type int but rhs is of type char.
ERROR(795): The operation '+' does not work with arrays.
ERROR(796): '-' requires operands of type int but lhs is of type void.
ERROR(796): '-' requires operands of type int but rhs is of type char.
ERROR(796): The operation '-' does not work with arrays.
ERROR(797): '*' requires operands of type int but lhs is of type void.
ERROR(797): '*' requires operands of type int but rhs is of type char.
ERROR(797): The operation '*' does not work with arrays.
ERROR(798): '/' requires operands of type int but lhs is of type void.
ERROR(798): '/' requires operands of type int but rhs is of type char.
ERROR(798): The operation '/' does not work with arrays.
ERROR(799): '%' requires operands of type int but lhs is of type void.
ERROR(799): '%' requires operands of type int but rhs is of type char.
ERROR(799): The operation '%' does not work with arrays.
ERROR(800): 'and' requires operands of type bool but lhs is of type void.
ERROR(800): 'and' requires operands of type bool but rhs is of type char.
ERROR(800): The operation 'and' does not work with arrays.
ERROR(801): 'or' requires operands of type bool but lhs is of type void.
ERROR(801): 'or' requires operands of type bool but rhs is of type char.
ERROR(801): The operation 'or' does not work with arrays.
ERROR(802): '<' requires operands of the same type but lhs is type void and rhs is type bool.
ERROR(803): '>' requires operands of the same type but lhs is type void and rhs is type bool.
ERROR(804): '+' requires operands of type int but lhs is of type void.
ERROR(804): '+' requires operands of type int but rhs is of type bool.
ERROR(805): '-' requires operands of type int but lhs is of type void.
ERROR(805): '-' requires operands of type int but rhs is of type bool.
ERROR(806): '*' requires operands of type int but lhs is of type void.
ERROR(806): '*' requires operands of type int but rhs is of type bool.
ERROR(807): '/' requires operands of type int but lhs is of type void.
ERROR(807): '/' requires operands of type int but rhs is of type bool.
ERROR(808): '%' requires operands of type int but lhs is of type void.
ERROR(808): '%' requires operands of type int but rhs is of type bool.
ERROR(809): 'and' requires operands of type bool but lhs is of type void.
ERROR(810): 'or' requires operands of type bool but lhs is of type void.
ERROR(811): '<' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(811): '<' requires operands of the same type but lhs is type void and rhs is type bool.
ERROR(812): '>' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(812): '>' requires operands of the same type but lhs is type void and rhs is type bool.
ERROR(813): '+' requires operands of type int but lhs is of type void.
ERROR(813): '+' requires operands of type int but rhs is of type bool.
ERROR(813): The operation '+' does not work with arrays.
ERROR(814): '-' requires operands of type int but lhs is of type void.
ERROR(814): '-' requires operands of type int but rhs is of type bool.
ERROR(814): The operation '-' does not work with arrays.
ERROR(815): '*' requires operands of type int but lhs is of type void.
ERROR(815): '*' requires operands of type int but rhs is of type bool.
ERROR(815): The operation '*' does not work with arrays.
ERROR(816): '/' requires operands of type int but lhs is of type void.
ERROR(816): '/' requires operands of type int but rhs is of type bool.
ERROR(816): The operation '/' does not work with arrays.
ERROR(817): '%' requires operands of type int but lhs is of type void.
ERROR(817): '%' requires operands of type int but rhs is of type bool.
ERROR(817): The operation '%' does not work with arrays.
ERROR(818): 'and' requires operands of type bool but lhs is of type void.
ERROR(818): The operation 'and' does not work with arrays.
ERROR(819): 'or' requires operands of type bool but lhs is of type void.
ERROR(819): The operation 'or' does not work with arrays.
ERROR(822): '+' requires operands of type int but lhs is of type void.
ERROR(822): '+' requires operands of type int but rhs is of type void.
ERROR(823): '-' requires operands of type int but lhs is of type void.
ERROR(823): '-' requires operands of type int but rhs is of type void.
ERROR(824): '*' requires operands of type int but lhs is of type void.
ERROR(824): '*' requires operands of type int but rhs is of type void.
ERROR(825): '/' requires operands of type int but lhs is of type void.
ERROR(825): '/' requires operands of type int but rhs is of type void.
ERROR(826): '%' requires operands of type int but lhs is of type void.
ERROR(826): '%' requires operands of type int but rhs is of type void.
ERROR(827): 'and' requires operands of type bool but lhs is of type void.
ERROR(827): 'and' requires operands of type bool but rhs is of type void.
ERROR(828): 'or' requires operands of type bool but lhs is of type void.
ERROR(828): 'or' requires operands of type bool but rhs is of type void.
ERROR(829): Unary 'not' requires an operand of type bool but was given type int.
ERROR(830): The operation 'sizeof' only works with arrays.
ERROR(832): The operation 'not' does not work with arrays.
ERROR(832): Unary 'not' requires an operand of type bool but was given type int.
ERROR(834): The operation '?' does not work with arrays.
ERROR(835): Unary 'not' requires an operand of type bool but was given type char.
ERROR(836): The operation 'sizeof' only works with arrays.
ERROR(837): Unary '?' requires an operand of type int but was given type char.
ERROR(838): The operation 'not' does not work with arrays.
ERROR(838): Unary 'not' requires an operand of type bool but was given type char.
ERROR(840): The operation '?' does not work with arrays.
ERROR(840): Unary '?' requires an operand of type int but was given type char.
ERROR(842): The operation 'sizeof' only works with arrays.
ERROR(843): Unary '?' requires an operand of type int but was given type bool.
ERROR(844): The operation 'not' does not work with arrays.
ERROR(846): The operation '?' does not work with arrays.
ERROR(846): Unary '?' requires an operand of type int but was given type bool.
ERROR(847): Unary 'not' requires an operand of type bool but was given type void.
ERROR(848): The operation 'sizeof' only works with arrays.
ERROR(849): Unary '?' requires an operand of type int but was given type void.
ERROR(852): The operation '++' does not work with arrays.
ERROR(853): The operation '--' does not work with arrays.
ERROR(854): Unary '++' requires an operand of type int but was given type char.
ERROR(855): Unary '--' requires an operand of type int but was given type char.
ERROR(856): The operation '++' does not work with arrays.
ERROR(856): Unary '++' requires an operand of type int but was given type char.
ERROR(857): The operation '--' does not work with arrays.
ERROR(857): Unary '--' requires an operand of type int but was given type char.
ERROR(858): Unary '++' requires an operand of type int but was given type bool.
ERROR(859): Unary '--' requires an operand of type int but was given type bool.
ERROR(860): The operation '++' does not work with arrays.
ERROR(860): Unary '++' requires an operand of type int but was given type bool.
ERROR(861): The operation '--' does not work with arrays.
ERROR(861): Unary '--' requires an operand of type int but was given type bool.
Number of warnings: 0
Number of errors: 1482

==============
==============
./c- -M overlapArray.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(2): The parameter 'p' seems not to be used.
WARNING(4): The variable 'a' seems not to be used.
WARNING(6): The variable 'b' seems not to be used.
WARNING(9): The variable 'c' seems not to be used.
WARNING(13): The variable 'b' seems not to be used.
WARNING(16): The variable 'c' seems not to be used.
Number of warnings: 6
Number of errors: 1

==============
==============
./c- -M overlap.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(2): The variable 'g' seems not to be used.
WARNING(4): The parameter 'p' seems not to be used.
WARNING(6): The variable 'a' seems not to be used.
WARNING(8): The variable 'b' seems not to be used.
WARNING(11): The variable 'c' seems not to be used.
WARNING(15): The variable 'b' seems not to be used.
WARNING(18): The variable 'c' seems not to be used.
WARNING(23): The variable 'h' seems not to be used.
Number of warnings: 8
Number of errors: 1

==============
==============
./c- -M overlapStatic.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(2): The variable 'g' seems not to be used.
WARNING(4): The parameter 'p' seems not to be used.
WARNING(6): The variable 'a' seems not to be used.
WARNING(8): The variable 'b' seems not to be used.
WARNING(11): The variable 'c' seems not to be used.
WARNING(15): The variable 'b' seems not to be used.
WARNING(18): The variable 'c' seems not to be used.
WARNING(23): The variable 'h' seems not to be used.
Number of warnings: 8
Number of errors: 1

==============
==============
./c- -M overlayArray.c-
WARNING(5): The variable 'x' seems not to be used.
WARNING(10): Variable 'y' may be uninitialized when used here.
Func: main returns type void [mem: Global loc: 0 size: -2] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 3]
.   .   Child: 1  Compound [mem: None loc: 0 size: -14] [line: 4]
.   .   .   Child: 0  Var: x of array of type int [mem: Local loc: -3 size: 12] [line: 5]
.   .   Sibling: 1  Compound [mem: None loc: 0 size: -25] [line: 7]
.   .   .   Child: 0  Var: y of array of type int [mem: Local loc: -3 size: 23] [line: 8]
.   .   .   Child: 1  Call: output of type void [line: 10]
.   .   .   .   Child: 0  Op: sizeof of type int [line: 10]
.   .   .   .   .   Child: 0  Id: y of array of type int [mem: Local loc: -3 size: 23] [line: 10]
.   .   .   Sibling: 1  Call: outnl of type void [line: 10]
Offset for end of global space: 0
Number of warnings: 2
Number of errors: 0

==============
==============
./c- -M overlay.c-
Func: main returns type void [mem: Global loc: 0 size: -2] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 3]
.   .   Child: 0  Var: z of type int [mem: Local loc: -2 size: 1] [line: 4]
.   .   Child: 1  Assign: <= of type int [line: 5]
.   .   .   Child: 0  Id: z of type int [mem: Local loc: -2 size: 1] [line: 5]
.   .   .   Child: 1  Const 111 of type int [line: 5]
.   .   Sibling: 1  Compound [mem: None loc: 0 size: -104] [line: 6]
.   .   .   Child: 0  Var: x of array of type int [mem: Local loc: -4 size: 101] [line: 7]
.   .   .   Child: 1  Assign: <= of type int [line: 9]
.   .   .   .   Child: 0  Id: z of type int [mem: Local loc: -2 size: 1] [line: 9]
.   .   .   .   Child: 1  Const 0 of type int [line: 9]
.   .   .   Sibling: 1  While [line: 10]
.   .   .   .   Child: 0  Op: < of type bool [line: 10]
.   .   .   .   .   Child: 0  Id: z of type int [mem: Local loc: -2 size: 1] [line: 10]
.   .   .   .   .   Child: 1  Const 100 of type int [line: 10]
.   .   .   .   Child: 1  Compound [mem: None loc: 0 size: -104] [line: 10]
.   .   .   .   .   Child: 1  Assign: <= of type int [line: 11]
.   .   .   .   .   .   Child: 0  Op: [ of type int [line: 11]
.   .   .   .   .   .   .   Child: 0  Id: x of array of type int [mem: Local loc: -4 size: 101] [line: 11]
.   .   .   .   .   .   .   Child: 1  Id: z of type int [mem: Local loc: -2 size: 1] [line: 11]
.   .   .   .   .   .   Child: 1  Const 1 of type int [line: 11]
.   .   .   .   .   Sibling: 1  Assign: ++ of type int [line: 12]
.   .   .   .   .   .   Child: 0  Id: z of type int [mem: Local loc: -2 size: 1] [line: 12]
.   .   Sibling: 2  Compound [mem: None loc: 0 size: -104] [line: 16]
.   .   .   Child: 0  Var: y of array of type int [mem: Local loc: -4 size: 101] [line: 17]
.   .   .   Child: 1  Assign: <= of type int [line: 19]
.   .   .   .   Child: 0  Id: z of type int [mem: Local loc: -2 size: 1] [line: 19]
.   .   .   .   Child: 1  Const 0 of type int [line: 19]
.   .   .   Sibling: 1  While [line: 20]
.   .   .   .   Child: 0  Op: < of type bool [line: 20]
.   .   .   .   .   Child: 0  Id: z of type int [mem: Local loc: -2 size: 1] [line: 20]
.   .   .   .   .   Child: 1  Const 100 of type int [line: 20]
.   .   .   .   Child: 1  Compound [mem: None loc: 0 size: -104] [line: 20]
.   .   .   .   .   Child: 1  Assign: <= of type int [line: 21]
.   .   .   .   .   .   Child: 0  Op: [ of type int [line: 21]
.   .   .   .   .   .   .   Child: 0  Id: y of array of type int [mem: Local loc: -4 size: 101] [line: 21]
.   .   .   .   .   .   .   Child: 1  Id: z of type int [mem: Local loc: -2 size: 1] [line: 21]
.   .   .   .   .   .   Child: 1  Const 1 of type int [line: 21]
.   .   .   .   .   Sibling: 1  Assign: ++ of type int [line: 22]
.   .   .   .   .   .   Child: 0  Id: z of type int [mem: Local loc: -2 size: 1] [line: 22]
.   .   .   Sibling: 2  Call: output of type void [line: 25]
.   .   .   .   Child: 0  Op: [ of type int [line: 25]
.   .   .   .   .   Child: 0  Id: y of array of type int [mem: Local loc: -4 size: 101] [line: 25]
.   .   .   .   .   Child: 1  Const 1 of type int [line: 25]
.   .   .   Sibling: 3  Call: outnl of type void [line: 25]
.   .   .   Sibling: 4  Assign: <= of type int [line: 26]
.   .   .   .   Child: 0  Op: [ of type int [line: 26]
.   .   .   .   .   Child: 0  Id: y of array of type int [mem: Local loc: -4 size: 101] [line: 26]
.   .   .   .   .   Child: 1  Const 1 of type int [line: 26]
.   .   .   .   Child: 1  Const 333 of type int [line: 26]
.   .   .   Sibling: 5  Call: output of type void [line: 27]
.   .   .   .   Child: 0  Op: [ of type int [line: 27]
.   .   .   .   .   Child: 0  Id: y of array of type int [mem: Local loc: -4 size: 101] [line: 27]
.   .   .   .   .   Child: 1  Const 1 of type int [line: 27]
.   .   .   Sibling: 6  Call: outnl of type void [line: 27]
.   .   Sibling: 3  Call: output of type void [line: 29]
.   .   .   Child: 0  Id: z of type int [mem: Local loc: -2 size: 1] [line: 29]
.   .   Sibling: 4  Call: outnl of type void [line: 29]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M overlayCall.c-
WARNING(7): The variable 'x' seems not to be used.
Func: dog returns type void [mem: Global loc: 0 size: -2] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 2]
Sibling: 1  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 4]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 5]
.   .   Child: 1  Compound [mem: None loc: 0 size: -13] [line: 6]
.   .   .   Child: 0  Var: x of array of type int [mem: Local loc: -3 size: 11] [line: 7]
.   .   .   Child: 1  Call: dog of type void [line: 8]
.   .   Sibling: 1  Call: dog of type void [line: 10]
Offset for end of global space: 0
Number of warnings: 1
Number of errors: 0

==============
==============
./c- -M overlayTmp2.c-
Func: dog returns type int [mem: Global loc: 0 size: -3] [line: 2]
.   Child: 0  Parm: pig of type int [mem: Parameter loc: -2 size: 1] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 2]
.   .   Child: 1  Return [line: 2]
.   .   .   Child: 0  Id: pig of type int [mem: Parameter loc: -2 size: 1] [line: 2]
Sibling: 1  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 4]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 5]
.   .   Child: 0  Var: z of type int [mem: Local loc: -2 size: 1] [line: 6]
.   .   Child: 1  Assign: <= of type int [line: 7]
.   .   .   Child: 0  Id: z of type int [mem: Local loc: -2 size: 1] [line: 7]
.   .   .   Child: 1  Const 111 of type int [line: 7]
.   .   Sibling: 1  Compound [mem: None loc: 0 size: -4] [line: 8]
.   .   .   Child: 0  Var: x of type int [mem: Local loc: -3 size: 1] [line: 9]
.   .   .   Child: 1  Assign: <= of type int [line: 11]
.   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -3 size: 1] [line: 11]
.   .   .   .   Child: 1  Const 222 of type int [line: 11]
.   .   .   Sibling: 1  Assign: <= of type int [line: 12]
.   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -3 size: 1] [line: 12]
.   .   .   .   Child: 1  Op: + of type int [line: 12]
.   .   .   .   .   Child: 0  Const 666 of type int [line: 12]
.   .   .   .   .   Child: 1  Call: dog of type int [line: 12]
.   .   .   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -3 size: 1] [line: 12]
.   .   .   Sibling: 2  Call: output of type void [line: 13]
.   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -3 size: 1] [line: 13]
.   .   .   Sibling: 3  Call: outnl of type void [line: 13]
.   .   Sibling: 2  Compound [mem: None loc: 0 size: -4] [line: 15]
.   .   .   Child: 0  Var: y of type int [mem: Local loc: -3 size: 1] [line: 16]
.   .   .   Child: 1  Assign: <= of type int [line: 18]
.   .   .   .   Child: 0  Id: y of type int [mem: Local loc: -3 size: 1] [line: 18]
.   .   .   .   Child: 1  Const 333 of type int [line: 18]
.   .   .   Sibling: 1  Assign: <= of type int [line: 19]
.   .   .   .   Child: 0  Id: y of type int [mem: Local loc: -3 size: 1] [line: 19]
.   .   .   .   Child: 1  Op: + of type int [line: 19]
.   .   .   .   .   Child: 0  Const 666 of type int [line: 19]
.   .   .   .   .   Child: 1  Call: dog of type int [line: 19]
.   .   .   .   .   .   Child: 0  Id: y of type int [mem: Local loc: -3 size: 1] [line: 19]
.   .   .   Sibling: 2  Call: output of type void [line: 20]
.   .   .   .   Child: 0  Id: y of type int [mem: Local loc: -3 size: 1] [line: 20]
.   .   .   Sibling: 3  Call: outnl of type void [line: 20]
.   .   Sibling: 3  Assign: <= of type int [line: 23]
.   .   .   Child: 0  Id: z of type int [mem: Local loc: -2 size: 1] [line: 23]
.   .   .   Child: 1  Op: + of type int [line: 23]
.   .   .   .   Child: 0  Const 666 of type int [line: 23]
.   .   .   .   Child: 1  Call: dog of type int [line: 23]
.   .   .   .   .   Child: 0  Id: z of type int [mem: Local loc: -2 size: 1] [line: 23]
.   .   Sibling: 4  Call: output of type void [line: 24]
.   .   .   Child: 0  Id: z of type int [mem: Local loc: -2 size: 1] [line: 24]
.   .   Sibling: 5  Call: outnl of type void [line: 24]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M overlayTmp3.c-
WARNING(4): The parameter 'a' seems not to be used.
WARNING(31): Variable 'z' may be uninitialized when used here.
Func: dog returns type int [mem: Global loc: 0 size: -3] [line: 2]
.   Child: 0  Parm: pig of type int [mem: Parameter loc: -2 size: 1] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 2]
.   .   Child: 1  Return [line: 2]
.   .   .   Child: 0  Id: pig of type int [mem: Parameter loc: -2 size: 1] [line: 2]
Sibling: 1  Func: thor returns type void [mem: Global loc: 0 size: -3] [line: 4]
.   Child: 0  Parm: a of type int [mem: Parameter loc: -2 size: 1] [line: 4]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 4]
.   .   Child: 1  If [line: 5]
.   .   .   Child: 0  Const true of type bool [line: 5]
.   .   .   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 5]
.   .   .   .   Child: 0  Var: z of type int [mem: Local loc: -3 size: 1] [line: 6]
.   .   .   .   Child: 1  Assign: <= of type int [line: 7]
.   .   .   .   .   Child: 0  Id: z of type int [mem: Local loc: -3 size: 1] [line: 7]
.   .   .   .   .   Child: 1  Const 111 of type int [line: 7]
.   .   .   .   Sibling: 1  Compound [mem: None loc: 0 size: -5] [line: 8]
.   .   .   .   .   Child: 0  Var: x of type int [mem: Local loc: -4 size: 1] [line: 9]
.   .   .   .   .   Child: 1  Assign: <= of type int [line: 11]
.   .   .   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -4 size: 1] [line: 11]
.   .   .   .   .   .   Child: 1  Const 222 of type int [line: 11]
.   .   .   .   .   Sibling: 1  Assign: <= of type int [line: 12]
.   .   .   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -4 size: 1] [line: 12]
.   .   .   .   .   .   Child: 1  Op: + of type int [line: 12]
.   .   .   .   .   .   .   Child: 0  Const 666 of type int [line: 12]
.   .   .   .   .   .   .   Child: 1  Call: dog of type int [line: 12]
.   .   .   .   .   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -4 size: 1] [line: 12]
.   .   .   .   .   Sibling: 2  Call: output of type void [line: 13]
.   .   .   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -4 size: 1] [line: 13]
.   .   .   .   .   Sibling: 3  Call: outnl of type void [line: 13]
.   .   .   .   Sibling: 2  Compound [mem: None loc: 0 size: -5] [line: 15]
.   .   .   .   .   Child: 0  Var: y of type int [mem: Local loc: -4 size: 1] [line: 16]
.   .   .   .   .   Child: 1  Assign: <= of type int [line: 18]
.   .   .   .   .   .   Child: 0  Id: y of type int [mem: Local loc: -4 size: 1] [line: 18]
.   .   .   .   .   .   Child: 1  Const 333 of type int [line: 18]
.   .   .   .   .   Sibling: 1  Assign: <= of type int [line: 19]
.   .   .   .   .   .   Child: 0  Id: y of type int [mem: Local loc: -4 size: 1] [line: 19]
.   .   .   .   .   .   Child: 1  Op: + of type int [line: 19]
.   .   .   .   .   .   .   Child: 0  Const 666 of type int [line: 19]
.   .   .   .   .   .   .   Child: 1  Call: dog of type int [line: 19]
.   .   .   .   .   .   .   .   Child: 0  Id: y of type int [mem: Local loc: -4 size: 1] [line: 19]
.   .   .   .   .   Sibling: 2  Call: output of type void [line: 20]
.   .   .   .   .   .   Child: 0  Id: y of type int [mem: Local loc: -4 size: 1] [line: 20]
.   .   .   .   .   Sibling: 3  Call: outnl of type void [line: 20]
.   .   .   .   Sibling: 3  Assign: <= of type int [line: 23]
.   .   .   .   .   Child: 0  Id: z of type int [mem: Local loc: -3 size: 1] [line: 23]
.   .   .   .   .   Child: 1  Op: + of type int [line: 23]
.   .   .   .   .   .   Child: 0  Const 666 of type int [line: 23]
.   .   .   .   .   .   Child: 1  Call: dog of type int [line: 23]
.   .   .   .   .   .   .   Child: 0  Id: z of type int [mem: Local loc: -3 size: 1] [line: 23]
.   .   .   .   Sibling: 4  Call: output of type void [line: 24]
.   .   .   .   .   Child: 0  Id: z of type int [mem: Local loc: -3 size: 1] [line: 24]
.   .   .   .   Sibling: 5  Call: outnl of type void [line: 24]
Sibling: 2  Var: g of type int [mem: Global loc: 0 size: 1] [line: 27]
Sibling: 3  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 28]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 28]
.   .   Child: 0  Var: z of type int [mem: Local loc: -2 size: 1] [line: 29]
.   .   Child: 1  Call: thor of type void [line: 31]
.   .   .   Child: 0  Id: z of type int [mem: Local loc: -2 size: 1] [line: 31]
.   .   Sibling: 1  Call: thor of type void [line: 32]
.   .   .   Child: 0  Id: g of type int [mem: Global loc: 0 size: 1] [line: 32]
Offset for end of global space: -1
Number of warnings: 2
Number of errors: 0

==============
==============
./c- -M overlayTmp.c-
Func: dog returns type int [mem: Global loc: 0 size: -3] [line: 2]
.   Child: 0  Parm: pig of type int [mem: Parameter loc: -2 size: 1] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 2]
.   .   Child: 1  Return [line: 2]
.   .   .   Child: 0  Id: pig of type int [mem: Parameter loc: -2 size: 1] [line: 2]
Sibling: 1  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 4]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 5]
.   .   Child: 0  Var: z of type int [mem: Local loc: -2 size: 1] [line: 6]
.   .   Child: 1  Assign: <= of type int [line: 7]
.   .   .   Child: 0  Id: z of type int [mem: Local loc: -2 size: 1] [line: 7]
.   .   .   Child: 1  Const 111 of type int [line: 7]
.   .   Sibling: 1  Compound [mem: None loc: 0 size: -4] [line: 8]
.   .   .   Child: 0  Var: x of type int [mem: Local loc: -3 size: 1] [line: 9]
.   .   .   Child: 1  Assign: <= of type int [line: 11]
.   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -3 size: 1] [line: 11]
.   .   .   .   Child: 1  Const 222 of type int [line: 11]
.   .   .   Sibling: 1  Assign: <= of type int [line: 12]
.   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -3 size: 1] [line: 12]
.   .   .   .   Child: 1  Op: + of type int [line: 12]
.   .   .   .   .   Child: 0  Const 666 of type int [line: 12]
.   .   .   .   .   Child: 1  Call: dog of type int [line: 12]
.   .   .   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -3 size: 1] [line: 12]
.   .   .   Sibling: 2  Call: output of type void [line: 13]
.   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -3 size: 1] [line: 13]
.   .   .   Sibling: 3  Call: outnl of type void [line: 13]
.   .   Sibling: 2  Compound [mem: None loc: 0 size: -4] [line: 15]
.   .   .   Child: 0  Var: y of type int [mem: Local loc: -3 size: 1] [line: 16]
.   .   .   Child: 1  Assign: <= of type int [line: 18]
.   .   .   .   Child: 0  Id: y of type int [mem: Local loc: -3 size: 1] [line: 18]
.   .   .   .   Child: 1  Const 333 of type int [line: 18]
.   .   .   Sibling: 1  Assign: <= of type int [line: 19]
.   .   .   .   Child: 0  Id: y of type int [mem: Local loc: -3 size: 1] [line: 19]
.   .   .   .   Child: 1  Op: + of type int [line: 19]
.   .   .   .   .   Child: 0  Const 666 of type int [line: 19]
.   .   .   .   .   Child: 1  Call: dog of type int [line: 19]
.   .   .   .   .   .   Child: 0  Id: y of type int [mem: Local loc: -3 size: 1] [line: 19]
.   .   .   Sibling: 2  Call: output of type void [line: 20]
.   .   .   .   Child: 0  Id: y of type int [mem: Local loc: -3 size: 1] [line: 20]
.   .   .   Sibling: 3  Call: outnl of type void [line: 20]
.   .   Sibling: 3  Assign: <= of type int [line: 23]
.   .   .   Child: 0  Id: z of type int [mem: Local loc: -2 size: 1] [line: 23]
.   .   .   Child: 1  Op: + of type int [line: 23]
.   .   .   .   Child: 0  Const 666 of type int [line: 23]
.   .   .   .   Child: 1  Call: dog of type int [line: 23]
.   .   .   .   .   Child: 0  Id: z of type int [mem: Local loc: -2 size: 1] [line: 23]
.   .   Sibling: 4  Call: output of type void [line: 24]
.   .   .   Child: 0  Id: z of type int [mem: Local loc: -2 size: 1] [line: 24]
.   .   Sibling: 5  Call: outnl of type void [line: 24]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M param.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(3): Expecting to return type int but function 'Athos' has no return statement.
ERROR(4): Too many parameters passed for function 'DArtagnan' declared on line 1.
ERROR(5): '+' requires operands of type int but lhs is of type bool.
ERROR(5): Too many parameters passed for function 'DArtagnan' declared on line 1.
WARNING(9): Expecting to return type char but function 'Aramis' has no return statement.
ERROR(10): Not expecting array in parameter 2 of call to 'Athos' declared on line 3.
ERROR(10): Too few parameters passed for function 'Athos' declared on line 3.
ERROR(12): 'and' requires operands of type bool but lhs is of type int.
ERROR(12): 'and' requires operands of type bool but rhs is of type int.
ERROR(12): Too many parameters passed for function 'Athos' declared on line 3.
WARNING(16): The parameter 'aa' seems not to be used.
WARNING(16): The parameter 'bb' seems not to be used.
WARNING(16): The parameter 'cc' seems not to be used.
WARNING(21): Variable 'a' may be uninitialized when used here.
WARNING(21): Variable 'b' may be uninitialized when used here.
WARNING(21): Variable 'c' may be uninitialized when used here.
ERROR(23): Too few parameters passed for function 'Athos' declared on line 3.
ERROR(24): Too many parameters passed for function 'Athos' declared on line 3.
ERROR(25): Expecting type char in parameter 3 of call to 'Athos' declared on line 3 but got type int.
ERROR(25): Expecting type int in parameter 1 of call to 'Athos' declared on line 3 but got type void.
ERROR(25): Symbol 'thx1138' is not declared.
Number of warnings: 8
Number of errors: 14

==============
==============
./c- -M paramerr2.c-
ERROR(3): Too many parameters passed for function 'cow' declared on line 3.
WARNING(4): The parameter 'boar' seems not to be used.
ERROR(10): 'and' requires operands of type bool but lhs is of type int.
ERROR(10): 'and' requires operands of type bool but rhs is of type int.
ERROR(10): '+' requires operands of type int but lhs is of type bool.
ERROR(10): '+' requires operands of type int but rhs is of type bool.
ERROR(10): Too many parameters passed for function 'cow' declared on line 3.
ERROR(11): '+' requires operands of type int but rhs is of type bool.
ERROR(11): Too few parameters passed for function 'dog' declared on line 4.
ERROR(12): '*' requires operands of type int but rhs is of type bool.
ERROR(12): '+' requires operands of type int but rhs is of type bool.
ERROR(13): '-' requires operands of type int but rhs is of type bool.
ERROR(13): '*' requires operands of type int but rhs is of type bool.
ERROR(13): '+' requires operands of type int but rhs is of type bool.
ERROR(13): Too many parameters passed for function 'dog' declared on line 4.
ERROR(14): '+' requires operands of type int but rhs is of type bool.
ERROR(14): Symbol 'elk' is not declared.
Number of warnings: 1
Number of errors: 16

==============
==============
./c- -M paramerr3.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(4): Expecting to return type int but function 'Athos' has no return statement.
ERROR(5): Too many parameters passed for function 'DArtagnan' declared on line 2.
ERROR(6): '+' requires operands of type int but lhs is of type bool.
ERROR(6): Too many parameters passed for function 'DArtagnan' declared on line 2.
WARNING(10): Expecting to return type char but function 'Aramis' has no return statement.
ERROR(11): Not expecting array in parameter 2 of call to 'Athos' declared on line 4.
ERROR(11): Too few parameters passed for function 'Athos' declared on line 4.
ERROR(13): 'and' requires operands of type bool but lhs is of type int.
ERROR(13): 'and' requires operands of type bool but rhs is of type int.
ERROR(13): Too many parameters passed for function 'Athos' declared on line 4.
WARNING(17): The parameter 'aa' seems not to be used.
WARNING(17): The parameter 'bb' seems not to be used.
WARNING(17): The parameter 'cc' seems not to be used.
WARNING(22): Variable 'a' may be uninitialized when used here.
WARNING(22): Variable 'b' may be uninitialized when used here.
WARNING(22): Variable 'c' may be uninitialized when used here.
ERROR(24): Too few parameters passed for function 'Athos' declared on line 4.
ERROR(25): Too many parameters passed for function 'Athos' declared on line 4.
ERROR(26): Expecting type char in parameter 3 of call to 'Athos' declared on line 4 but got type int.
ERROR(26): Expecting type int in parameter 1 of call to 'Athos' declared on line 4 but got type void.
ERROR(26): Symbol 'thx1138' is not declared.
Number of warnings: 8
Number of errors: 14

==============
==============
./c- -M paramerr.c-
WARNING(15): Expecting to return type int but function 'antno' has no return statement.
WARNING(16): Expecting to return type bool but function 'bearno' has no return statement.
WARNING(17): Expecting to return type char but function 'catno' has no return statement.
WARNING(19): The parameter 'aardvark' seems not to be used.
WARNING(19): The parameter 'baboon' seems not to be used.
WARNING(19): The parameter 'cow' seems not to be used.
WARNING(22): The parameter 'asp' seems not to be used.
WARNING(22): The parameter 'bull' seems not to be used.
WARNING(22): The parameter 'crow' seems not to be used.
WARNING(30): Variable 'a' may be uninitialized when used here.
WARNING(30): Variable 'b' may be uninitialized when used here.
WARNING(30): Variable 'c' may be uninitialized when used here.
ERROR(31): Expecting array in parameter 1 of call to 'elk' declared on line 22.
ERROR(31): Expecting array in parameter 2 of call to 'elk' declared on line 22.
ERROR(31): Expecting array in parameter 3 of call to 'elk' declared on line 22.
ERROR(32): Symbol 'fox' is not declared.
ERROR(34): Not expecting array in parameter 1 of call to 'dog' declared on line 19.
ERROR(34): Not expecting array in parameter 2 of call to 'dog' declared on line 19.
ERROR(34): Not expecting array in parameter 3 of call to 'dog' declared on line 19.
WARNING(34): Variable 'aa' may be uninitialized when used here.
WARNING(34): Variable 'bb' may be uninitialized when used here.
WARNING(34): Variable 'cc' may be uninitialized when used here.
ERROR(36): Symbol 'fox' is not declared.
ERROR(40): Expecting array in parameter 1 of call to 'elk' declared on line 22.
ERROR(40): Expecting array in parameter 2 of call to 'elk' declared on line 22.
ERROR(40): Expecting array in parameter 3 of call to 'elk' declared on line 22.
ERROR(41): Symbol 'fox' is not declared.
ERROR(43): Expecting type bool in parameter 2 of call to 'dog' declared on line 19 but got type int.
ERROR(43): Expecting type char in parameter 3 of call to 'dog' declared on line 19 but got type int.
ERROR(43): '-' requires operands of type int but lhs is of type bool.
ERROR(43): '+' requires operands of type int but rhs is of type bool.
ERROR(43): '-' requires operands of type int but rhs is of type char.
ERROR(43): '*' requires operands of type int but rhs is of type char.
ERROR(44): Expecting array in parameter 1 of call to 'elk' declared on line 22.
ERROR(44): Expecting array in parameter 2 of call to 'elk' declared on line 22.
ERROR(44): Expecting array in parameter 3 of call to 'elk' declared on line 22.
ERROR(44): Expecting type bool in parameter 2 of call to 'elk' declared on line 22 but got type int.
ERROR(44): Expecting type char in parameter 3 of call to 'elk' declared on line 22 but got type int.
ERROR(44): '-' requires operands of type int but lhs is of type bool.
ERROR(44): '+' requires operands of type int but rhs is of type bool.
ERROR(44): '-' requires operands of type int but rhs is of type char.
ERROR(44): '*' requires operands of type int but rhs is of type char.
ERROR(46): '+' requires operands of type int but rhs is of type bool.
ERROR(46): Symbol 'emu' is not declared.
ERROR(46): Symbol 'parrot' is not declared.
ERROR(46): Symbol 'x' is not declared.
ERROR(46): Symbol 'x' is not declared.
ERROR(47): '*' requires operands of type int but rhs is of type bool.
ERROR(47): '+' requires operands of type int but rhs is of type bool.
ERROR(47): Symbol 'emu' is not declared.
ERROR(47): Symbol 'emu' is not declared.
ERROR(47): Symbol 'parrot' is not declared.
ERROR(47): Symbol 'x' is not declared.
ERROR(47): Symbol 'x' is not declared.
ERROR(47): Symbol 'x' is not declared.
Number of warnings: 15
Number of errors: 40

==============
==============
./c- -M parmtiny.c-
WARNING(2): Expecting to return type char but function 'emu' has no return statement.
WARNING(2): The parameter 'x' seems not to be used.
WARNING(2): The parameter 'y' seems not to be used.
WARNING(2): The parameter 'z' seems not to be used.
ERROR(9): Expecting type char in parameter 2 of call to 'emu' declared on line 2 but got type int.
ERROR(9): Expecting type char in parameter 3 of call to 'emu' declared on line 2 but got type bool.
ERROR(10): Expecting type char in parameter 2 of call to 'emu' declared on line 2 but got type int.
ERROR(10): Expecting type char in parameter 3 of call to 'emu' declared on line 2 but got type bool.
WARNING(10): Variable 'b' may be uninitialized when used here.
WARNING(10): Variable 'c' may be uninitialized when used here.
WARNING(10): Variable 'i' may be uninitialized when used here.
ERROR(11): 'and' requires operands of type bool but rhs is of type int.
ERROR(11): Expecting type char in parameter 1 of call to 'emu' declared on line 2 but got type int.
ERROR(11): Expecting type char in parameter 3 of call to 'emu' declared on line 2 but got type bool.
ERROR(11): '+' requires operands of type int but lhs is of type char.
ERROR(11): Symbol 'parrot' is not declared.
ERROR(12): 'and' requires operands of type bool but rhs is of type int.
ERROR(12): Expecting type char in parameter 1 of call to 'emu' declared on line 2 but got type int.
ERROR(12): Expecting type char in parameter 2 of call to 'emu' declared on line 2 but got type int.
ERROR(12): Expecting type char in parameter 3 of call to 'emu' declared on line 2 but got type bool.
ERROR(12): Expecting type char in parameter 3 of call to 'emu' declared on line 2 but got type bool.
ERROR(12): '+' requires operands of type int but lhs is of type char.
ERROR(13): Too few parameters passed for function 'emu' declared on line 2.
ERROR(14): Expecting type char in parameter 2 of call to 'emu' declared on line 2 but got type int.
ERROR(14): Too few parameters passed for function 'emu' declared on line 2.
ERROR(15): Expecting type char in parameter 2 of call to 'emu' declared on line 2 but got type int.
ERROR(15): Expecting type char in parameter 3 of call to 'emu' declared on line 2 but got type bool.
ERROR(16): Expecting type char in parameter 2 of call to 'emu' declared on line 2 but got type int.
ERROR(16): Expecting type char in parameter 3 of call to 'emu' declared on line 2 but got type bool.
ERROR(16): '+' requires operands of type int but lhs is of type char.
ERROR(16): Too many parameters passed for function 'emu' declared on line 2.
ERROR(17): 'and' requires operands of type bool but rhs is of type int.
ERROR(17): '+' requires operands of type int but lhs is of type char.
ERROR(17): Symbol 'zot' is not declared.
Number of warnings: 7
Number of errors: 27

==============
==============
./c- -M part2.c-
WARNING(1): The function 'ant' seems not to be used.
ERROR(4): Cannot use array as test condition in if statement.
ERROR(4): Expecting Boolean test condition in if statement but got type int.
WARNING(4): Variable 'z' may be uninitialized when used here.
ERROR(5): Cannot return an array.
WARNING(8): The function 'bat' seems not to be used.
ERROR(10): Function 'bat' at line 8 is expecting no return value, but return has a value.
WARNING(13): The function 'cat' seems not to be used.
ERROR(15): Function 'cat' at line 13 is expecting to return type int but return has no value.
ERROR(20): Symbol 'x' is already declared at line 18.
ERROR(26): Symbol 'dog' is already declared at line 18.
WARNING(26): Expecting to return type char but function 'dog' has no return statement.
WARNING(28): The parameter 'z' seems not to be used.
ERROR(34): Initializer for variable 'c' of type char is of type int
ERROR(35): Initializer for variable 'd' is not a constant expression.
ERROR(35): Initializer for variable 'd' of type char is of type int
ERROR(35): '+' requires operands of type int but lhs is of type char.
WARNING(35): The variable 'd' seems not to be used.
ERROR(38): Cannot have a break statement outside of loop.
ERROR(39): Expecting Boolean test condition in while statement but got type int.
ERROR(40): Expecting Boolean test condition in if statement but got type int.
ERROR(42): Symbol 'zebu' is not declared.
ERROR(44): Too few parameters passed for function 'dog' declared on line 18.
ERROR(45): Expecting type int in parameter 1 of call to 'dog' declared on line 18 but got type char.
ERROR(45): Too few parameters passed for function 'dog' declared on line 18.
ERROR(46): Expecting type int in parameter 1 of call to 'dog' declared on line 18 but got type char.
ERROR(46): Expecting type int in parameter 2 of call to 'dog' declared on line 18 but got type char.
ERROR(47): Expecting type int in parameter 1 of call to 'dog' declared on line 18 but got type char.
ERROR(47): Expecting type int in parameter 2 of call to 'dog' declared on line 18 but got type char.
ERROR(47): '+' requires operands of type int but lhs is of type char.
ERROR(47): Too many parameters passed for function 'dog' declared on line 18.
ERROR(47): Unary 'chsign' requires an operand of type int but was given type bool.
ERROR(49): Not expecting array in parameter 1 of call to 'dog' declared on line 18.
ERROR(49): Too few parameters passed for function 'dog' declared on line 18.
WARNING(49): Variable 'z' may be uninitialized when used here.
ERROR(50): Expecting array in parameter 1 of call to 'elk' declared on line 28.
ERROR(50): Expecting type bool in parameter 1 of call to 'elk' declared on line 28 but got type int.
ERROR(51): Expecting array in parameter 1 of call to 'elk' declared on line 28.
ERROR(51): Expecting type bool in parameter 1 of call to 'elk' declared on line 28 but got type void.
ERROR(51): Expecting type int in parameter 1 of call to 'dog' declared on line 18 but got type bool.
Number of warnings: 8
Number of errors: 32

==============
==============
./c- -M peek.c-
WARNING(4): Variable 'y' may be uninitialized when used here.
Func: main returns type void [mem: Global loc: 0 size: -2] [line: 1]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 2]
.   .   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 3]
.   .   .   Child: 0  Var: x of type int [mem: Local loc: -2 size: 1] [line: 3]
.   .   .   Child: 1  Assign: <= of type int [line: 3]
.   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 3]
.   .   .   .   Child: 1  Const 666 of type int [line: 3]
.   .   Sibling: 1  Compound [mem: None loc: 0 size: -3] [line: 4]
.   .   .   Child: 0  Var: y of type int [mem: Local loc: -2 size: 1] [line: 4]
.   .   .   Child: 1  Call: output of type void [line: 4]
.   .   .   .   Child: 0  Id: y of type int [mem: Local loc: -2 size: 1] [line: 4]
Offset for end of global space: 0
Number of warnings: 1
Number of errors: 0

==============
==============
./c- -M precassoc.c-
Var: w of type int [mem: Global loc: 0 size: 1] [line: 2]
Sibling: 1  Func: dog returns type int [mem: Global loc: 0 size: -3] [line: 4]
.   Child: 0  Parm: x of type int [mem: Parameter loc: -2 size: 1] [line: 4]
.   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 4]
.   .   Child: 0  Var: y of type int [mem: Local loc: -3 size: 1] [line: 5]
.   .   Sibling: 1  Var: z of type int [mem: Local loc: -4 size: 1] [line: 5]
.   .   Child: 1  Assign: <= of type int [line: 7]
.   .   .   Child: 0  Id: y of type int [mem: Local loc: -3 size: 1] [line: 7]
.   .   .   Child: 1  Op: + of type int [line: 7]
.   .   .   .   Child: 0  Op: * of type int [line: 7]
.   .   .   .   .   Child: 0  Id: x of type int [mem: Parameter loc: -2 size: 1] [line: 7]
.   .   .   .   .   Child: 1  Const 111 of type int [line: 7]
.   .   .   .   Child: 1  Const 222 of type int [line: 7]
.   .   Sibling: 1  Assign: <= of type int [line: 9]
.   .   .   Child: 0  Id: z of type int [mem: Local loc: -4 size: 1] [line: 9]
.   .   .   Child: 1  Op: + of type int [line: 9]
.   .   .   .   Child: 0  Id: y of type int [mem: Local loc: -3 size: 1] [line: 9]
.   .   .   .   Child: 1  Op: * of type int [line: 9]
.   .   .   .   .   Child: 0  Const 333 of type int [line: 9]
.   .   .   .   .   Child: 1  Op: + of type int [line: 9]
.   .   .   .   .   .   Child: 0  Const 444 of type int [line: 9]
.   .   .   .   .   .   Child: 1  Const 555 of type int [line: 9]
.   .   Sibling: 2  Assign: <= of type int [line: 11]
.   .   .   Child: 0  Id: w of type int [mem: Global loc: 0 size: 1] [line: 11]
.   .   .   Child: 1  Op: * of type int [line: 11]
.   .   .   .   Child: 0  Op: + of type int [line: 11]
.   .   .   .   .   Child: 0  Const 111 of type int [line: 11]
.   .   .   .   .   Child: 1  Const 222 of type int [line: 11]
.   .   .   .   Child: 1  Op: + of type int [line: 11]
.   .   .   .   .   Child: 0  Const 333 of type int [line: 11]
.   .   .   .   .   Child: 1  Const 444 of type int [line: 11]
.   .   Sibling: 3  Assign: <= of type int [line: 13]
.   .   .   Child: 0  Id: w of type int [mem: Global loc: 0 size: 1] [line: 13]
.   .   .   Child: 1  Op: * of type int [line: 13]
.   .   .   .   Child: 0  Call: dog of type int [line: 13]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 13]
.   .   .   .   Child: 1  Call: dog of type int [line: 13]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 13]
.   .   Sibling: 4  Return [line: 15]
.   .   .   Child: 0  Id: z of type int [mem: Local loc: -4 size: 1] [line: 15]
Sibling: 2  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 18]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 18]
.   .   Child: 1  Call: dog of type int [line: 19]
.   .   .   Child: 0  Const 666 of type int [line: 19]
Offset for end of global space: -1
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M randomRoll.c-
Func: main returns type void [mem: Global loc: 0 size: -2] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 3]
.   .   Child: 0  Var: i of type int [mem: Local loc: -2 size: 1] [line: 4]
.   .   Sibling: 1  Var: sum of type int [mem: Local loc: -3 size: 1] [line: 4]
.   .   Child: 1  Assign: <= of type int [line: 6]
.   .   .   Child: 0  Id: i of type int [mem: Local loc: -2 size: 1] [line: 6]
.   .   .   Child: 1  Assign: <= of type int [line: 6]
.   .   .   .   Child: 0  Id: sum of type int [mem: Local loc: -3 size: 1] [line: 6]
.   .   .   .   Child: 1  Const 0 of type int [line: 6]
.   .   Sibling: 1  While [line: 7]
.   .   .   Child: 0  Op: < of type bool [line: 7]
.   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -2 size: 1] [line: 7]
.   .   .   .   Child: 1  Const 1000 of type int [line: 7]
.   .   .   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 7]
.   .   .   .   Child: 1  Assign: += of type int [line: 8]
.   .   .   .   .   Child: 0  Id: sum of type int [mem: Local loc: -3 size: 1] [line: 8]
.   .   .   .   .   Child: 1  Op: ? of type int [line: 8]
.   .   .   .   .   .   Child: 0  Const 6 of type int [line: 8]
.   .   .   .   Sibling: 1  Assign: ++ of type int [line: 9]
.   .   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -2 size: 1] [line: 9]
.   .   Sibling: 2  Call: outputb of type void [line: 11]
.   .   .   Child: 0  Const true of type bool [line: 11]
.   .   Sibling: 3  Call: outputb of type void [line: 13]
.   .   .   Child: 0  Op: and of type bool [line: 13]
.   .   .   .   Child: 0  Op: < of type bool [line: 13]
.   .   .   .   .   Child: 0  Const 2300 of type int [line: 13]
.   .   .   .   .   Child: 1  Id: sum of type int [mem: Local loc: -3 size: 1] [line: 13]
.   .   .   .   Child: 1  Op: < of type bool [line: 13]
.   .   .   .   .   Child: 0  Id: sum of type int [mem: Local loc: -3 size: 1] [line: 13]
.   .   .   .   .   Child: 1  Const 2700 of type int [line: 13]
.   .   Sibling: 4  Call: outnl of type void [line: 14]
.   .   Sibling: 5  Call: outputb of type void [line: 16]
.   .   .   Child: 0  Op: < of type bool [line: 16]
.   .   .   .   Child: 0  Op: ? of type int [line: 16]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 16]
.   .   .   .   Child: 1  Const 3 of type int [line: 16]
.   .   Sibling: 6  Call: outnl of type void [line: 17]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M rangeifwhile.c-
ERROR(6): Cannot use array as test condition in if statement.
WARNING(6): Variable 'b' may be uninitialized when used here.
ERROR(7): Expecting Boolean test condition in if statement but got type int.
ERROR(9): Cannot use array as test condition in while statement.
ERROR(10): Expecting Boolean test condition in while statement but got type char.
ERROR(12): Cannot use array in position 1 in range of for statement.
ERROR(12): Cannot use array in position 2 in range of for statement.
ERROR(12): Cannot use array in position 3 in range of for statement.
WARNING(12): The variable 'x' seems not to be used.
WARNING(12): Variable 'a' may be uninitialized when used here.
ERROR(13): Cannot use function 'main' as a variable.
ERROR(13): Expecting type int in position 1 in range of for statement but got type bool.
ERROR(13): Expecting type int in position 2 in range of for statement but got type char.
ERROR(13): Symbol 'x' is not declared.
Number of warnings: 3
Number of errors: 11

==============
==============
./c- -M redefined.c-
WARNING(1): The variable 'g' seems not to be used.
ERROR(5): Symbol 'x' is already declared at line 5.
WARNING(5): The variable 'x' seems not to be used.
ERROR(6): Symbol 'x' is already declared at line 5.
ERROR(6): Symbol 'x' is already declared at line 5.
ERROR(7): Symbol 'x' is already declared at line 5.
ERROR(7): Symbol 'x' is already declared at line 5.
ERROR(9): Symbol 'y' is already declared at line 9.
WARNING(9): The variable 'y' seems not to be used.
WARNING(11): The variable 'main' seems not to be used.
ERROR(12): Symbol 'main' is already declared at line 11.
ERROR(13): Symbol 'main' is already declared at line 11.
WARNING(15): The variable 'g' seems not to be used.
ERROR(18): Symbol 'a' is already declared at line 18.
ERROR(18): Symbol 'b' is already declared at line 18.
ERROR(18): Symbol 'c' is already declared at line 18.
ERROR(18): Symbol 'main' is already declared at line 3.
WARNING(18): The parameter 'a' seems not to be used.
WARNING(18): The parameter 'b' seems not to be used.
WARNING(18): The parameter 'c' seems not to be used.
ERROR(19): Symbol 'a' is already declared at line 18.
ERROR(19): Symbol 'b' is already declared at line 18.
ERROR(19): Symbol 'c' is already declared at line 18.
WARNING(20): The variable 'g' seems not to be used.
WARNING(22): The variable 'g' seems not to be used.
WARNING(23): The variable 'a' seems not to be used.
WARNING(23): The variable 'b' seems not to be used.
WARNING(23): The variable 'c' seems not to be used.
ERROR(24): Symbol 'a' is already declared at line 23.
ERROR(24): Symbol 'b' is already declared at line 23.
ERROR(24): Symbol 'c' is already declared at line 23.
WARNING(26): The variable 'a' seems not to be used.
WARNING(26): The variable 'b' seems not to be used.
WARNING(26): The variable 'c' seems not to be used.
WARNING(27): The variable 'g' seems not to be used.
WARNING(27): The variable 'main' seems not to be used.
WARNING(32): The function 'cat' seems not to be used.
WARNING(32): The parameter 'cat' seems not to be used.
WARNING(32): The parameter 'g' seems not to be used.
ERROR(33): Symbol 'cat' is already declared at line 32.
ERROR(36): Symbol 'cat' is already declared at line 32.
ERROR(36): Symbol 'g' is already declared at line 1.
Number of warnings: 21
Number of errors: 21

==============
==============
./c- -M returnbad.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
ERROR(1): Function 'ruby' at line 1 is expecting to return type int but returns type bool.
WARNING(1): The function 'ruby' seems not to be used.
ERROR(2): Function 'weiss' at line 2 is expecting to return type int but return has no value.
WARNING(2): The function 'weiss' seems not to be used.
WARNING(3): Expecting to return type int but function 'blake' has no return statement.
WARNING(3): The function 'blake' seems not to be used.
ERROR(4): Function 'yang' at line 4 is expecting no return value, but return has a value.
WARNING(4): The function 'yang' seems not to be used.
ERROR(5): Cannot return an array.
WARNING(5): The function 'rwby' seems not to be used.
Number of warnings: 6
Number of errors: 5

==============
==============
./c- -M return.c-
WARNING(2): Expecting to return type int but function 'bender' has no return statement.
WARNING(21): Expecting to return type char but function 'zapp' has no return statement.
WARNING(30): Expecting to return type bool but function 'hermes' has no return statement.
WARNING(34): Expecting to return type int but function 'main' has no return statement.
Func: bender returns type int [mem: Global loc: 0 size: -2] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 3]
Sibling: 1  Func: fry returns type int [mem: Global loc: 0 size: -2] [line: 6]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 7]
.   .   Child: 1  Return [line: 8]
.   .   .   Child: 0  Const 114 of type int [line: 8]
Sibling: 2  Func: leela returns type void [mem: Global loc: 0 size: -2] [line: 11]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 12]
.   .   Child: 1  Call: outputc of type void [line: 13]
.   .   .   Child: 0  Const 'L' of type char [line: 13]
Sibling: 3  Func: zoidberg returns type char [mem: Global loc: 0 size: -2] [line: 16]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 17]
.   .   Child: 1  Return [line: 18]
.   .   .   Child: 0  Const 'z' of type char [line: 18]
Sibling: 4  Func: zapp returns type char [mem: Global loc: 0 size: -2] [line: 21]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 22]
Sibling: 5  Func: amy returns type bool [mem: Global loc: 0 size: -2] [line: 25]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 26]
.   .   Child: 1  Return [line: 27]
.   .   .   Child: 0  Const true of type bool [line: 27]
Sibling: 6  Func: hermes returns type bool [mem: Global loc: 0 size: -2] [line: 30]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 31]
Sibling: 7  Func: main returns type int [mem: Global loc: 0 size: -2] [line: 34]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 35]
.   .   Child: 1  Call: leela of type void [line: 36]
.   .   Sibling: 1  Call: outnl of type void [line: 37]
.   .   Sibling: 2  Call: output of type void [line: 39]
.   .   .   Child: 0  Call: bender of type int [line: 39]
.   .   Sibling: 3  Call: output of type void [line: 40]
.   .   .   Child: 0  Call: fry of type int [line: 40]
.   .   Sibling: 4  Call: outnl of type void [line: 41]
.   .   Sibling: 5  Call: outputc of type void [line: 43]
.   .   .   Child: 0  Call: zoidberg of type char [line: 43]
.   .   Sibling: 6  Call: outputb of type void [line: 44]
.   .   .   Child: 0  Op: = of type bool [line: 44]
.   .   .   .   Child: 0  Call: zapp of type char [line: 44]
.   .   .   .   Child: 1  Const ' ' of type char [line: 44]
.   .   Sibling: 7  Call: outnl of type void [line: 45]
.   .   Sibling: 8  Call: outputb of type void [line: 47]
.   .   .   Child: 0  Call: amy of type bool [line: 47]
.   .   Sibling: 9  Call: outputb of type void [line: 48]
.   .   .   Child: 0  Call: hermes of type bool [line: 48]
.   .   Sibling: 10  Call: outnl of type void [line: 49]
Offset for end of global space: 0
Number of warnings: 4
Number of errors: 0

==============
==============
./c- -M scope35.c-
Var: a of type int [mem: Global loc: 0 size: 1] [line: 2]
Sibling: 1  Var: aa of array of type int [mem: Global loc: -2 size: 12] [line: 3]
Sibling: 2  Func: fox returns type void [mem: Global loc: 0 size: -4] [line: 5]
.   Child: 0  Parm: fpa of type int [mem: Parameter loc: -2 size: 1] [line: 5]
.   Sibling: 1  Parm: fpaa of array of type int [mem: Parameter loc: -3 size: 1] [line: 5]
.   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 6]
.   .   Child: 1  Call: output of type void [line: 7]
.   .   .   Child: 0  Id: fpa of type int [mem: Parameter loc: -2 size: 1] [line: 7]
.   .   Sibling: 1  Call: output of type void [line: 8]
.   .   .   Child: 0  Op: sizeof of type int [line: 8]
.   .   .   .   Child: 0  Id: fpaa of array of type int [mem: Parameter loc: -3 size: 1] [line: 8]
.   .   Sibling: 2  Call: output of type void [line: 9]
.   .   .   Child: 0  Op: [ of type int [line: 9]
.   .   .   .   Child: 0  Id: fpaa of array of type int [mem: Parameter loc: -3 size: 1] [line: 9]
.   .   .   .   Child: 1  Const 0 of type int [line: 9]
.   .   Sibling: 3  Call: output of type void [line: 10]
.   .   .   Child: 0  Op: [ of type int [line: 10]
.   .   .   .   Child: 0  Id: fpaa of array of type int [mem: Parameter loc: -3 size: 1] [line: 10]
.   .   .   .   Child: 1  Const 10 of type int [line: 10]
.   .   Sibling: 4  Call: outnl of type void [line: 11]
Sibling: 3  Func: bat returns type void [mem: Global loc: 0 size: -4] [line: 15]
.   Child: 0  Parm: fpa of type int [mem: Parameter loc: -2 size: 1] [line: 15]
.   Sibling: 1  Parm: fpaa of array of type int [mem: Parameter loc: -3 size: 1] [line: 15]
.   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 16]
.   .   Child: 1  Call: outputc of type void [line: 17]
.   .   .   Child: 0  Const 'B' of type char [line: 17]
.   .   Sibling: 1  Call: fox of type void [line: 18]
.   .   .   Child: 0  Id: fpa of type int [mem: Parameter loc: -2 size: 1] [line: 18]
.   .   .   Sibling: 1  Id: fpaa of array of type int [mem: Parameter loc: -3 size: 1] [line: 18]
Sibling: 4  Func: th returns type int [mem: Global loc: 0 size: -3] [line: 21]
.   Child: 0  Parm: fpa of type int [mem: Parameter loc: -2 size: 1] [line: 21]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 21]
.   .   Child: 1  Return [line: 21]
.   .   .   Child: 0  Id: fpa of type int [mem: Parameter loc: -2 size: 1] [line: 21]
Sibling: 5  Func: tha returns type int [mem: Global loc: 0 size: -3] [line: 23]
.   Child: 0  Parm: fpaa of array of type int [mem: Parameter loc: -2 size: 1] [line: 23]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 23]
.   .   Child: 1  Return [line: 23]
.   .   .   Child: 0  Op: [ of type int [line: 23]
.   .   .   .   Child: 0  Id: fpaa of array of type int [mem: Parameter loc: -2 size: 1] [line: 23]
.   .   .   .   Child: 1  Const 0 of type int [line: 23]
Sibling: 6  Func: dog returns type void [mem: Global loc: 0 size: -4] [line: 25]
.   Child: 0  Parm: pa of type int [mem: Parameter loc: -2 size: 1] [line: 25]
.   Sibling: 1  Parm: paa of array of type int [mem: Parameter loc: -3 size: 1] [line: 25]
.   Child: 1  Compound [mem: None loc: 0 size: -17] [line: 26]
.   .   Child: 0  Var: b of type int [mem: Local loc: -4 size: 1] [line: 27]
.   .   Sibling: 1  Var: bb of array of type int [mem: Local loc: -6 size: 12] [line: 28]
.   .   Child: 1  Assign: <= of type int [line: 30]
.   .   .   Child: 0  Id: a of type int [mem: Global loc: 0 size: 1] [line: 30]
.   .   .   Child: 1  Const 111 of type int [line: 30]
.   .   Sibling: 1  Assign: <= of type int [line: 31]
.   .   .   Child: 0  Op: [ of type int [line: 31]
.   .   .   .   Child: 0  Id: aa of array of type int [mem: Global loc: -2 size: 12] [line: 31]
.   .   .   .   Child: 1  Const 0 of type int [line: 31]
.   .   .   Child: 1  Const 110 of type int [line: 31]
.   .   Sibling: 2  Assign: <= of type int [line: 32]
.   .   .   Child: 0  Op: [ of type int [line: 32]
.   .   .   .   Child: 0  Id: aa of array of type int [mem: Global loc: -2 size: 12] [line: 32]
.   .   .   .   Child: 1  Const 10 of type int [line: 32]
.   .   .   Child: 1  Const 112 of type int [line: 32]
.   .   Sibling: 3  Assign: <= of type int [line: 34]
.   .   .   Child: 0  Id: b of type int [mem: Local loc: -4 size: 1] [line: 34]
.   .   .   Child: 1  Const 222 of type int [line: 34]
.   .   Sibling: 4  Assign: <= of type int [line: 35]
.   .   .   Child: 0  Op: [ of type int [line: 35]
.   .   .   .   Child: 0  Id: bb of array of type int [mem: Local loc: -6 size: 12] [line: 35]
.   .   .   .   Child: 1  Const 0 of type int [line: 35]
.   .   .   Child: 1  Const 220 of type int [line: 35]
.   .   Sibling: 5  Assign: <= of type int [line: 36]
.   .   .   Child: 0  Op: [ of type int [line: 36]
.   .   .   .   Child: 0  Id: bb of array of type int [mem: Local loc: -6 size: 12] [line: 36]
.   .   .   .   Child: 1  Const 10 of type int [line: 36]
.   .   .   Child: 1  Const 222 of type int [line: 36]
.   .   Sibling: 6  Assign: <= of type int [line: 37]
.   .   .   Child: 0  Id: b of type int [mem: Local loc: -4 size: 1] [line: 37]
.   .   .   Child: 1  Id: pa of type int [mem: Parameter loc: -2 size: 1] [line: 37]
.   .   Sibling: 7  Call: fox of type void [line: 39]
.   .   .   Child: 0  Id: a of type int [mem: Global loc: 0 size: 1] [line: 39]
.   .   .   Sibling: 1  Id: aa of array of type int [mem: Global loc: -2 size: 12] [line: 39]
.   .   Sibling: 8  Call: fox of type void [line: 40]
.   .   .   Child: 0  Id: b of type int [mem: Local loc: -4 size: 1] [line: 40]
.   .   .   Sibling: 1  Id: bb of array of type int [mem: Local loc: -6 size: 12] [line: 40]
.   .   Sibling: 9  Assign: <= of array of type int [line: 42]
.   .   .   Child: 0  Id: bb of array of type int [mem: Local loc: -6 size: 12] [line: 42]
.   .   .   Child: 1  Id: paa of array of type int [mem: Parameter loc: -3 size: 1] [line: 42]
.   .   Sibling: 10  Compound [mem: None loc: 0 size: -30] [line: 43]
.   .   .   Child: 0  Var: c of type int [mem: Local loc: -17 size: 1] [line: 44]
.   .   .   Sibling: 1  Var: cc of array of type int [mem: Local loc: -19 size: 12] [line: 45]
.   .   .   Child: 1  Assign: <= of type int [line: 47]
.   .   .   .   Child: 0  Id: c of type int [mem: Local loc: -17 size: 1] [line: 47]
.   .   .   .   Child: 1  Const 333 of type int [line: 47]
.   .   .   Sibling: 1  Assign: <= of type int [line: 48]
.   .   .   .   Child: 0  Op: [ of type int [line: 48]
.   .   .   .   .   Child: 0  Id: cc of array of type int [mem: Local loc: -19 size: 12] [line: 48]
.   .   .   .   .   Child: 1  Const 0 of type int [line: 48]
.   .   .   .   Child: 1  Const 330 of type int [line: 48]
.   .   .   Sibling: 2  Assign: <= of type int [line: 49]
.   .   .   .   Child: 0  Op: [ of type int [line: 49]
.   .   .   .   .   Child: 0  Id: cc of array of type int [mem: Local loc: -19 size: 12] [line: 49]
.   .   .   .   .   Child: 1  Const 10 of type int [line: 49]
.   .   .   .   Child: 1  Const 334 of type int [line: 49]
.   .   .   Sibling: 3  Call: outnl of type void [line: 51]
.   .   .   Sibling: 4  Call: fox of type void [line: 52]
.   .   .   .   Child: 0  Id: a of type int [mem: Global loc: 0 size: 1] [line: 52]
.   .   .   .   Sibling: 1  Id: aa of array of type int [mem: Global loc: -2 size: 12] [line: 52]
.   .   .   Sibling: 5  Call: fox of type void [line: 53]
.   .   .   .   Child: 0  Id: b of type int [mem: Local loc: -4 size: 1] [line: 53]
.   .   .   .   Sibling: 1  Id: bb of array of type int [mem: Local loc: -6 size: 12] [line: 53]
.   .   .   Sibling: 6  Call: fox of type void [line: 54]
.   .   .   .   Child: 0  Id: c of type int [mem: Local loc: -17 size: 1] [line: 54]
.   .   .   .   Sibling: 1  Id: cc of array of type int [mem: Local loc: -19 size: 12] [line: 54]
.   .   Sibling: 11  Compound [mem: None loc: 0 size: -30] [line: 56]
.   .   .   Child: 0  Var: d of type int [mem: Local loc: -17 size: 1] [line: 57]
.   .   .   Sibling: 1  Var: dd of array of type int [mem: Local loc: -19 size: 12] [line: 58]
.   .   .   Child: 1  Assign: <= of type int [line: 60]
.   .   .   .   Child: 0  Id: d of type int [mem: Local loc: -17 size: 1] [line: 60]
.   .   .   .   Child: 1  Const 444 of type int [line: 60]
.   .   .   Sibling: 1  Assign: <= of type int [line: 61]
.   .   .   .   Child: 0  Op: [ of type int [line: 61]
.   .   .   .   .   Child: 0  Id: dd of array of type int [mem: Local loc: -19 size: 12] [line: 61]
.   .   .   .   .   Child: 1  Const 0 of type int [line: 61]
.   .   .   .   Child: 1  Const 440 of type int [line: 61]
.   .   .   Sibling: 2  Assign: <= of type int [line: 62]
.   .   .   .   Child: 0  Op: [ of type int [line: 62]
.   .   .   .   .   Child: 0  Id: dd of array of type int [mem: Local loc: -19 size: 12] [line: 62]
.   .   .   .   .   Child: 1  Const 10 of type int [line: 62]
.   .   .   .   Child: 1  Const 445 of type int [line: 62]
.   .   .   Sibling: 3  Call: outnl of type void [line: 64]
.   .   .   Sibling: 4  Call: fox of type void [line: 65]
.   .   .   .   Child: 0  Id: a of type int [mem: Global loc: 0 size: 1] [line: 65]
.   .   .   .   Sibling: 1  Id: aa of array of type int [mem: Global loc: -2 size: 12] [line: 65]
.   .   .   Sibling: 5  Call: fox of type void [line: 66]
.   .   .   .   Child: 0  Id: b of type int [mem: Local loc: -4 size: 1] [line: 66]
.   .   .   .   Sibling: 1  Id: bb of array of type int [mem: Local loc: -6 size: 12] [line: 66]
.   .   .   Sibling: 6  Call: fox of type void [line: 67]
.   .   .   .   Child: 0  Id: d of type int [mem: Local loc: -17 size: 1] [line: 67]
.   .   .   .   Sibling: 1  Id: dd of array of type int [mem: Local loc: -19 size: 12] [line: 67]
.   .   .   Sibling: 7  Call: outnl of type void [line: 69]
.   .   .   Sibling: 8  Call: bat of type void [line: 70]
.   .   .   .   Child: 0  Id: a of type int [mem: Global loc: 0 size: 1] [line: 70]
.   .   .   .   Sibling: 1  Id: aa of array of type int [mem: Global loc: -2 size: 12] [line: 70]
.   .   .   Sibling: 9  Call: bat of type void [line: 71]
.   .   .   .   Child: 0  Id: b of type int [mem: Local loc: -4 size: 1] [line: 71]
.   .   .   .   Sibling: 1  Id: bb of array of type int [mem: Local loc: -6 size: 12] [line: 71]
.   .   .   Sibling: 10  Call: bat of type void [line: 72]
.   .   .   .   Child: 0  Id: d of type int [mem: Local loc: -17 size: 1] [line: 72]
.   .   .   .   Sibling: 1  Id: dd of array of type int [mem: Local loc: -19 size: 12] [line: 72]
.   .   Sibling: 12  Compound [mem: None loc: 0 size: -17] [line: 74]
.   .   .   Child: 0  Var: e of static type int [mem: LocalStatic loc: -13 size: 1] [line: 75]
.   .   .   Sibling: 1  Var: ee of static array of type int [mem: LocalStatic loc: -15 size: 12] [line: 76]
.   .   .   Child: 1  Assign: <= of type int [line: 78]
.   .   .   .   Child: 0  Id: e of static type int [mem: LocalStatic loc: -13 size: 1] [line: 78]
.   .   .   .   Child: 1  Const 555 of type int [line: 78]
.   .   .   Sibling: 1  Assign: <= of type int [line: 79]
.   .   .   .   Child: 0  Op: [ of type int [line: 79]
.   .   .   .   .   Child: 0  Id: ee of static array of type int [mem: LocalStatic loc: -15 size: 12] [line: 79]
.   .   .   .   .   Child: 1  Const 0 of type int [line: 79]
.   .   .   .   Child: 1  Const 550 of type int [line: 79]
.   .   .   Sibling: 2  Assign: <= of type int [line: 80]
.   .   .   .   Child: 0  Op: [ of type int [line: 80]
.   .   .   .   .   Child: 0  Id: ee of static array of type int [mem: LocalStatic loc: -15 size: 12] [line: 80]
.   .   .   .   .   Child: 1  Const 10 of type int [line: 80]
.   .   .   .   Child: 1  Const 556 of type int [line: 80]
.   .   .   Sibling: 3  Call: outnl of type void [line: 82]
.   .   .   Sibling: 4  Call: fox of type void [line: 83]
.   .   .   .   Child: 0  Id: a of type int [mem: Global loc: 0 size: 1] [line: 83]
.   .   .   .   Sibling: 1  Id: aa of array of type int [mem: Global loc: -2 size: 12] [line: 83]
.   .   .   Sibling: 5  Call: fox of type void [line: 84]
.   .   .   .   Child: 0  Id: b of type int [mem: Local loc: -4 size: 1] [line: 84]
.   .   .   .   Sibling: 1  Id: bb of array of type int [mem: Local loc: -6 size: 12] [line: 84]
.   .   .   Sibling: 6  Call: fox of type void [line: 85]
.   .   .   .   Child: 0  Id: e of static type int [mem: LocalStatic loc: -13 size: 1] [line: 85]
.   .   .   .   Sibling: 1  Id: ee of static array of type int [mem: LocalStatic loc: -15 size: 12] [line: 85]
.   .   .   Sibling: 7  Call: outnl of type void [line: 87]
.   .   .   Sibling: 8  Call: bat of type void [line: 88]
.   .   .   .   Child: 0  Id: a of type int [mem: Global loc: 0 size: 1] [line: 88]
.   .   .   .   Sibling: 1  Id: aa of array of type int [mem: Global loc: -2 size: 12] [line: 88]
.   .   .   Sibling: 9  Call: bat of type void [line: 89]
.   .   .   .   Child: 0  Id: b of type int [mem: Local loc: -4 size: 1] [line: 89]
.   .   .   .   Sibling: 1  Id: bb of array of type int [mem: Local loc: -6 size: 12] [line: 89]
.   .   .   Sibling: 10  Call: bat of type void [line: 90]
.   .   .   .   Child: 0  Id: e of static type int [mem: LocalStatic loc: -13 size: 1] [line: 90]
.   .   .   .   Sibling: 1  Id: ee of static array of type int [mem: LocalStatic loc: -15 size: 12] [line: 90]
.   .   Sibling: 13  Call: outnl of type void [line: 93]
.   .   Sibling: 14  Call: output of type void [line: 94]
.   .   .   Child: 0  Call: th of type int [line: 94]
.   .   .   .   Child: 0  Id: a of type int [mem: Global loc: 0 size: 1] [line: 94]
.   .   Sibling: 15  Call: output of type void [line: 95]
.   .   .   Child: 0  Call: tha of type int [line: 95]
.   .   .   .   Child: 0  Id: aa of array of type int [mem: Global loc: -2 size: 12] [line: 95]
.   .   Sibling: 16  Call: outnl of type void [line: 96]
.   .   Sibling: 17  Call: bat of type void [line: 97]
.   .   .   Child: 0  Call: th of type int [line: 97]
.   .   .   .   Child: 0  Id: a of type int [mem: Global loc: 0 size: 1] [line: 97]
.   .   .   Sibling: 1  Id: aa of array of type int [mem: Global loc: -2 size: 12] [line: 97]
.   .   Sibling: 18  Call: outnl of type void [line: 98]
Sibling: 7  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 102]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 103]
.   .   Child: 1  Call: dog of type void [line: 104]
.   .   .   Child: 0  Id: a of type int [mem: Global loc: 0 size: 1] [line: 104]
.   .   .   Sibling: 1  Id: aa of array of type int [mem: Global loc: -2 size: 12] [line: 104]
Offset for end of global space: -26
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M scope3.c-
WARNING(2): The variable 'a' seems not to be used.
WARNING(3): The variable 'b' seems not to be used.
WARNING(4): The variable 'c' seems not to be used.
WARNING(5): The variable 'aa' seems not to be used.
WARNING(6): The variable 'bb' seems not to be used.
WARNING(7): The variable 'cc' seems not to be used.
WARNING(10): The function 'ibex' seems not to be used.
WARNING(10): The parameter 'pa' seems not to be used.
WARNING(11): The parameter 'pb' seems not to be used.
WARNING(12): The parameter 'pc' seems not to be used.
WARNING(13): The parameter 'paa' seems not to be used.
WARNING(14): The parameter 'pbb' seems not to be used.
WARNING(15): The parameter 'pcc' seems not to be used.
WARNING(18): The variable 'la' seems not to be used.
WARNING(19): The variable 'lb' seems not to be used.
WARNING(20): The variable 'lc' seems not to be used.
WARNING(21): The variable 'laa' seems not to be used.
WARNING(22): The variable 'lbb' seems not to be used.
WARNING(23): The variable 'lcc' seems not to be used.
WARNING(26): The variable 'sla' seems not to be used.
WARNING(27): The variable 'slb' seems not to be used.
WARNING(28): The variable 'slc' seems not to be used.
WARNING(29): The variable 'slaa' seems not to be used.
WARNING(30): The variable 'slbb' seems not to be used.
WARNING(31): The variable 'slcc' seems not to be used.
WARNING(35): The variable 'tla' seems not to be used.
WARNING(36): The variable 'tlb' seems not to be used.
WARNING(37): The variable 'tlc' seems not to be used.
WARNING(38): The variable 'tlaa' seems not to be used.
WARNING(39): The variable 'tlbb' seems not to be used.
WARNING(40): The variable 'tlcc' seems not to be used.
WARNING(44): The variable 'sa' seems not to be used.
WARNING(45): The variable 'sb' seems not to be used.
WARNING(46): The variable 'sc' seems not to be used.
WARNING(47): The variable 'saa' seems not to be used.
WARNING(48): The variable 'sbb' seems not to be used.
WARNING(49): The variable 'scc' seems not to be used.
WARNING(54): The variable 'd' seems not to be used.
WARNING(54): The variable 'ee' seems not to be used.
WARNING(57): The function 'fox' seems not to be used.
WARNING(57): The parameter 'fpaa' seems not to be used.
WARNING(57): The parameter 'fpa' seems not to be used.
WARNING(57): The parameter 'fpbb' seems not to be used.
WARNING(57): The parameter 'fpb' seems not to be used.
WARNING(57): The parameter 'fpcc' seems not to be used.
WARNING(57): The parameter 'fpc' seems not to be used.
WARNING(59): The variable 'foxa' seems not to be used.
Var: a of type int [mem: Global loc: 0 size: 1] [line: 2]
Sibling: 1  Var: b of type bool [mem: Global loc: -1 size: 1] [line: 3]
Sibling: 2  Var: c of type char [mem: Global loc: -2 size: 1] [line: 4]
Sibling: 3  Var: aa of array of type int [mem: Global loc: -4 size: 12] [line: 5]
Sibling: 4  Var: bb of array of type bool [mem: Global loc: -16 size: 23] [line: 6]
Sibling: 5  Var: cc of array of type char [mem: Global loc: -39 size: 34] [line: 7]
Sibling: 6  Func: ibex returns type void [mem: Global loc: 0 size: -8] [line: 10]
.   Child: 0  Parm: pa of type int [mem: Parameter loc: -2 size: 1] [line: 10]
.   Sibling: 1  Parm: pb of type bool [mem: Parameter loc: -3 size: 1] [line: 11]
.   Sibling: 2  Parm: pc of type char [mem: Parameter loc: -4 size: 1] [line: 12]
.   Sibling: 3  Parm: paa of array of type int [mem: Parameter loc: -5 size: 1] [line: 13]
.   Sibling: 4  Parm: pbb of array of type bool [mem: Parameter loc: -6 size: 1] [line: 14]
.   Sibling: 5  Parm: pcc of array of type char [mem: Parameter loc: -7 size: 1] [line: 15]
.   Child: 1  Compound [mem: None loc: 0 size: -80] [line: 17]
.   .   Child: 0  Var: la of type int [mem: Local loc: -8 size: 1] [line: 18]
.   .   Sibling: 1  Var: lb of type bool [mem: Local loc: -9 size: 1] [line: 19]
.   .   Sibling: 2  Var: lc of type char [mem: Local loc: -10 size: 1] [line: 20]
.   .   Sibling: 3  Var: laa of array of type int [mem: Local loc: -12 size: 12] [line: 21]
.   .   Sibling: 4  Var: lbb of array of type bool [mem: Local loc: -24 size: 23] [line: 22]
.   .   Sibling: 5  Var: lcc of array of type char [mem: Local loc: -47 size: 34] [line: 23]
.   .   Child: 1  Compound [mem: None loc: 0 size: -152] [line: 25]
.   .   .   Child: 0  Var: sla of type int [mem: Local loc: -80 size: 1] [line: 26]
.   .   .   Sibling: 1  Var: slb of type bool [mem: Local loc: -81 size: 1] [line: 27]
.   .   .   Sibling: 2  Var: slc of type char [mem: Local loc: -82 size: 1] [line: 28]
.   .   .   Sibling: 3  Var: slaa of array of type int [mem: Local loc: -84 size: 12] [line: 29]
.   .   .   Sibling: 4  Var: slbb of array of type bool [mem: Local loc: -96 size: 23] [line: 30]
.   .   .   Sibling: 5  Var: slcc of array of type char [mem: Local loc: -119 size: 34] [line: 31]
.   .   Sibling: 1  Compound [mem: None loc: 0 size: -152] [line: 34]
.   .   .   Child: 0  Var: tla of type int [mem: Local loc: -80 size: 1] [line: 35]
.   .   .   Sibling: 1  Var: tlb of type bool [mem: Local loc: -81 size: 1] [line: 36]
.   .   .   Sibling: 2  Var: tlc of type char [mem: Local loc: -82 size: 1] [line: 37]
.   .   .   Sibling: 3  Var: tlaa of array of type int [mem: Local loc: -84 size: 12] [line: 38]
.   .   .   Sibling: 4  Var: tlbb of array of type bool [mem: Local loc: -96 size: 23] [line: 39]
.   .   .   Sibling: 5  Var: tlcc of array of type char [mem: Local loc: -119 size: 34] [line: 40]
.   .   Sibling: 2  Compound [mem: None loc: 0 size: -80] [line: 43]
.   .   .   Child: 0  Var: sa of static type int [mem: LocalStatic loc: -72 size: 1] [line: 44]
.   .   .   Sibling: 1  Var: sb of static type bool [mem: LocalStatic loc: -73 size: 1] [line: 45]
.   .   .   Sibling: 2  Var: sc of static type char [mem: LocalStatic loc: -74 size: 1] [line: 46]
.   .   .   Sibling: 3  Var: saa of static array of type int [mem: LocalStatic loc: -76 size: 12] [line: 47]
.   .   .   Sibling: 4  Var: sbb of static array of type bool [mem: LocalStatic loc: -88 size: 23] [line: 48]
.   .   .   Sibling: 5  Var: scc of static array of type char [mem: LocalStatic loc: -111 size: 34] [line: 49]
Sibling: 7  Var: d of type int [mem: Global loc: -144 size: 1] [line: 54]
Sibling: 8  Var: ee of array of type int [mem: Global loc: -146 size: 11] [line: 54]
Sibling: 9  Func: fox returns type void [mem: Global loc: 0 size: -8] [line: 57]
.   Child: 0  Parm: fpa of type int [mem: Parameter loc: -2 size: 1] [line: 57]
.   Sibling: 1  Parm: fpb of type bool [mem: Parameter loc: -3 size: 1] [line: 57]
.   Sibling: 2  Parm: fpc of type char [mem: Parameter loc: -4 size: 1] [line: 57]
.   Sibling: 3  Parm: fpaa of array of type int [mem: Parameter loc: -5 size: 1] [line: 57]
.   Sibling: 4  Parm: fpbb of array of type bool [mem: Parameter loc: -6 size: 1] [line: 57]
.   Sibling: 5  Parm: fpcc of array of type char [mem: Parameter loc: -7 size: 1] [line: 57]
.   Child: 1  Compound [mem: None loc: 0 size: -9] [line: 58]
.   .   Child: 0  Var: foxa of type int [mem: Local loc: -8 size: 1] [line: 59]
Sibling: 10  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 62]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 62]
Offset for end of global space: -156
Number of warnings: 47
Number of errors: 0

==============
==============
./c- -M scope4.c-
Var: a of type int [mem: Global loc: 0 size: 1] [line: 2]
Sibling: 1  Var: aa of array of type int [mem: Global loc: -2 size: 12] [line: 3]
Sibling: 2  Func: fox returns type void [mem: Global loc: 0 size: -4] [line: 5]
.   Child: 0  Parm: fpa of type int [mem: Parameter loc: -2 size: 1] [line: 5]
.   Sibling: 1  Parm: fpaa of array of type int [mem: Parameter loc: -3 size: 1] [line: 5]
.   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 6]
.   .   Child: 1  Call: output of type void [line: 7]
.   .   .   Child: 0  Id: fpa of type int [mem: Parameter loc: -2 size: 1] [line: 7]
.   .   Sibling: 1  Call: output of type void [line: 8]
.   .   .   Child: 0  Op: sizeof of type int [line: 8]
.   .   .   .   Child: 0  Id: fpaa of array of type int [mem: Parameter loc: -3 size: 1] [line: 8]
.   .   Sibling: 2  Call: output of type void [line: 9]
.   .   .   Child: 0  Op: [ of type int [line: 9]
.   .   .   .   Child: 0  Id: fpaa of array of type int [mem: Parameter loc: -3 size: 1] [line: 9]
.   .   .   .   Child: 1  Const 0 of type int [line: 9]
.   .   Sibling: 3  Call: output of type void [line: 10]
.   .   .   Child: 0  Op: [ of type int [line: 10]
.   .   .   .   Child: 0  Id: fpaa of array of type int [mem: Parameter loc: -3 size: 1] [line: 10]
.   .   .   .   Child: 1  Op: - of type int [line: 10]
.   .   .   .   .   Child: 0  Op: sizeof of type int [line: 10]
.   .   .   .   .   .   Child: 0  Id: fpaa of array of type int [mem: Parameter loc: -3 size: 1] [line: 10]
.   .   .   .   .   Child: 1  Const 1 of type int [line: 10]
.   .   Sibling: 4  Call: outnl of type void [line: 11]
Sibling: 3  Func: bat returns type void [mem: Global loc: 0 size: -4] [line: 15]
.   Child: 0  Parm: fpa of type int [mem: Parameter loc: -2 size: 1] [line: 15]
.   Sibling: 1  Parm: fpaa of array of type int [mem: Parameter loc: -3 size: 1] [line: 15]
.   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 16]
.   .   Child: 1  Call: outputc of type void [line: 17]
.   .   .   Child: 0  Const 'B' of type char [line: 17]
.   .   Sibling: 1  Call: fox of type void [line: 18]
.   .   .   Child: 0  Id: fpa of type int [mem: Parameter loc: -2 size: 1] [line: 18]
.   .   .   Sibling: 1  Id: fpaa of array of type int [mem: Parameter loc: -3 size: 1] [line: 18]
Sibling: 4  Func: th returns type int [mem: Global loc: 0 size: -3] [line: 21]
.   Child: 0  Parm: fpa of type int [mem: Parameter loc: -2 size: 1] [line: 21]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 21]
.   .   Child: 1  Return [line: 21]
.   .   .   Child: 0  Op: + of type int [line: 21]
.   .   .   .   Child: 0  Const 1000 of type int [line: 21]
.   .   .   .   Child: 1  Id: fpa of type int [mem: Parameter loc: -2 size: 1] [line: 21]
Sibling: 5  Func: tha returns type int [mem: Global loc: 0 size: -3] [line: 23]
.   Child: 0  Parm: fpaa of array of type int [mem: Parameter loc: -2 size: 1] [line: 23]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 23]
.   .   Child: 1  Return [line: 23]
.   .   .   Child: 0  Op: + of type int [line: 23]
.   .   .   .   Child: 0  Const 1000 of type int [line: 23]
.   .   .   .   Child: 1  Op: [ of type int [line: 23]
.   .   .   .   .   Child: 0  Id: fpaa of array of type int [mem: Parameter loc: -2 size: 1] [line: 23]
.   .   .   .   .   Child: 1  Const 0 of type int [line: 23]
Sibling: 6  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 25]
.   Child: 1  Compound [mem: None loc: 0 size: -15] [line: 26]
.   .   Child: 0  Var: b of type int [mem: Local loc: -2 size: 1] [line: 27]
.   .   Sibling: 1  Var: bb of array of type int [mem: Local loc: -4 size: 12] [line: 28]
.   .   Child: 1  Assign: <= of type int [line: 30]
.   .   .   Child: 0  Id: a of type int [mem: Global loc: 0 size: 1] [line: 30]
.   .   .   Child: 1  Const 111 of type int [line: 30]
.   .   Sibling: 1  Assign: <= of type int [line: 31]
.   .   .   Child: 0  Op: [ of type int [line: 31]
.   .   .   .   Child: 0  Id: aa of array of type int [mem: Global loc: -2 size: 12] [line: 31]
.   .   .   .   Child: 1  Const 0 of type int [line: 31]
.   .   .   Child: 1  Const 110 of type int [line: 31]
.   .   Sibling: 2  Assign: <= of type int [line: 32]
.   .   .   Child: 0  Op: [ of type int [line: 32]
.   .   .   .   Child: 0  Id: aa of array of type int [mem: Global loc: -2 size: 12] [line: 32]
.   .   .   .   Child: 1  Const 10 of type int [line: 32]
.   .   .   Child: 1  Const 112 of type int [line: 32]
.   .   Sibling: 3  Assign: <= of type int [line: 34]
.   .   .   Child: 0  Id: b of type int [mem: Local loc: -2 size: 1] [line: 34]
.   .   .   Child: 1  Const 222 of type int [line: 34]
.   .   Sibling: 4  Assign: <= of type int [line: 35]
.   .   .   Child: 0  Op: [ of type int [line: 35]
.   .   .   .   Child: 0  Id: bb of array of type int [mem: Local loc: -4 size: 12] [line: 35]
.   .   .   .   Child: 1  Const 0 of type int [line: 35]
.   .   .   Child: 1  Const 220 of type int [line: 35]
.   .   Sibling: 5  Assign: <= of type int [line: 36]
.   .   .   Child: 0  Op: [ of type int [line: 36]
.   .   .   .   Child: 0  Id: bb of array of type int [mem: Local loc: -4 size: 12] [line: 36]
.   .   .   .   Child: 1  Const 10 of type int [line: 36]
.   .   .   Child: 1  Const 222 of type int [line: 36]
.   .   Sibling: 6  Call: fox of type void [line: 38]
.   .   .   Child: 0  Id: a of type int [mem: Global loc: 0 size: 1] [line: 38]
.   .   .   Sibling: 1  Id: aa of array of type int [mem: Global loc: -2 size: 12] [line: 38]
.   .   Sibling: 7  Call: fox of type void [line: 39]
.   .   .   Child: 0  Id: b of type int [mem: Local loc: -2 size: 1] [line: 39]
.   .   .   Sibling: 1  Id: bb of array of type int [mem: Local loc: -4 size: 12] [line: 39]
.   .   Sibling: 8  Compound [mem: None loc: 0 size: -28] [line: 41]
.   .   .   Child: 0  Var: c of type int [mem: Local loc: -15 size: 1] [line: 42]
.   .   .   Sibling: 1  Var: cc of array of type int [mem: Local loc: -17 size: 12] [line: 43]
.   .   .   Child: 1  Assign: <= of type int [line: 45]
.   .   .   .   Child: 0  Id: c of type int [mem: Local loc: -15 size: 1] [line: 45]
.   .   .   .   Child: 1  Const 333 of type int [line: 45]
.   .   .   Sibling: 1  Assign: <= of type int [line: 46]
.   .   .   .   Child: 0  Op: [ of type int [line: 46]
.   .   .   .   .   Child: 0  Id: cc of array of type int [mem: Local loc: -17 size: 12] [line: 46]
.   .   .   .   .   Child: 1  Const 0 of type int [line: 46]
.   .   .   .   Child: 1  Const 330 of type int [line: 46]
.   .   .   Sibling: 2  Assign: <= of type int [line: 47]
.   .   .   .   Child: 0  Op: [ of type int [line: 47]
.   .   .   .   .   Child: 0  Id: cc of array of type int [mem: Local loc: -17 size: 12] [line: 47]
.   .   .   .   .   Child: 1  Const 10 of type int [line: 47]
.   .   .   .   Child: 1  Const 334 of type int [line: 47]
.   .   .   Sibling: 3  Call: outnl of type void [line: 49]
.   .   .   Sibling: 4  Call: fox of type void [line: 50]
.   .   .   .   Child: 0  Id: a of type int [mem: Global loc: 0 size: 1] [line: 50]
.   .   .   .   Sibling: 1  Id: aa of array of type int [mem: Global loc: -2 size: 12] [line: 50]
.   .   .   Sibling: 5  Call: fox of type void [line: 51]
.   .   .   .   Child: 0  Id: b of type int [mem: Local loc: -2 size: 1] [line: 51]
.   .   .   .   Sibling: 1  Id: bb of array of type int [mem: Local loc: -4 size: 12] [line: 51]
.   .   .   Sibling: 6  Call: fox of type void [line: 52]
.   .   .   .   Child: 0  Id: c of type int [mem: Local loc: -15 size: 1] [line: 52]
.   .   .   .   Sibling: 1  Id: cc of array of type int [mem: Local loc: -17 size: 12] [line: 52]
.   .   Sibling: 9  Compound [mem: None loc: 0 size: -28] [line: 54]
.   .   .   Child: 0  Var: d of type int [mem: Local loc: -15 size: 1] [line: 55]
.   .   .   Sibling: 1  Var: dd of array of type int [mem: Local loc: -17 size: 12] [line: 56]
.   .   .   Child: 1  Assign: <= of type int [line: 58]
.   .   .   .   Child: 0  Id: d of type int [mem: Local loc: -15 size: 1] [line: 58]
.   .   .   .   Child: 1  Const 444 of type int [line: 58]
.   .   .   Sibling: 1  Assign: <= of type int [line: 59]
.   .   .   .   Child: 0  Op: [ of type int [line: 59]
.   .   .   .   .   Child: 0  Id: dd of array of type int [mem: Local loc: -17 size: 12] [line: 59]
.   .   .   .   .   Child: 1  Const 0 of type int [line: 59]
.   .   .   .   Child: 1  Const 440 of type int [line: 59]
.   .   .   Sibling: 2  Assign: <= of type int [line: 60]
.   .   .   .   Child: 0  Op: [ of type int [line: 60]
.   .   .   .   .   Child: 0  Id: dd of array of type int [mem: Local loc: -17 size: 12] [line: 60]
.   .   .   .   .   Child: 1  Const 10 of type int [line: 60]
.   .   .   .   Child: 1  Const 445 of type int [line: 60]
.   .   .   Sibling: 3  Call: outnl of type void [line: 62]
.   .   .   Sibling: 4  Call: fox of type void [line: 63]
.   .   .   .   Child: 0  Id: a of type int [mem: Global loc: 0 size: 1] [line: 63]
.   .   .   .   Sibling: 1  Id: aa of array of type int [mem: Global loc: -2 size: 12] [line: 63]
.   .   .   Sibling: 5  Call: fox of type void [line: 64]
.   .   .   .   Child: 0  Id: b of type int [mem: Local loc: -2 size: 1] [line: 64]
.   .   .   .   Sibling: 1  Id: bb of array of type int [mem: Local loc: -4 size: 12] [line: 64]
.   .   .   Sibling: 6  Call: fox of type void [line: 65]
.   .   .   .   Child: 0  Id: d of type int [mem: Local loc: -15 size: 1] [line: 65]
.   .   .   .   Sibling: 1  Id: dd of array of type int [mem: Local loc: -17 size: 12] [line: 65]
.   .   .   Sibling: 7  Call: outnl of type void [line: 67]
.   .   .   Sibling: 8  Call: bat of type void [line: 68]
.   .   .   .   Child: 0  Id: a of type int [mem: Global loc: 0 size: 1] [line: 68]
.   .   .   .   Sibling: 1  Id: aa of array of type int [mem: Global loc: -2 size: 12] [line: 68]
.   .   .   Sibling: 9  Call: bat of type void [line: 69]
.   .   .   .   Child: 0  Id: b of type int [mem: Local loc: -2 size: 1] [line: 69]
.   .   .   .   Sibling: 1  Id: bb of array of type int [mem: Local loc: -4 size: 12] [line: 69]
.   .   .   Sibling: 10  Call: bat of type void [line: 70]
.   .   .   .   Child: 0  Id: d of type int [mem: Local loc: -15 size: 1] [line: 70]
.   .   .   .   Sibling: 1  Id: dd of array of type int [mem: Local loc: -17 size: 12] [line: 70]
.   .   Sibling: 10  Compound [mem: None loc: 0 size: -15] [line: 72]
.   .   .   Child: 0  Var: e of static type int [mem: LocalStatic loc: -13 size: 1] [line: 73]
.   .   .   Sibling: 1  Var: ee of static array of type int [mem: LocalStatic loc: -15 size: 12] [line: 74]
.   .   .   Child: 1  Assign: <= of type int [line: 76]
.   .   .   .   Child: 0  Id: e of static type int [mem: LocalStatic loc: -13 size: 1] [line: 76]
.   .   .   .   Child: 1  Const 555 of type int [line: 76]
.   .   .   Sibling: 1  Assign: <= of type int [line: 77]
.   .   .   .   Child: 0  Op: [ of type int [line: 77]
.   .   .   .   .   Child: 0  Id: ee of static array of type int [mem: LocalStatic loc: -15 size: 12] [line: 77]
.   .   .   .   .   Child: 1  Const 0 of type int [line: 77]
.   .   .   .   Child: 1  Const 550 of type int [line: 77]
.   .   .   Sibling: 2  Assign: <= of type int [line: 78]
.   .   .   .   Child: 0  Op: [ of type int [line: 78]
.   .   .   .   .   Child: 0  Id: ee of static array of type int [mem: LocalStatic loc: -15 size: 12] [line: 78]
.   .   .   .   .   Child: 1  Const 10 of type int [line: 78]
.   .   .   .   Child: 1  Const 556 of type int [line: 78]
.   .   .   Sibling: 3  Call: outnl of type void [line: 80]
.   .   .   Sibling: 4  Call: fox of type void [line: 81]
.   .   .   .   Child: 0  Id: a of type int [mem: Global loc: 0 size: 1] [line: 81]
.   .   .   .   Sibling: 1  Id: aa of array of type int [mem: Global loc: -2 size: 12] [line: 81]
.   .   .   Sibling: 5  Call: fox of type void [line: 82]
.   .   .   .   Child: 0  Id: b of type int [mem: Local loc: -2 size: 1] [line: 82]
.   .   .   .   Sibling: 1  Id: bb of array of type int [mem: Local loc: -4 size: 12] [line: 82]
.   .   .   Sibling: 6  Call: fox of type void [line: 83]
.   .   .   .   Child: 0  Id: e of static type int [mem: LocalStatic loc: -13 size: 1] [line: 83]
.   .   .   .   Sibling: 1  Id: ee of static array of type int [mem: LocalStatic loc: -15 size: 12] [line: 83]
.   .   .   Sibling: 7  Call: outnl of type void [line: 85]
.   .   .   Sibling: 8  Call: bat of type void [line: 86]
.   .   .   .   Child: 0  Id: a of type int [mem: Global loc: 0 size: 1] [line: 86]
.   .   .   .   Sibling: 1  Id: aa of array of type int [mem: Global loc: -2 size: 12] [line: 86]
.   .   .   Sibling: 9  Call: bat of type void [line: 87]
.   .   .   .   Child: 0  Id: b of type int [mem: Local loc: -2 size: 1] [line: 87]
.   .   .   .   Sibling: 1  Id: bb of array of type int [mem: Local loc: -4 size: 12] [line: 87]
.   .   .   Sibling: 10  Call: bat of type void [line: 88]
.   .   .   .   Child: 0  Id: e of static type int [mem: LocalStatic loc: -13 size: 1] [line: 88]
.   .   .   .   Sibling: 1  Id: ee of static array of type int [mem: LocalStatic loc: -15 size: 12] [line: 88]
.   .   Sibling: 11  Call: outnl of type void [line: 91]
.   .   Sibling: 12  Call: output of type void [line: 92]
.   .   .   Child: 0  Call: th of type int [line: 92]
.   .   .   .   Child: 0  Id: a of type int [mem: Global loc: 0 size: 1] [line: 92]
.   .   Sibling: 13  Call: output of type void [line: 93]
.   .   .   Child: 0  Call: tha of type int [line: 93]
.   .   .   .   Child: 0  Id: aa of array of type int [mem: Global loc: -2 size: 12] [line: 93]
.   .   Sibling: 14  Call: outnl of type void [line: 94]
.   .   Sibling: 15  Call: bat of type void [line: 95]
.   .   .   Child: 0  Call: th of type int [line: 95]
.   .   .   .   Child: 0  Id: a of type int [mem: Global loc: 0 size: 1] [line: 95]
.   .   .   Sibling: 1  Id: aa of array of type int [mem: Global loc: -2 size: 12] [line: 95]
.   .   Sibling: 16  Call: outnl of type void [line: 96]
Offset for end of global space: -26
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M scope5.c-
WARNING(2): The variable 'x' seems not to be used.
Var: x of type int [mem: Global loc: 0 size: 1] [line: 2]
.   Child: 0  Const 111 of type int [line: 2]
Sibling: 1  Func: inc returns type int [mem: Global loc: 0 size: -2] [line: 4]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 5]
.   .   Child: 0  Var: x of static type int [mem: LocalStatic loc: -1 size: 1] [line: 6]
.   .   .   Child: 0  Const 222 of type int [line: 6]
.   .   Child: 1  Return [line: 7]
.   .   .   Child: 0  Assign: ++ of type int [line: 7]
.   .   .   .   Child: 0  Id: x of static type int [mem: LocalStatic loc: -1 size: 1] [line: 7]
Sibling: 2  Func: fred returns type int [mem: Global loc: 0 size: -2] [line: 10]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 11]
.   .   Child: 0  Var: x of static type int [mem: LocalStatic loc: -2 size: 1] [line: 12]
.   .   .   Child: 0  Const 333 of type int [line: 12]
.   .   Child: 1  Assign: ++ of type int [line: 14]
.   .   .   Child: 0  Id: x of static type int [mem: LocalStatic loc: -2 size: 1] [line: 14]
.   .   Sibling: 1  Call: output of type void [line: 15]
.   .   .   Child: 0  Id: x of static type int [mem: LocalStatic loc: -2 size: 1] [line: 15]
.   .   Sibling: 2  Compound [mem: None loc: 0 size: -2] [line: 16]
.   .   .   Child: 0  Var: x of static type int [mem: LocalStatic loc: -3 size: 1] [line: 17]
.   .   .   .   Child: 0  Const 444 of type int [line: 17]
.   .   .   Child: 1  Assign: ++ of type int [line: 19]
.   .   .   .   Child: 0  Id: x of static type int [mem: LocalStatic loc: -3 size: 1] [line: 19]
.   .   .   Sibling: 1  Call: output of type void [line: 20]
.   .   .   .   Child: 0  Id: x of static type int [mem: LocalStatic loc: -3 size: 1] [line: 20]
.   .   Sibling: 3  Call: output of type void [line: 22]
.   .   .   Child: 0  Id: x of static type int [mem: LocalStatic loc: -2 size: 1] [line: 22]
.   .   Sibling: 4  Call: outnl of type void [line: 23]
.   .   Sibling: 5  Return [line: 25]
.   .   .   Child: 0  Id: x of static type int [mem: LocalStatic loc: -2 size: 1] [line: 25]
Sibling: 3  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 28]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 29]
.   .   Child: 1  Call: output of type void [line: 30]
.   .   .   Child: 0  Call: fred of type int [line: 30]
.   .   Sibling: 1  Call: outnl of type void [line: 31]
.   .   Sibling: 2  Call: output of type void [line: 32]
.   .   .   Child: 0  Call: fred of type int [line: 32]
.   .   Sibling: 3  Call: outnl of type void [line: 33]
.   .   Sibling: 4  Call: output of type void [line: 35]
.   .   .   Child: 0  Call: inc of type int [line: 35]
.   .   Sibling: 5  Call: output of type void [line: 36]
.   .   .   Child: 0  Call: inc of type int [line: 36]
.   .   Sibling: 6  Call: output of type void [line: 37]
.   .   .   Child: 0  Call: inc of type int [line: 37]
.   .   Sibling: 7  Call: output of type void [line: 38]
.   .   .   Child: 0  Call: inc of type int [line: 38]
.   .   Sibling: 8  Call: outnl of type void [line: 39]
Offset for end of global space: -4
Number of warnings: 1
Number of errors: 0

==============
==============
./c- -M scope6.c-
Func: comp returns type int [mem: Global loc: 0 size: -4] [line: 2]
.   Child: 0  Parm: x of type int [mem: Parameter loc: -2 size: 1] [line: 2]
.   Sibling: 1  Parm: y of type int [mem: Parameter loc: -3 size: 1] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 2]
.   .   Child: 1  If [line: 2]
.   .   .   Child: 0  Op: > of type bool [line: 2]
.   .   .   .   Child: 0  Op: + of type int [line: 2]
.   .   .   .   .   Child: 0  Const 777 of type int [line: 2]
.   .   .   .   .   Child: 1  Op: * of type int [line: 2]
.   .   .   .   .   .   Child: 0  Id: x of type int [mem: Parameter loc: -2 size: 1] [line: 2]
.   .   .   .   .   .   Child: 1  Id: x of type int [mem: Parameter loc: -2 size: 1] [line: 2]
.   .   .   .   Child: 1  Op: + of type int [line: 2]
.   .   .   .   .   Child: 0  Const 666 of type int [line: 2]
.   .   .   .   .   Child: 1  Op: * of type int [line: 2]
.   .   .   .   .   .   Child: 0  Id: y of type int [mem: Parameter loc: -3 size: 1] [line: 2]
.   .   .   .   .   .   Child: 1  Id: y of type int [mem: Parameter loc: -3 size: 1] [line: 2]
.   .   .   Child: 1  Return [line: 2]
.   .   .   .   Child: 0  Id: x of type int [mem: Parameter loc: -2 size: 1] [line: 2]
.   .   .   Child: 2  Return [line: 2]
.   .   .   .   Child: 0  Id: y of type int [mem: Parameter loc: -3 size: 1] [line: 2]
Sibling: 1  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 4]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 5]
.   .   Child: 1  Call: output of type void [line: 6]
.   .   .   Child: 0  Call: comp of type int [line: 6]
.   .   .   .   Child: 0  Const 2 of type int [line: 6]
.   .   .   .   Sibling: 1  Const 2 of type int [line: 6]
.   .   Sibling: 1  Call: output of type void [line: 7]
.   .   .   Child: 0  Call: comp of type int [line: 7]
.   .   .   .   Child: 0  Const 2 of type int [line: 7]
.   .   .   .   Sibling: 1  Const 10 of type int [line: 7]
.   .   Sibling: 2  Call: output of type void [line: 8]
.   .   .   Child: 0  Call: comp of type int [line: 8]
.   .   .   .   Child: 0  Const 2 of type int [line: 8]
.   .   .   .   Sibling: 1  Const 20 of type int [line: 8]
.   .   Sibling: 3  Call: output of type void [line: 9]
.   .   .   Child: 0  Call: comp of type int [line: 9]
.   .   .   .   Child: 0  Const 10 of type int [line: 9]
.   .   .   .   Sibling: 1  Const 2 of type int [line: 9]
.   .   Sibling: 4  Call: output of type void [line: 10]
.   .   .   Child: 0  Call: comp of type int [line: 10]
.   .   .   .   Child: 0  Const 20 of type int [line: 10]
.   .   .   .   Sibling: 1  Const 2 of type int [line: 10]
.   .   Sibling: 5  Call: outnl of type void [line: 11]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M scope.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(3): Expecting to return type int but function 'ant' has no return statement.
ERROR(7): Symbol 'bat' is not declared.
ERROR(8): 'or' requires operands of type bool but lhs is of type int.
ERROR(8): 'or' requires operands of type bool but rhs is of type int.
WARNING(8): Variable 'a' may be uninitialized when used here.
ERROR(14): Symbol 'b' is not declared.
WARNING(15): Variable 'c' may be uninitialized when used here.
WARNING(19): The variable 'IWouldNotEatItWithAGoat' seems not to be used.
ERROR(25): Symbol 'b' is not declared.
ERROR(26): Symbol 'c' is not declared.
ERROR(30): Symbol 'b' is not declared.
ERROR(31): Symbol 'c' is not declared.
WARNING(37): Expecting to return type int but function 'bat' has no return statement.
WARNING(37): The function 'bat' seems not to be used.
WARNING(40): The variable 'bat' seems not to be used.
ERROR(41): Symbol 'x' is not declared.
WARNING(44): Variable 'z' may be uninitialized when used here.
ERROR(45): Symbol 'p' is not declared.
ERROR(46): Symbol 'q' is not declared.
ERROR(46): Symbol 'r' is not declared.
ERROR(47): Symbol 's' is not declared.
ERROR(47): Symbol 't' is not declared.
ERROR(47): Too many parameters passed for function 'ant' declared on line 3.
ERROR(48): Symbol 'cow' is not declared.
ERROR(48): Symbol 'u' is not declared.
ERROR(48): Symbol 'v' is not declared.
ERROR(49): Symbol 'abraxsis' is not declared.
ERROR(50): Symbol 'a' is not declared.
ERROR(55): Symbol 'g' is already declared at line 2.
ERROR(57): Symbol 'g' is already declared at line 2.
ERROR(59): Symbol 'x' is not declared.
ERROR(62): Symbol 'g' is already declared at line 2.
ERROR(63): Symbol 'ant' is already declared at line 3.
Number of warnings: 8
Number of errors: 26

==============
==============
./c- -M scopes.c-
WARNING(3): The variable 'a' seems not to be used.
WARNING(3): The variable 'b' seems not to be used.
WARNING(6): The variable 'c' seems not to be used.
WARNING(6): The variable 'd' seems not to be used.
WARNING(10): The variable 'e' seems not to be used.
WARNING(10): The variable 'f' seems not to be used.
Func: main returns type void [mem: Global loc: 0 size: -2] [line: 1]
.   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 2]
.   .   Child: 0  Var: a of type int [mem: Local loc: -2 size: 1] [line: 3]
.   .   Sibling: 1  Var: b of type int [mem: Local loc: -3 size: 1] [line: 3]
.   .   Child: 1  Compound [mem: None loc: 0 size: -6] [line: 5]
.   .   .   Child: 0  Var: c of type char [mem: Local loc: -4 size: 1] [line: 6]
.   .   .   Sibling: 1  Var: d of type char [mem: Local loc: -5 size: 1] [line: 6]
.   .   Sibling: 1  Compound [mem: None loc: 0 size: -6] [line: 9]
.   .   .   Child: 0  Var: e of type bool [mem: Local loc: -4 size: 1] [line: 10]
.   .   .   Sibling: 1  Var: f of type bool [mem: Local loc: -5 size: 1] [line: 10]
Offset for end of global space: 0
Number of warnings: 6
Number of errors: 0

==============
==============
./c- -M simple.c-
ERROR(3): Symbol 'x' is not declared.
ERROR(4): Symbol 'y' is not declared.
ERROR(5): Symbol 'z' is not declared.
Number of warnings: 0
Number of errors: 3

==============
==============
./c- -M simpleDefine.c-
ERROR(9): Symbol 'gx' is not declared.
ERROR(11): Symbol 'xx' is not declared.
ERROR(14): Symbol 'main' is already declared at line 4.
WARNING(16): The variable 'g' seems not to be used.
WARNING(17): The variable 'x' seems not to be used.
WARNING(19): The variable 'x' seems not to be used.
WARNING(20): The variable 'main' seems not to be used.
WARNING(21): The variable 'g' seems not to be used.
ERROR(25): Symbol 'dog' is not declared.
ERROR(25): Symbol 'x' is already declared at line 25.
WARNING(25): The function 'cat' seems not to be used.
WARNING(25): The parameter 'x' seems not to be used.
ERROR(27): Symbol 'g' is already declared at line 2.
Number of warnings: 7
Number of errors: 6

==============
==============
./c- -M small.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(3): The variable 'a' seems not to be used.
WARNING(10): The variable 'c' seems not to be used.
ERROR(21): Cannot index nonarray 'aardvark'.
ERROR(21): Symbol 'aardvark' is not declared.
WARNING(21): Variable 'in' may be uninitialized when used here.
ERROR(23): Cannot index nonarray 'in'.
WARNING(24): Variable 'zz' may be uninitialized when used here.
ERROR(28): Function 'max' at line 7 is expecting to return type int but return has no value.
Number of warnings: 4
Number of errors: 5

==============
==============
./c- -M static.c-
Func: main returns type void [mem: Global loc: 0 size: -2] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 3]
.   .   Child: 0  Var: x of static type int [mem: LocalStatic loc: 0 size: 1] [line: 4]
.   .   .   Child: 0  Const 111 of type int [line: 4]
.   .   Child: 1  Call: output of type void [line: 6]
.   .   .   Child: 0  Id: x of static type int [mem: LocalStatic loc: 0 size: 1] [line: 6]
.   .   Sibling: 1  Assign: <= of type int [line: 7]
.   .   .   Child: 0  Id: x of static type int [mem: LocalStatic loc: 0 size: 1] [line: 7]
.   .   .   Child: 1  Const 222 of type int [line: 7]
.   .   Sibling: 2  Call: output of type void [line: 8]
.   .   .   Child: 0  Id: x of static type int [mem: LocalStatic loc: 0 size: 1] [line: 8]
Offset for end of global space: -1
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M strange.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
ERROR(2): Symbol 'main' is already declared at line 1.
WARNING(2): Expecting to return type int but function 'main' has no return statement.
ERROR(3): Symbol 'main' is already declared at line 1.
ERROR(9): 'main' is a simple variable and cannot be called.
ERROR(18): 'main' is a simple variable and cannot be called.
ERROR(21): Expecting Boolean test condition in if statement but got type int.
ERROR(23): Expecting Boolean test condition in if statement but got type int.
Number of warnings: 1
Number of errors: 7

==============
==============
./c- -M stress.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(1): The function 'fred' seems not to be used.
WARNING(1): The parameter 'Archimedes' seems not to be used.
WARNING(5): Variable 'z' may be uninitialized when used here.
ERROR(8): Cannot index nonarray 'x'.
ERROR(8): Symbol 'x' is not declared.
WARNING(12): The variable 'z' seems not to be used.
ERROR(14): Symbol 'j' is already declared at line 14.
WARNING(14): The variable 'j' seems not to be used.
WARNING(17): The function 'LadyCampanula' seems not to be used.
Number of warnings: 6
Number of errors: 4

==============
==============
./c- -M string.c-
WARNING(1): The variable 'g' seems not to be used.
WARNING(3): The variable 's' seems not to be used.
Var: g of array of type char [mem: Global loc: -7 size: 9] [line: 1]
.   Child: 0  Const "corgi" of array of type char [mem: Global loc: -1 size: 6] [line: 1]
Sibling: 1  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -13] [line: 2]
.   .   Child: 0  Var: s of array of type char [mem: Local loc: -3 size: 11] [line: 3]
.   .   .   Child: 0  Const "beach day" of array of type char [mem: Global loc: -16 size: 10] [line: 3]
Offset for end of global space: -25
Number of warnings: 2
Number of errors: 0

==============
==============
./c- -M testExample.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(1): The variable 'zev' seems not to be used.
WARNING(2): The variable 'y' seems not to be used.
WARNING(4): The function 'ant' seems not to be used.
ERROR(17): Symbol 'fred' is not declared.
WARNING(30): The variable 'z' seems not to be used.
WARNING(36): The function 'max' seems not to be used.
Number of warnings: 5
Number of errors: 2

==============
==============
./c- -M tinybad.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(2): The variable 'bat' seems not to be used.
WARNING(4): The parameter 'corgi' seems not to be used.
ERROR(7): Symbol 'aspergillus' is not declared.
ERROR(7): Symbol 'tiger' is not declared.
ERROR(8): '<=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(9): Cannot use function 'dog' as a variable.
ERROR(10): Cannot use function 'dog' as a variable.
ERROR(11): Array 'ant' should be indexed by type int but got type char.
ERROR(11): Array 'ant' should be indexed by type int but got type char.
ERROR(12): Cannot use function 'dog' as a variable.
ERROR(12): Symbol 'cow' is not declared.
ERROR(14): Function 'dog' at line 4 is expecting to return type int but returns type char.
Number of warnings: 2
Number of errors: 11

==============
==============
./c- -M tiny.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(1): The variable 'gromit' seems not to be used.
WARNING(1): The variable 'walace' seems not to be used.
WARNING(2): The variable 'preston' seems not to be used.
WARNING(4): The parameter 'corgi' seems not to be used.
ERROR(7): Symbol 'aspergillus' is not declared.
ERROR(7): Symbol 'fungus' is not declared.
ERROR(8): '<=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(9): Cannot use function 'dog' as a variable.
ERROR(10): Cannot use function 'dog' as a variable.
ERROR(13): Function 'dog' at line 4 is expecting to return type int but returns type char.
Number of warnings: 4
Number of errors: 7

==============
==============
./c- -M tinygood.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(4): The function 'dog' seems not to be used.
WARNING(4): The parameter 'corgi' seems not to be used.
Number of warnings: 2
Number of errors: 1

==============
==============
./c- -M tinyMixed2.c-
WARNING(5): The variable 'x' seems not to be used.
WARNING(7): The function 'dogs' seems not to be used.
WARNING(10): The variable 'a' seems not to be used.
WARNING(11): The variable 'b' seems not to be used.
WARNING(12): The variable 'c' seems not to be used.
WARNING(13): The variable 'd' seems not to be used.
WARNING(13): The variable 'xx' seems not to be used.
WARNING(14): The variable 'e' seems not to be used.
WARNING(16): The variable 'h' seems not to be used.
Func: main returns type void [mem: Global loc: 0 size: -2] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 2]
Sibling: 1  Var: g of type int [mem: Global loc: 0 size: 1] [line: 4]
Sibling: 2  Var: x of array of type int [mem: Global loc: -2 size: 21] [line: 5]
Sibling: 3  Func: dogs returns type void [mem: Global loc: 0 size: -2] [line: 7]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 8]
.   .   Child: 1  If [line: 10]
.   .   .   Child: 0  Const true of type bool [line: 10]
.   .   .   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 10]
.   .   .   .   Child: 0  Var: a of type int [mem: Local loc: -2 size: 1] [line: 10]
.   .   .   Child: 2  Compound [mem: None loc: 0 size: -3] [line: 11]
.   .   .   .   Child: 0  Var: b of type int [mem: Local loc: -2 size: 1] [line: 11]
.   .   Sibling: 1  While [line: 12]
.   .   .   Child: 0  Const true of type bool [line: 12]
.   .   .   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 12]
.   .   .   .   Child: 0  Var: c of type int [mem: Local loc: -2 size: 1] [line: 12]
.   .   Sibling: 2  For [mem: None loc: 0 size: -3] [line: 13]
.   .   .   Child: 0  Var: xx of type int [mem: Local loc: -2 size: 1] [line: 13]
.   .   .   Child: 1  Range [line: 13]
.   .   .   .   Child: 0  Id: g of type int [mem: Global loc: 0 size: 1] [line: 13]
.   .   .   .   Child: 1  Const 10 of type int [line: 13]
.   .   .   Child: 2  Compound [mem: None loc: 0 size: -4] [line: 13]
.   .   .   .   Child: 0  Var: d of type int [mem: Local loc: -3 size: 1] [line: 13]
.   .   Sibling: 3  Compound [mem: None loc: 0 size: -3] [line: 14]
.   .   .   Child: 0  Var: e of type int [mem: Local loc: -2 size: 1] [line: 14]
Sibling: 4  Var: h of type int [mem: Global loc: -22 size: 1] [line: 16]
Offset for end of global space: -23
Number of warnings: 9
Number of errors: 0

==============
==============
./c- -M tinyMixed.c-
WARNING(4): The function 'dogs' seems not to be used.
WARNING(9): The variable 'x' seems not to be used.
Func: main returns type void [mem: Global loc: 0 size: -2] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 2]
Sibling: 1  Func: dogs returns type void [mem: Global loc: 0 size: -2] [line: 4]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 5]
.   .   Child: 1  If [line: 7]
.   .   .   Child: 0  Const true of type bool [line: 7]
.   .   Sibling: 1  While [line: 8]
.   .   .   Child: 0  Const true of type bool [line: 8]
.   .   Sibling: 2  For [mem: None loc: 0 size: -3] [line: 9]
.   .   .   Child: 0  Var: x of type int [mem: Local loc: -2 size: 1] [line: 9]
.   .   .   Child: 1  Range [line: 9]
.   .   .   .   Child: 0  Op: chsign of type int [line: 9]
.   .   .   .   .   Child: 0  Const 6 of type int [line: 9]
.   .   .   .   Child: 1  Op: chsign of type int [line: 9]
.   .   .   .   .   Child: 0  Const 7 of type int [line: 9]
.   .   .   .   Child: 2  Op: chsign of type int [line: 9]
.   .   .   .   .   Child: 0  Const 1 of type int [line: 9]
.   .   Sibling: 3  Compound [mem: None loc: 0 size: -2] [line: 10]
Offset for end of global space: 0
Number of warnings: 2
Number of errors: 0

==============
==============
./c- -M tinyMixedControl2.c-
Func: main returns type void [mem: Global loc: 0 size: -2] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 3]
.   .   Child: 1  If [line: 4]
.   .   .   Child: 0  Const true of type bool [line: 4]
.   .   .   Child: 1  While [line: 5]
.   .   .   .   Child: 0  Const true of type bool [line: 5]
.   .   .   .   Child: 1  If [line: 6]
.   .   .   .   .   Child: 0  Const true of type bool [line: 6]
.   .   .   .   .   Child: 1  While [line: 7]
.   .   .   .   .   .   Child: 0  Const true of type bool [line: 7]
.   .   .   .   .   .   Child: 1  Const 555 of type int [line: 7]
.   .   .   .   .   Child: 2  Const 666 of type int [line: 8]
.   .   .   Child: 2  Const 777 of type int [line: 9]
.   .   Sibling: 1  If [line: 11]
.   .   .   Child: 0  Const true of type bool [line: 11]
.   .   .   Child: 1  While [line: 12]
.   .   .   .   Child: 0  Const true of type bool [line: 12]
.   .   .   .   Child: 1  Const 333 of type int [line: 12]
.   .   .   Child: 2  While [line: 14]
.   .   .   .   Child: 0  Const true of type bool [line: 14]
.   .   .   .   Child: 1  Const 555 of type int [line: 14]
.   .   Sibling: 2  If [line: 16]
.   .   .   Child: 0  Const true of type bool [line: 16]
.   .   .   Child: 1  While [line: 17]
.   .   .   .   Child: 0  Const true of type bool [line: 17]
.   .   .   .   Child: 1  While [line: 18]
.   .   .   .   .   Child: 0  Const true of type bool [line: 18]
.   .   .   .   .   Child: 1  Const 555 of type int [line: 18]
.   .   .   Child: 2  Const 666 of type int [line: 19]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M tinyMixedControl3.c-
WARNING(4): The variable 'x' seems not to be used.
WARNING(7): The variable 'x' seems not to be used.
WARNING(9): The variable 'x' seems not to be used.
WARNING(14): The variable 'x' seems not to be used.
WARNING(16): The variable 'x' seems not to be used.
WARNING(19): The variable 'x' seems not to be used.
WARNING(20): The variable 'x' seems not to be used.
Func: main returns type void [mem: Global loc: 0 size: -2] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 3]
.   .   Child: 0  Var: x of type int [mem: Local loc: -2 size: 1] [line: 4]
.   .   Child: 1  If [line: 6]
.   .   .   Child: 0  Const true of type bool [line: 6]
.   .   .   Child: 1  For [mem: None loc: 0 size: -4] [line: 7]
.   .   .   .   Child: 0  Var: x of type int [mem: Local loc: -3 size: 1] [line: 7]
.   .   .   .   Child: 1  Range [line: 7]
.   .   .   .   .   Child: 0  Const 1 of type int [line: 7]
.   .   .   .   .   Child: 1  Const 30 of type int [line: 7]
.   .   .   .   Child: 2  If [line: 8]
.   .   .   .   .   Child: 0  Const false of type bool [line: 8]
.   .   .   .   .   Child: 1  For [mem: None loc: 0 size: -5] [line: 9]
.   .   .   .   .   .   Child: 0  Var: x of type int [mem: Local loc: -4 size: 1] [line: 9]
.   .   .   .   .   .   Child: 1  Range [line: 9]
.   .   .   .   .   .   .   Child: 0  Const 2 of type int [line: 9]
.   .   .   .   .   .   .   Child: 1  Const 40 of type int [line: 9]
.   .   .   .   .   .   .   Child: 2  Const 10 of type int [line: 9]
.   .   .   .   .   .   Child: 2  Const 555 of type int [line: 9]
.   .   .   .   .   Child: 2  Const 666 of type int [line: 10]
.   .   .   Child: 2  Const 777 of type int [line: 11]
.   .   Sibling: 1  If [line: 13]
.   .   .   Child: 0  Const false of type bool [line: 13]
.   .   .   Child: 1  For [mem: None loc: 0 size: -4] [line: 14]
.   .   .   .   Child: 0  Var: x of type int [mem: Local loc: -3 size: 1] [line: 14]
.   .   .   .   Child: 1  Range [line: 14]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 14]
.   .   .   .   .   Child: 1  Const 3 of type int [line: 14]
.   .   .   .   Child: 2  Const 333 of type int [line: 14]
.   .   .   Child: 2  For [mem: None loc: 0 size: -4] [line: 16]
.   .   .   .   Child: 0  Var: x of type int [mem: Local loc: -3 size: 1] [line: 16]
.   .   .   .   Child: 1  Range [line: 16]
.   .   .   .   .   Child: 0  Op: chsign of type int [line: 16]
.   .   .   .   .   .   Child: 0  Const 1 of type int [line: 16]
.   .   .   .   .   Child: 1  Const 20 of type int [line: 16]
.   .   .   .   Child: 2  Const 555 of type int [line: 16]
.   .   Sibling: 2  If [line: 18]
.   .   .   Child: 0  Const true of type bool [line: 18]
.   .   .   Child: 1  For [mem: None loc: 0 size: -4] [line: 19]
.   .   .   .   Child: 0  Var: x of type int [mem: Local loc: -3 size: 1] [line: 19]
.   .   .   .   Child: 1  Range [line: 19]
.   .   .   .   .   Child: 0  Const 20 of type int [line: 19]
.   .   .   .   .   Child: 1  Const 0 of type int [line: 19]
.   .   .   .   .   Child: 2  Op: chsign of type int [line: 19]
.   .   .   .   .   .   Child: 0  Const 1 of type int [line: 19]
.   .   .   .   Child: 2  For [mem: None loc: 0 size: -5] [line: 20]
.   .   .   .   .   Child: 0  Var: x of type int [mem: Local loc: -4 size: 1] [line: 20]
.   .   .   .   .   Child: 1  Range [line: 20]
.   .   .   .   .   .   Child: 0  Const 3 of type int [line: 20]
.   .   .   .   .   .   Child: 1  Const 7 of type int [line: 20]
.   .   .   .   .   .   Child: 2  Const 3 of type int [line: 20]
.   .   .   .   .   Child: 2  Const 555 of type int [line: 20]
.   .   .   Child: 2  Const 666 of type int [line: 21]
Offset for end of global space: 0
Number of warnings: 7
Number of errors: 0

==============
==============
./c- -M tinyMixedControl.c-
WARNING(6): Variable 'x' may be uninitialized when used here.
WARNING(8): Variable 'y' may be uninitialized when used here.
WARNING(11): Variable 'z' may be uninitialized when used here.
Func: main returns type void [mem: Global loc: 0 size: -2] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 3]
.   .   Child: 0  Var: x of type int [mem: Local loc: -2 size: 1] [line: 4]
.   .   Sibling: 1  Var: y of type int [mem: Local loc: -3 size: 1] [line: 4]
.   .   Sibling: 2  Var: z of type int [mem: Local loc: -4 size: 1] [line: 4]
.   .   Child: 1  If [line: 6]
.   .   .   Child: 0  Op: !< of type bool [line: 6]
.   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 6]
.   .   .   .   Child: 1  Const 0 of type int [line: 6]
.   .   .   Child: 1  While [line: 7]
.   .   .   .   Child: 0  Const true of type bool [line: 7]
.   .   .   .   Child: 1  Id: x of type int [mem: Local loc: -2 size: 1] [line: 7]
.   .   .   Child: 2  Id: y of type int [mem: Local loc: -3 size: 1] [line: 8]
.   .   Sibling: 1  Const 111 of type int [line: 9]
.   .   Sibling: 2  If [line: 10]
.   .   .   Child: 0  Op: !< of type bool [line: 10]
.   .   .   .   Child: 0  Id: y of type int [mem: Local loc: -3 size: 1] [line: 10]
.   .   .   .   Child: 1  Const 0 of type int [line: 10]
.   .   .   Child: 1  Id: y of type int [mem: Local loc: -3 size: 1] [line: 10]
.   .   .   Child: 2  While [line: 11]
.   .   .   .   Child: 0  Const true of type bool [line: 11]
.   .   .   .   Child: 1  Id: z of type int [mem: Local loc: -4 size: 1] [line: 11]
.   .   Sibling: 3  Const 222 of type int [line: 12]
.   .   Sibling: 4  If [line: 13]
.   .   .   Child: 0  Op: !< of type bool [line: 13]
.   .   .   .   Child: 0  Id: y of type int [mem: Local loc: -3 size: 1] [line: 13]
.   .   .   .   Child: 1  Const 0 of type int [line: 13]
.   .   .   Child: 1  Id: y of type int [mem: Local loc: -3 size: 1] [line: 13]
.   .   Sibling: 5  While [line: 14]
.   .   .   Child: 0  Const true of type bool [line: 14]
.   .   .   Child: 1  If [line: 15]
.   .   .   .   Child: 0  Const true of type bool [line: 15]
.   .   .   .   Child: 1  Id: z of type int [mem: Local loc: -4 size: 1] [line: 15]
.   .   .   .   Child: 2  Id: x of type int [mem: Local loc: -2 size: 1] [line: 16]
.   .   Sibling: 6  Const 333 of type int [line: 17]
.   .   Sibling: 7  If [line: 18]
.   .   .   Child: 0  Op: !< of type bool [line: 18]
.   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 18]
.   .   .   .   Child: 1  Const 0 of type int [line: 18]
.   .   .   Child: 1  While [line: 19]
.   .   .   .   Child: 0  Const true of type bool [line: 19]
.   .   .   .   Child: 1  If [line: 20]
.   .   .   .   .   Child: 0  Const true of type bool [line: 20]
.   .   .   .   .   Child: 1  Id: x of type int [mem: Local loc: -2 size: 1] [line: 20]
.   .   .   .   .   Child: 2  Id: y of type int [mem: Local loc: -3 size: 1] [line: 21]
.   .   .   Child: 2  Id: z of type int [mem: Local loc: -4 size: 1] [line: 22]
.   .   Sibling: 8  Const 444 of type int [line: 23]
.   .   Sibling: 9  If [line: 24]
.   .   .   Child: 0  Op: !< of type bool [line: 24]
.   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 24]
.   .   .   .   Child: 1  Const 0 of type int [line: 24]
.   .   .   Child: 1  Id: z of type int [mem: Local loc: -4 size: 1] [line: 24]
.   .   .   Child: 2  If [line: 26]
.   .   .   .   Child: 0  Const true of type bool [line: 26]
.   .   .   .   Child: 1  While [line: 27]
.   .   .   .   .   Child: 0  Const true of type bool [line: 27]
.   .   .   .   .   Child: 1  If [line: 28]
.   .   .   .   .   .   Child: 0  Const true of type bool [line: 28]
.   .   .   .   .   .   Child: 1  Id: x of type int [mem: Local loc: -2 size: 1] [line: 28]
.   .   .   .   .   .   Child: 2  Id: y of type int [mem: Local loc: -3 size: 1] [line: 29]
.   .   .   .   Child: 2  Id: z of type int [mem: Local loc: -4 size: 1] [line: 30]
Offset for end of global space: 0
Number of warnings: 3
Number of errors: 0

==============
==============
./c- -M tinyOverlap.c-
WARNING(2): The variable 'g' seems not to be used.
WARNING(4): The parameter 'p' seems not to be used.
WARNING(6): The variable 'a' seems not to be used.
WARNING(8): The variable 'b' seems not to be used.
WARNING(11): The variable 'c' seems not to be used.
WARNING(15): The variable 'b' seems not to be used.
WARNING(18): The variable 'c' seems not to be used.
WARNING(25): The variable 'i' seems not to be used.
Var: g of type int [mem: Global loc: 0 size: 1] [line: 2]
Sibling: 1  Func: ibex returns type void [mem: Global loc: 0 size: -3] [line: 4]
.   Child: 0  Parm: p of type int [mem: Parameter loc: -2 size: 1] [line: 4]
.   Child: 1  Compound [mem: None loc: 0 size: -4] [line: 5]
.   .   Child: 0  Var: a of type int [mem: Local loc: -3 size: 1] [line: 6]
.   .   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 7]
.   .   .   Child: 0  Var: b of type int [mem: Local loc: -4 size: 1] [line: 8]
.   .   Sibling: 1  Compound [mem: None loc: 0 size: -5] [line: 10]
.   .   .   Child: 0  Var: c of type int [mem: Local loc: -4 size: 1] [line: 11]
.   .   Sibling: 2  Compound [mem: None loc: 0 size: -4] [line: 13]
.   .   .   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 14]
.   .   .   .   Child: 0  Var: b of type int [mem: Local loc: -4 size: 1] [line: 15]
.   .   .   Sibling: 1  Compound [mem: None loc: 0 size: -5] [line: 17]
.   .   .   .   Child: 0  Var: c of type int [mem: Local loc: -4 size: 1] [line: 18]
Sibling: 2  Var: h of type int [mem: Global loc: -1 size: 1] [line: 23]
Sibling: 3  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 24]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 24]
.   .   Child: 1  Call: ibex of type void [line: 24]
.   .   .   Child: 0  Id: h of type int [mem: Global loc: -1 size: 1] [line: 24]
Sibling: 4  Var: i of type int [mem: Global loc: -2 size: 1] [line: 25]
Offset for end of global space: -3
Number of warnings: 8
Number of errors: 0

==============
==============
./c- -M tinyscope.c-
WARNING(3): The function 'dog' seems not to be used.
WARNING(7): Variable 'a' may be uninitialized when used here.
Var: a of type int [mem: Global loc: 0 size: 1] [line: 1]
Sibling: 1  Func: dog returns type void [mem: Global loc: 0 size: -3] [line: 3]
.   Child: 0  Parm: a of type char [mem: Parameter loc: -2 size: 1] [line: 3]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 3]
.   .   Child: 1  Id: a of type char [mem: Parameter loc: -2 size: 1] [line: 4]
.   .   Sibling: 1  Compound [mem: None loc: 0 size: -4] [line: 5]
.   .   .   Child: 0  Var: a of type int [mem: Local loc: -3 size: 1] [line: 6]
.   .   .   Child: 1  Id: a of type int [mem: Local loc: -3 size: 1] [line: 7]
.   .   Sibling: 2  Id: a of type char [mem: Parameter loc: -2 size: 1] [line: 9]
.   .   Sibling: 3  Compound [mem: None loc: 0 size: -3] [line: 10]
.   .   .   Child: 0  Var: a of static type char [mem: LocalStatic loc: -1 size: 1] [line: 11]
.   .   .   Child: 1  Id: a of static type char [mem: LocalStatic loc: -1 size: 1] [line: 12]
.   .   Sibling: 4  Id: a of type char [mem: Parameter loc: -2 size: 1] [line: 14]
Sibling: 2  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 17]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 17]
.   .   Child: 1  Id: a of type int [mem: Global loc: 0 size: 1] [line: 18]
Offset for end of global space: -2
Number of warnings: 2
Number of errors: 0

==============
==============
./c- -M types3.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(3): The variable 'lund' seems not to be used.
ERROR(5): Symbol 'lund' is already declared at line 3.
WARNING(5): The parameter 'a' seems not to be used.
ERROR(9): Symbol 'a' is already declared at line 9.
WARNING(9): Expecting to return type int but function 'fred' has no return statement.
ERROR(11): Symbol 'a' is already declared at line 9.
ERROR(12): 'a' is a simple variable and cannot be called.
ERROR(13): Cannot use function 'fred' as a variable.
ERROR(16): Symbol 'fred' is already declared at line 9.
WARNING(18): The function 'linda' seems not to be used.
WARNING(18): The parameter 'linda' seems not to be used.
ERROR(20): Symbol 'linda' is already declared at line 18.
WARNING(23): The variable 'galadriel' seems not to be used.
WARNING(24): The parameter 'eowyn' seems not to be used.
ERROR(26): Cannot use function 'arwen' as a variable.
Number of warnings: 7
Number of errors: 9

==============
==============
./c- -M types.c-
ERROR(8): Symbol 'c' is already declared at line 8.
WARNING(8): The variable 'c' seems not to be used.
ERROR(9): Symbol 'i' is already declared at line 4.
WARNING(10): The variable 'pumpkin' seems not to be used.
WARNING(12): Variable 'i' may be uninitialized when used here.
ERROR(13): '+' requires operands of type int but rhs is of type bool.
WARNING(13): Variable 'b' may be uninitialized when used here.
ERROR(14): '+' requires operands of type int but lhs is of type bool.
ERROR(15): '+' requires operands of type int but lhs is of type bool.
ERROR(15): '+' requires operands of type int but rhs is of type bool.
ERROR(17): 'and' requires operands of type bool but lhs is of type int.
ERROR(17): 'and' requires operands of type bool but rhs is of type int.
ERROR(18): 'and' requires operands of type bool but lhs is of type int.
ERROR(19): 'and' requires operands of type bool but rhs is of type int.
ERROR(23): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(24): '<=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(28): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(29): '=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(33): '!=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(34): '!=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(37): The operation '+' does not work with arrays.
WARNING(37): Variable 'ia' may be uninitialized when used here.
ERROR(38): '+' requires operands of type int but rhs is of type bool.
ERROR(38): The operation '+' does not work with arrays.
WARNING(38): Variable 'ba' may be uninitialized when used here.
ERROR(39): '+' requires operands of type int but lhs is of type bool.
ERROR(39): The operation '+' does not work with arrays.
ERROR(40): '+' requires operands of type int but lhs is of type bool.
ERROR(40): '+' requires operands of type int but rhs is of type bool.
ERROR(40): The operation '+' does not work with arrays.
ERROR(42): 'and' requires operands of type bool but lhs is of type int.
ERROR(42): 'and' requires operands of type bool but rhs is of type int.
ERROR(42): The operation 'and' does not work with arrays.
ERROR(43): 'and' requires operands of type bool but lhs is of type int.
ERROR(43): The operation 'and' does not work with arrays.
ERROR(44): 'and' requires operands of type bool but rhs is of type int.
ERROR(44): The operation 'and' does not work with arrays.
ERROR(45): The operation 'and' does not work with arrays.
ERROR(48): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(49): '<=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(53): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(54): '=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(57): '+' requires operands of type int but lhs is of type bool.
ERROR(58): '+' requires operands of type int but rhs is of type bool.
ERROR(59): '+' requires operands of type int but rhs is of type bool.
ERROR(61): 'or' requires operands of type bool but lhs is of type int.
ERROR(62): 'or' requires operands of type bool but rhs is of type int.
ERROR(63): 'or' requires operands of type bool but rhs is of type int.
ERROR(66): Unary 'not' requires an operand of type bool but was given type int.
ERROR(67): The operation 'not' does not work with arrays.
ERROR(68): The operation 'not' does not work with arrays.
ERROR(68): Unary 'not' requires an operand of type bool but was given type int.
ERROR(70): Unary 'chsign' requires an operand of type int but was given type bool.
ERROR(72): The operation 'chsign' does not work with arrays.
ERROR(72): Unary 'chsign' requires an operand of type int but was given type bool.
ERROR(73): The operation 'chsign' does not work with arrays.
ERROR(76): '>' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(77): '>' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(78): '>' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(79): '>' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(79): '>' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(82): Expecting Boolean test condition in if statement but got type int.
ERROR(85): Cannot use array as test condition in if statement.
ERROR(88): Cannot use array as test condition in if statement.
ERROR(88): Expecting Boolean test condition in if statement but got type int.
ERROR(94): Expecting Boolean test condition in if statement but got type int.
ERROR(97): Expecting Boolean test condition in while statement but got type int.
ERROR(98): Cannot use array as test condition in while statement.
ERROR(99): Cannot use array as test condition in while statement.
ERROR(99): Expecting Boolean test condition in while statement but got type int.
ERROR(101): Expecting Boolean test condition in while statement but got type int.
ERROR(103): 'b' is a simple variable and cannot be called.
ERROR(104): Cannot index nonarray 'b'.
ERROR(105): Cannot index nonarray 'x'.
ERROR(105): Symbol 'x' is not declared.
ERROR(106): Cannot index nonarray 'main'.
ERROR(106): Cannot use function 'main' as a variable.
ERROR(107): Cannot index nonarray 'main'.
ERROR(107): Cannot use function 'main' as a variable.
ERROR(108): Array 'ba' should be indexed by type int but got type bool.
ERROR(108): Array index is the unindexed array 'ba'.
ERROR(109): Array 'ba' should be indexed by type int but got type char.
ERROR(110): Cannot use function 'main' as a variable.
ERROR(111): The operation '+' does not work with arrays.
ERROR(112): Symbol 'a' is not declared.
ERROR(113): The operation 'sizeof' only works with arrays.
ERROR(114): Unary 'chsign' requires an operand of type int but was given type bool.
ERROR(116): Cannot return an array.
ERROR(116): Function 'main' at line 2 is expecting to return type int but returns type bool.
Number of warnings: 6
Number of errors: 83

==============
==============
./c- -M unary.c-
WARNING(37): Variable 'a' may be uninitialized when used here.
WARNING(38): Variable 'b' may be uninitialized when used here.
Func: main returns type void [mem: Global loc: 0 size: -2] [line: 6]
.   Child: 1  Compound [mem: None loc: 0 size: -18] [line: 7]
.   .   Child: 0  Var: x of type int [mem: Local loc: -2 size: 1] [line: 8]
.   .   Sibling: 1  Var: y of type int [mem: Local loc: -3 size: 1] [line: 9]
.   .   Sibling: 2  Var: a of array of type bool [mem: Local loc: -5 size: 8] [line: 10]
.   .   Sibling: 3  Var: b of array of type bool [mem: Local loc: -13 size: 6] [line: 10]
.   .   Child: 1  Assign: <= of type int [line: 12]
.   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 12]
.   .   .   Child: 1  Const 88 of type int [line: 12]
.   .   Sibling: 1  Assign: <= of type int [line: 13]
.   .   .   Child: 0  Id: y of type int [mem: Local loc: -3 size: 1] [line: 13]
.   .   .   Child: 1  Op: - of type int [line: 13]
.   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 13]
.   .   .   .   Child: 1  Const 9 of type int [line: 13]
.   .   Sibling: 2  Assign: <= of type int [line: 14]
.   .   .   Child: 0  Id: y of type int [mem: Local loc: -3 size: 1] [line: 14]
.   .   .   Child: 1  Op: chsign of type int [line: 14]
.   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 14]
.   .   Sibling: 3  Call: output of type void [line: 15]
.   .   .   Child: 0  Op: chsign of type int [line: 15]
.   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 15]
.   .   Sibling: 4  Call: output of type void [line: 16]
.   .   .   Child: 0  Id: y of type int [mem: Local loc: -3 size: 1] [line: 16]
.   .   Sibling: 5  Call: outnl of type void [line: 17]
.   .   Sibling: 6  Call: output of type void [line: 19]
.   .   .   Child: 0  Op: * of type int [line: 19]
.   .   .   .   Child: 0  Op: chsign of type int [line: 19]
.   .   .   .   .   Child: 0  Op: chsign of type int [line: 19]
.   .   .   .   .   .   Child: 0  Const 3 of type int [line: 19]
.   .   .   .   Child: 1  Op: chsign of type int [line: 19]
.   .   .   .   .   Child: 0  Const 5 of type int [line: 19]
.   .   Sibling: 7  Call: output of type void [line: 20]
.   .   .   Child: 0  Op: chsign of type int [line: 20]
.   .   .   .   Child: 0  Op: chsign of type int [line: 20]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 20]
.   .   Sibling: 8  Call: outnl of type void [line: 21]
.   .   Sibling: 9  Compound [mem: None loc: 0 size: -20] [line: 23]
.   .   .   Child: 0  Var: x of type bool [mem: Local loc: -18 size: 1] [line: 23]
.   .   .   Sibling: 1  Var: y of type bool [mem: Local loc: -19 size: 1] [line: 24]
.   .   .   Child: 1  Assign: <= of type bool [line: 26]
.   .   .   .   Child: 0  Id: x of type bool [mem: Local loc: -18 size: 1] [line: 26]
.   .   .   .   Child: 1  Const true of type bool [line: 26]
.   .   .   Sibling: 1  Assign: <= of type bool [line: 27]
.   .   .   .   Child: 0  Id: y of type bool [mem: Local loc: -19 size: 1] [line: 27]
.   .   .   .   Child: 1  Op: not of type bool [line: 27]
.   .   .   .   .   Child: 0  Id: x of type bool [mem: Local loc: -18 size: 1] [line: 27]
.   .   .   Sibling: 2  Call: outputb of type void [line: 28]
.   .   .   .   Child: 0  Op: not of type bool [line: 28]
.   .   .   .   .   Child: 0  Id: x of type bool [mem: Local loc: -18 size: 1] [line: 28]
.   .   .   Sibling: 3  Call: outputb of type void [line: 29]
.   .   .   .   Child: 0  Id: y of type bool [mem: Local loc: -19 size: 1] [line: 29]
.   .   .   Sibling: 4  Call: outputb of type void [line: 30]
.   .   .   .   Child: 0  Op: and of type bool [line: 30]
.   .   .   .   .   Child: 0  Op: not of type bool [line: 30]
.   .   .   .   .   .   Child: 0  Op: not of type bool [line: 30]
.   .   .   .   .   .   .   Child: 0  Id: x of type bool [mem: Local loc: -18 size: 1] [line: 30]
.   .   .   .   .   Child: 1  Op: not of type bool [line: 30]
.   .   .   .   .   .   Child: 0  Id: y of type bool [mem: Local loc: -19 size: 1] [line: 30]
.   .   .   Sibling: 5  Call: outputb of type void [line: 31]
.   .   .   .   Child: 0  Op: or of type bool [line: 31]
.   .   .   .   .   Child: 0  Op: not of type bool [line: 31]
.   .   .   .   .   .   Child: 0  Op: not of type bool [line: 31]
.   .   .   .   .   .   .   Child: 0  Id: x of type bool [mem: Local loc: -18 size: 1] [line: 31]
.   .   .   .   .   Child: 1  Op: not of type bool [line: 31]
.   .   .   .   .   .   Child: 0  Id: y of type bool [mem: Local loc: -19 size: 1] [line: 31]
.   .   .   Sibling: 6  Call: outputb of type void [line: 32]
.   .   .   .   Child: 0  Op: or of type bool [line: 32]
.   .   .   .   .   Child: 0  Op: not of type bool [line: 32]
.   .   .   .   .   .   Child: 0  Op: not of type bool [line: 32]
.   .   .   .   .   .   .   Child: 0  Id: y of type bool [mem: Local loc: -19 size: 1] [line: 32]
.   .   .   .   .   Child: 1  Op: not of type bool [line: 32]
.   .   .   .   .   .   Child: 0  Id: x of type bool [mem: Local loc: -18 size: 1] [line: 32]
.   .   .   Sibling: 7  Call: outputb of type void [line: 33]
.   .   .   .   Child: 0  Op: not of type bool [line: 33]
.   .   .   .   .   Child: 0  Op: not of type bool [line: 33]
.   .   .   .   .   .   Child: 0  Id: x of type bool [mem: Local loc: -18 size: 1] [line: 33]
.   .   .   Sibling: 8  Call: outnl of type void [line: 34]
.   .   Sibling: 10  Call: output of type void [line: 37]
.   .   .   Child: 0  Op: sizeof of type int [line: 37]
.   .   .   .   Child: 0  Id: a of array of type bool [mem: Local loc: -5 size: 8] [line: 37]
.   .   Sibling: 11  Call: output of type void [line: 38]
.   .   .   Child: 0  Op: sizeof of type int [line: 38]
.   .   .   .   Child: 0  Id: b of array of type bool [mem: Local loc: -13 size: 6] [line: 38]
Offset for end of global space: 0
Number of warnings: 2
Number of errors: 0

==============
==============
./c- -M unarystar.c-
WARNING(8): The variable 'k' seems not to be used.
WARNING(9): The variable 'b' seems not to be used.
WARNING(11): Variable 'n' may be uninitialized when used here.
WARNING(12): Variable 'a' may be uninitialized when used here.
Func: main returns type int [mem: Global loc: 0 size: -2] [line: 6]
.   Child: 1  Compound [mem: None loc: 0 size: -47] [line: 7]
.   .   Child: 0  Var: k of type int [mem: Local loc: -2 size: 1] [line: 8]
.   .   Sibling: 1  Var: n of array of type int [mem: Local loc: -4 size: 8] [line: 8]
.   .   Sibling: 2  Var: b of type bool [mem: Local loc: -11 size: 1] [line: 9]
.   .   Sibling: 3  Var: a of array of type bool [mem: Local loc: -13 size: 35] [line: 9]
.   .   Child: 1  Call: output of type void [line: 11]
.   .   .   Child: 0  Op: sizeof of type int [line: 11]
.   .   .   .   Child: 0  Id: n of array of type int [mem: Local loc: -4 size: 8] [line: 11]
.   .   Sibling: 1  Call: output of type void [line: 12]
.   .   .   Child: 0  Op: sizeof of type int [line: 12]
.   .   .   .   Child: 0  Id: a of array of type bool [mem: Local loc: -13 size: 35] [line: 12]
.   .   Sibling: 2  Call: outnl of type void [line: 13]
.   .   Sibling: 3  Call: output of type void [line: 15]
.   .   .   Child: 0  Op: + of type int [line: 15]
.   .   .   .   Child: 0  Op: sizeof of type int [line: 15]
.   .   .   .   .   Child: 0  Id: n of array of type int [mem: Local loc: -4 size: 8] [line: 15]
.   .   .   .   Child: 1  Const 10 of type int [line: 15]
.   .   Sibling: 4  Call: output of type void [line: 16]
.   .   .   Child: 0  Op: + of type int [line: 16]
.   .   .   .   Child: 0  Op: sizeof of type int [line: 16]
.   .   .   .   .   Child: 0  Id: a of array of type bool [mem: Local loc: -13 size: 35] [line: 16]
.   .   .   .   Child: 1  Const 10 of type int [line: 16]
.   .   Sibling: 5  Call: outnl of type void [line: 17]
.   .   Sibling: 6  Call: output of type void [line: 19]
.   .   .   Child: 0  Op: [ of type int [line: 19]
.   .   .   .   Child: 0  Id: n of array of type int [mem: Local loc: -4 size: 8] [line: 19]
.   .   .   .   Child: 1  Op: sizeof of type int [line: 19]
.   .   .   .   .   Child: 0  Id: n of array of type int [mem: Local loc: -4 size: 8] [line: 19]
.   .   Sibling: 7  Call: output of type void [line: 20]
.   .   .   Child: 0  Op: [ of type int [line: 20]
.   .   .   .   Child: 0  Id: n of array of type int [mem: Local loc: -4 size: 8] [line: 20]
.   .   .   .   Child: 1  Const 1984 of type int [line: 20]
.   .   Sibling: 8  Call: output of type void [line: 21]
.   .   .   Child: 0  Op: * of type int [line: 21]
.   .   .   .   Child: 0  Op: sizeof of type int [line: 21]
.   .   .   .   .   Child: 0  Id: a of array of type bool [mem: Local loc: -13 size: 35] [line: 21]
.   .   .   .   Child: 1  Op: sizeof of type int [line: 21]
.   .   .   .   .   Child: 0  Id: n of array of type int [mem: Local loc: -4 size: 8] [line: 21]
.   .   Sibling: 9  Call: outnl of type void [line: 22]
.   .   Sibling: 10  Return [line: 24]
.   .   .   Child: 0  Op: sizeof of type int [line: 24]
.   .   .   .   Child: 0  Id: n of array of type int [mem: Local loc: -4 size: 8] [line: 24]
Offset for end of global space: 0
Number of warnings: 4
Number of errors: 0

==============
==============
./c- -M undeclared.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(1): The parameter 'x' seems not to be used.
ERROR(3): Symbol 'i' is not declared.
ERROR(3): Symbol 'z' is not declared.
ERROR(4): Symbol 'i' is not declared.
ERROR(4): Symbol 'z' is not declared.
ERROR(5): Symbol 'i' is not declared.
ERROR(5): Symbol 'i' is not declared.
ERROR(6): Symbol 'j' is not declared.
ERROR(7): Symbol 'l' is not declared.
ERROR(8): Symbol 'm' is not declared.
ERROR(9): Symbol 'k' is not declared.
Number of warnings: 1
Number of errors: 11

==============
==============
./c- -M undefined.c-
ERROR(4): Symbol 'y' is not declared.
ERROR(5): Symbol 'x' is not declared.
ERROR(6): Symbol 'x' is not declared.
ERROR(6): Symbol 'y' is not declared.
ERROR(7): Symbol 'x' is not declared.
ERROR(7): Symbol 'y' is not declared.
ERROR(8): Symbol 'x' is not declared.
ERROR(8): Symbol 'y' is not declared.
ERROR(9): Symbol 'array' is not declared.
ERROR(9): Symbol 'x' is not declared.
WARNING(12): The function 'cat' seems not to be used.
ERROR(14): Symbol 'dog' is not declared.
ERROR(15): Symbol 'dog' is not declared.
ERROR(16): Symbol 'dog' is not declared.
ERROR(16): Symbol 'dog' is not declared.
ERROR(16): Symbol 'dog' is not declared.
ERROR(18): Symbol 'mouse' is not declared.
ERROR(25): Symbol 'mouse' is not declared.
ERROR(27): Symbol 'mouse' is not declared.
ERROR(29): Symbol 'mouse' is not declared.
ERROR(31): Symbol 'mouse' is not declared.
WARNING(34): Expecting to return type int but function 'dog' has no return statement.
WARNING(34): The function 'dog' seems not to be used.
ERROR(36): Symbol 'mouse' is not declared.
ERROR(36): Symbol 'mouse' is not declared.
ERROR(37): Symbol 'mouse' is not declared.
ERROR(37): Symbol 'mouse' is not declared.
ERROR(38): Symbol 'mouse' is not declared.
ERROR(38): Symbol 'mouse' is not declared.
ERROR(39): Symbol 'mouse' is not declared.
ERROR(39): Symbol 'mouse' is not declared.
ERROR(41): Symbol 'mouse' is not declared.
ERROR(42): Symbol 'mouse' is not declared.
Number of warnings: 3
Number of errors: 30

==============
==============
./c- -M uninit2.c-
WARNING(6): Variable 'b' may be uninitialized when used here.
WARNING(8): Variable 'aa' may be uninitialized when used here.
WARNING(9): Variable 'bb' may be uninitialized when used here.
WARNING(9): Variable 'cc' may be uninitialized when used here.
WARNING(12): Variable 'dd' may be uninitialized when used here.
Func: main returns type void [mem: Global loc: 0 size: -2] [line: 1]
.   Child: 1  Compound [mem: None loc: 0 size: -39] [line: 2]
.   .   Child: 0  Var: a of type int [mem: Local loc: -2 size: 1] [line: 3]
.   .   Sibling: 1  Var: b of type int [mem: Local loc: -3 size: 1] [line: 3]
.   .   Sibling: 2  Var: c of type int [mem: Local loc: -4 size: 1] [line: 3]
.   .   Sibling: 3  Var: d of type int [mem: Local loc: -5 size: 1] [line: 3]
.   .   Sibling: 4  Var: aa of array of type int [mem: Local loc: -7 size: 3] [line: 4]
.   .   Sibling: 5  Var: bb of array of type int [mem: Local loc: -10 size: 4] [line: 4]
.   .   Sibling: 6  Var: cc of array of type int [mem: Local loc: -14 size: 6] [line: 4]
.   .   Sibling: 7  Var: dd of array of type int [mem: Local loc: -20 size: 8] [line: 4]
.   .   Sibling: 8  Var: ee of array of type int [mem: Local loc: -28 size: 12] [line: 4]
.   .   Child: 1  Assign: <= of type int [line: 6]
.   .   .   Child: 0  Id: a of type int [mem: Local loc: -2 size: 1] [line: 6]
.   .   .   Child: 1  Id: b of type int [mem: Local loc: -3 size: 1] [line: 6]
.   .   Sibling: 1  Assign: <= of type int [line: 7]
.   .   .   Child: 0  Id: a of type int [mem: Local loc: -2 size: 1] [line: 7]
.   .   .   Child: 1  Id: b of type int [mem: Local loc: -3 size: 1] [line: 7]
.   .   Sibling: 2  Assign: <= of type int [line: 8]
.   .   .   Child: 0  Id: a of type int [mem: Local loc: -2 size: 1] [line: 8]
.   .   .   Child: 1  Op: [ of type int [line: 8]
.   .   .   .   Child: 0  Id: aa of array of type int [mem: Local loc: -7 size: 3] [line: 8]
.   .   .   .   Child: 1  Const 3 of type int [line: 8]
.   .   Sibling: 3  Assign: <= of type int [line: 9]
.   .   .   Child: 0  Id: a of type int [mem: Local loc: -2 size: 1] [line: 9]
.   .   .   Child: 1  Op: [ of type int [line: 9]
.   .   .   .   Child: 0  Id: bb of array of type int [mem: Local loc: -10 size: 4] [line: 9]
.   .   .   .   Child: 1  Op: [ of type int [line: 9]
.   .   .   .   .   Child: 0  Id: cc of array of type int [mem: Local loc: -14 size: 6] [line: 9]
.   .   .   .   .   Child: 1  Const 3 of type int [line: 9]
.   .   Sibling: 4  Assign: <= of type int [line: 10]
.   .   .   Child: 0  Op: [ of type int [line: 10]
.   .   .   .   Child: 0  Id: cc of array of type int [mem: Local loc: -14 size: 6] [line: 10]
.   .   .   .   Child: 1  Id: c of type int [mem: Local loc: -4 size: 1] [line: 10]
.   .   .   Child: 1  Id: a of type int [mem: Local loc: -2 size: 1] [line: 10]
.   .   Sibling: 5  Assign: <= of type int [line: 11]
.   .   .   Child: 0  Op: [ of type int [line: 11]
.   .   .   .   Child: 0  Id: cc of array of type int [mem: Local loc: -14 size: 6] [line: 11]
.   .   .   .   Child: 1  Op: + of type int [line: 11]
.   .   .   .   .   Child: 0  Id: c of type int [mem: Local loc: -4 size: 1] [line: 11]
.   .   .   .   .   Child: 1  Id: d of type int [mem: Local loc: -5 size: 1] [line: 11]
.   .   .   Child: 1  Id: a of type int [mem: Local loc: -2 size: 1] [line: 11]
.   .   Sibling: 6  Op: [ of type int [line: 12]
.   .   .   Child: 0  Id: cc of array of type int [mem: Local loc: -14 size: 6] [line: 12]
.   .   .   Child: 1  Op: [ of type int [line: 12]
.   .   .   .   Child: 0  Id: dd of array of type int [mem: Local loc: -20 size: 8] [line: 12]
.   .   .   .   Child: 1  Const 3 of type int [line: 12]
.   .   Sibling: 7  Assign: <= of type int [line: 13]
.   .   .   Child: 0  Op: [ of type int [line: 13]
.   .   .   .   Child: 0  Id: cc of array of type int [mem: Local loc: -14 size: 6] [line: 13]
.   .   .   .   Child: 1  Op: [ of type int [line: 13]
.   .   .   .   .   Child: 0  Id: ee of array of type int [mem: Local loc: -28 size: 12] [line: 13]
.   .   .   .   .   Child: 1  Const 3 of type int [line: 13]
.   .   .   Child: 1  Const 284 of type int [line: 13]
Offset for end of global space: 0
Number of warnings: 5
Number of errors: 0

==============
==============
./c- -M uninit.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(1): The parameter 'x' seems not to be used.
ERROR(3): Symbol 'z' is already declared at line 3.
ERROR(3): Symbol 'z' is already declared at line 3.
WARNING(5): Variable 'i' may be uninitialized when used here.
WARNING(7): Variable 'g' may be uninitialized when used here.
WARNING(8): Variable 'h' may be uninitialized when used here.
WARNING(9): Variable 'j' may be uninitialized when used here.
WARNING(10): Variable 'k' may be uninitialized when used here.
WARNING(11): Variable 'l' may be uninitialized when used here.
WARNING(12): Variable 'm' may be uninitialized when used here.
ERROR(13): Symbol 'dog' is not declared.
ERROR(14): Cannot use function 'main' as a variable.
Number of warnings: 8
Number of errors: 5

==============
==============
./c- -M uninitialized.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(3): Expecting to return type int but function 'main' has no return statement.
WARNING(5): The variable 'x' seems not to be used.
WARNING(11): Variable 'y' may be uninitialized when used here.
WARNING(13): Variable 'a' may be uninitialized when used here.
WARNING(13): Variable 'v' may be uninitialized when used here.
WARNING(16): Variable 'r' may be uninitialized when used here.
Number of warnings: 6
Number of errors: 1

==============
==============
./c- -M unused.c-
WARNING(1): The variable 'g' seems not to be used.
WARNING(2): The function 'dog' seems not to be used.
WARNING(2): The parameter 'x' seems not to be used.
Var: g of type int [mem: Global loc: 0 size: 1] [line: 1]
Sibling: 1  Var: ug of type int [mem: Global loc: -1 size: 1] [line: 1]
Sibling: 2  Func: dog returns type void [mem: Global loc: 0 size: -3] [line: 2]
.   Child: 0  Parm: x of type int [mem: Parameter loc: -2 size: 1] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 2]
Sibling: 3  Func: udog returns type void [mem: Global loc: 0 size: -2] [line: 3]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 3]
Sibling: 4  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 5]
.   Child: 1  Compound [mem: None loc: 0 size: -2] [line: 5]
.   .   Child: 1  Assign: <= of type int [line: 6]
.   .   .   Child: 0  Id: ug of type int [mem: Global loc: -1 size: 1] [line: 6]
.   .   .   Child: 1  Const 3 of type int [line: 6]
.   .   Sibling: 1  Call: udog of type void [line: 7]
Offset for end of global space: -2
Number of warnings: 3
Number of errors: 0

==============
==============
./c- -M varAssign.c-
Var: gx of type int [mem: Global loc: 0 size: 1] [line: 2]
Sibling: 1  Var: gy of array of type int [mem: Global loc: -2 size: 11] [line: 2]
Sibling: 2  Func: esperanza returns type void [mem: Global loc: 0 size: -4] [line: 3]
.   Child: 0  Parm: px of type int [mem: Parameter loc: -2 size: 1] [line: 3]
.   Sibling: 1  Parm: py of array of type int [mem: Parameter loc: -3 size: 1] [line: 3]
.   Child: 1  Compound [mem: None loc: 0 size: -16] [line: 4]
.   .   Child: 0  Var: x of type int [mem: Local loc: -4 size: 1] [line: 5]
.   .   Sibling: 1  Var: y of array of type int [mem: Local loc: -6 size: 11] [line: 5]
.   .   Sibling: 2  Var: sx of static type int [mem: LocalStatic loc: -12 size: 1] [line: 6]
.   .   Sibling: 3  Var: sy of static array of type int [mem: LocalStatic loc: -14 size: 11] [line: 6]
.   .   Child: 1  Assign: <= of type int [line: 7]
.   .   .   Child: 0  Id: gx of type int [mem: Global loc: 0 size: 1] [line: 7]
.   .   .   Child: 1  Const 444 of type int [line: 7]
.   .   Sibling: 1  Assign: <= of type int [line: 8]
.   .   .   Child: 0  Id: x of type int [mem: Local loc: -4 size: 1] [line: 8]
.   .   .   Child: 1  Const 555 of type int [line: 8]
.   .   Sibling: 2  Assign: <= of type int [line: 9]
.   .   .   Child: 0  Id: sx of static type int [mem: LocalStatic loc: -12 size: 1] [line: 9]
.   .   .   Child: 1  Const 666 of type int [line: 9]
.   .   Sibling: 3  Assign: <= of type int [line: 12]
.   .   .   Child: 0  Op: [ of type int [line: 12]
.   .   .   .   Child: 0  Id: gy of array of type int [mem: Global loc: -2 size: 11] [line: 12]
.   .   .   .   Child: 1  Const 9 of type int [line: 12]
.   .   .   Child: 1  Const 222 of type int [line: 12]
.   .   Sibling: 4  Call: output of type void [line: 13]
.   .   .   Child: 0  Op: [ of type int [line: 13]
.   .   .   .   Child: 0  Id: gy of array of type int [mem: Global loc: -2 size: 11] [line: 13]
.   .   .   .   Child: 1  Const 9 of type int [line: 13]
.   .   Sibling: 5  Assign: <= of type int [line: 14]
.   .   .   Child: 0  Id: gx of type int [mem: Global loc: 0 size: 1] [line: 14]
.   .   .   Child: 1  Id: gx of type int [mem: Global loc: 0 size: 1] [line: 14]
.   .   Sibling: 6  Call: output of type void [line: 15]
.   .   .   Child: 0  Id: gx of type int [mem: Global loc: 0 size: 1] [line: 15]
.   .   Sibling: 7  Assign: <= of type int [line: 16]
.   .   .   Child: 0  Op: [ of type int [line: 16]
.   .   .   .   Child: 0  Id: gy of array of type int [mem: Global loc: -2 size: 11] [line: 16]
.   .   .   .   Child: 1  Const 8 of type int [line: 16]
.   .   .   Child: 1  Op: [ of type int [line: 16]
.   .   .   .   Child: 0  Id: gy of array of type int [mem: Global loc: -2 size: 11] [line: 16]
.   .   .   .   Child: 1  Const 9 of type int [line: 16]
.   .   Sibling: 8  Call: output of type void [line: 17]
.   .   .   Child: 0  Op: [ of type int [line: 17]
.   .   .   .   Child: 0  Id: gy of array of type int [mem: Global loc: -2 size: 11] [line: 17]
.   .   .   .   Child: 1  Const 8 of type int [line: 17]
.   .   Sibling: 9  Call: outnl of type void [line: 18]
.   .   Sibling: 10  Assign: <= of type int [line: 21]
.   .   .   Child: 0  Op: [ of type int [line: 21]
.   .   .   .   Child: 0  Id: y of array of type int [mem: Local loc: -6 size: 11] [line: 21]
.   .   .   .   Child: 1  Const 9 of type int [line: 21]
.   .   .   Child: 1  Const 333 of type int [line: 21]
.   .   Sibling: 11  Call: output of type void [line: 22]
.   .   .   Child: 0  Op: [ of type int [line: 22]
.   .   .   .   Child: 0  Id: y of array of type int [mem: Local loc: -6 size: 11] [line: 22]
.   .   .   .   Child: 1  Const 9 of type int [line: 22]
.   .   Sibling: 12  Assign: <= of type int [line: 23]
.   .   .   Child: 0  Id: x of type int [mem: Local loc: -4 size: 1] [line: 23]
.   .   .   Child: 1  Id: x of type int [mem: Local loc: -4 size: 1] [line: 23]
.   .   Sibling: 13  Call: output of type void [line: 24]
.   .   .   Child: 0  Id: x of type int [mem: Local loc: -4 size: 1] [line: 24]
.   .   Sibling: 14  Assign: <= of type int [line: 25]
.   .   .   Child: 0  Op: [ of type int [line: 25]
.   .   .   .   Child: 0  Id: y of array of type int [mem: Local loc: -6 size: 11] [line: 25]
.   .   .   .   Child: 1  Const 7 of type int [line: 25]
.   .   .   Child: 1  Op: sizeof of type int [line: 25]
.   .   .   .   Child: 0  Id: y of array of type int [mem: Local loc: -6 size: 11] [line: 25]
.   .   Sibling: 15  Call: output of type void [line: 26]
.   .   .   Child: 0  Op: [ of type int [line: 26]
.   .   .   .   Child: 0  Id: y of array of type int [mem: Local loc: -6 size: 11] [line: 26]
.   .   .   .   Child: 1  Const 7 of type int [line: 26]
.   .   Sibling: 16  Call: outnl of type void [line: 27]
.   .   Sibling: 17  Assign: <= of type int [line: 30]
.   .   .   Child: 0  Id: px of type int [mem: Parameter loc: -2 size: 1] [line: 30]
.   .   .   Child: 1  Id: px of type int [mem: Parameter loc: -2 size: 1] [line: 30]
.   .   Sibling: 18  Call: output of type void [line: 31]
.   .   .   Child: 0  Id: px of type int [mem: Parameter loc: -2 size: 1] [line: 31]
.   .   Sibling: 19  Assign: <= of type int [line: 32]
.   .   .   Child: 0  Id: px of type int [mem: Parameter loc: -2 size: 1] [line: 32]
.   .   .   Child: 1  Const 101 of type int [line: 32]
.   .   Sibling: 20  Assign: <= of type int [line: 33]
.   .   .   Child: 0  Op: [ of type int [line: 33]
.   .   .   .   Child: 0  Id: py of array of type int [mem: Parameter loc: -3 size: 1] [line: 33]
.   .   .   .   Child: 1  Const 8 of type int [line: 33]
.   .   .   Child: 1  Op: [ of type int [line: 33]
.   .   .   .   Child: 0  Id: py of array of type int [mem: Parameter loc: -3 size: 1] [line: 33]
.   .   .   .   Child: 1  Const 9 of type int [line: 33]
.   .   Sibling: 21  Call: output of type void [line: 34]
.   .   .   Child: 0  Op: [ of type int [line: 34]
.   .   .   .   Child: 0  Id: py of array of type int [mem: Parameter loc: -3 size: 1] [line: 34]
.   .   .   .   Child: 1  Const 8 of type int [line: 34]
.   .   Sibling: 22  Assign: <= of type int [line: 35]
.   .   .   Child: 0  Op: [ of type int [line: 35]
.   .   .   .   Child: 0  Id: py of array of type int [mem: Parameter loc: -3 size: 1] [line: 35]
.   .   .   .   Child: 1  Const 8 of type int [line: 35]
.   .   .   Child: 1  Const 102 of type int [line: 35]
.   .   Sibling: 23  Assign: <= of type int [line: 36]
.   .   .   Child: 0  Op: [ of type int [line: 36]
.   .   .   .   Child: 0  Id: py of array of type int [mem: Parameter loc: -3 size: 1] [line: 36]
.   .   .   .   Child: 1  Const 7 of type int [line: 36]
.   .   .   Child: 1  Op: sizeof of type int [line: 36]
.   .   .   .   Child: 0  Id: py of array of type int [mem: Parameter loc: -3 size: 1] [line: 36]
.   .   Sibling: 24  Call: output of type void [line: 37]
.   .   .   Child: 0  Op: [ of type int [line: 37]
.   .   .   .   Child: 0  Id: py of array of type int [mem: Parameter loc: -3 size: 1] [line: 37]
.   .   .   .   Child: 1  Const 7 of type int [line: 37]
.   .   Sibling: 25  Call: outnl of type void [line: 38]
.   .   Sibling: 26  Assign: <= of type int [line: 41]
.   .   .   Child: 0  Op: [ of type int [line: 41]
.   .   .   .   Child: 0  Id: sy of static array of type int [mem: LocalStatic loc: -14 size: 11] [line: 41]
.   .   .   .   Child: 1  Const 9 of type int [line: 41]
.   .   .   Child: 1  Const 444 of type int [line: 41]
.   .   Sibling: 27  Call: output of type void [line: 42]
.   .   .   Child: 0  Op: [ of type int [line: 42]
.   .   .   .   Child: 0  Id: sy of static array of type int [mem: LocalStatic loc: -14 size: 11] [line: 42]
.   .   .   .   Child: 1  Const 9 of type int [line: 42]
.   .   Sibling: 28  Assign: <= of type int [line: 43]
.   .   .   Child: 0  Id: sx of static type int [mem: LocalStatic loc: -12 size: 1] [line: 43]
.   .   .   Child: 1  Id: sx of static type int [mem: LocalStatic loc: -12 size: 1] [line: 43]
.   .   Sibling: 29  Call: output of type void [line: 44]
.   .   .   Child: 0  Id: sx of static type int [mem: LocalStatic loc: -12 size: 1] [line: 44]
.   .   Sibling: 30  Assign: <= of type int [line: 45]
.   .   .   Child: 0  Op: [ of type int [line: 45]
.   .   .   .   Child: 0  Id: sy of static array of type int [mem: LocalStatic loc: -14 size: 11] [line: 45]
.   .   .   .   Child: 1  Const 7 of type int [line: 45]
.   .   .   Child: 1  Op: sizeof of type int [line: 45]
.   .   .   .   Child: 0  Id: sy of static array of type int [mem: LocalStatic loc: -14 size: 11] [line: 45]
.   .   Sibling: 31  Call: output of type void [line: 46]
.   .   .   Child: 0  Op: [ of type int [line: 46]
.   .   .   .   Child: 0  Id: sy of static array of type int [mem: LocalStatic loc: -14 size: 11] [line: 46]
.   .   .   .   Child: 1  Const 7 of type int [line: 46]
.   .   Sibling: 32  Call: outnl of type void [line: 47]
Sibling: 3  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 51]
.   Child: 1  Compound [mem: None loc: 0 size: -14] [line: 52]
.   .   Child: 0  Var: zx of type int [mem: Local loc: -2 size: 1] [line: 53]
.   .   Sibling: 1  Var: zy of array of type int [mem: Local loc: -4 size: 11] [line: 53]
.   .   Child: 1  Assign: <= of type int [line: 56]
.   .   .   Child: 0  Id: zx of type int [mem: Local loc: -2 size: 1] [line: 56]
.   .   .   Child: 1  Const 999 of type int [line: 56]
.   .   Sibling: 1  Assign: <= of type int [line: 57]
.   .   .   Child: 0  Op: [ of type int [line: 57]
.   .   .   .   Child: 0  Id: zy of array of type int [mem: Local loc: -4 size: 11] [line: 57]
.   .   .   .   Child: 1  Const 9 of type int [line: 57]
.   .   .   Child: 1  Const 111 of type int [line: 57]
.   .   Sibling: 2  Call: output of type void [line: 58]
.   .   .   Child: 0  Id: zx of type int [mem: Local loc: -2 size: 1] [line: 58]
.   .   Sibling: 3  Call: output of type void [line: 59]
.   .   .   Child: 0  Op: [ of type int [line: 59]
.   .   .   .   Child: 0  Id: zy of array of type int [mem: Local loc: -4 size: 11] [line: 59]
.   .   .   .   Child: 1  Const 9 of type int [line: 59]
.   .   Sibling: 4  Call: outnl of type void [line: 60]
.   .   Sibling: 5  Call: esperanza of type void [line: 62]
.   .   .   Child: 0  Id: zx of type int [mem: Local loc: -2 size: 1] [line: 62]
.   .   .   Sibling: 1  Id: zy of array of type int [mem: Local loc: -4 size: 11] [line: 62]
.   .   Sibling: 6  Call: output of type void [line: 65]
.   .   .   Child: 0  Id: zx of type int [mem: Local loc: -2 size: 1] [line: 65]
.   .   Sibling: 7  Call: output of type void [line: 66]
.   .   .   Child: 0  Op: [ of type int [line: 66]
.   .   .   .   Child: 0  Id: zy of array of type int [mem: Local loc: -4 size: 11] [line: 66]
.   .   .   .   Child: 1  Const 9 of type int [line: 66]
.   .   Sibling: 8  Call: outnl of type void [line: 67]
Offset for end of global space: -24
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M var.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(12): Variable 'x' may be uninitialized when used here.
WARNING(13): Variable 'y' may be uninitialized when used here.
Number of warnings: 2
Number of errors: 1

==============
==============
./c- -M varPair.c-
Var: gx of type int [mem: Global loc: 0 size: 1] [line: 2]
Sibling: 1  Var: gy of array of type int [mem: Global loc: -2 size: 11] [line: 2]
Sibling: 2  Func: fred returns type void [mem: Global loc: 0 size: -4] [line: 3]
.   Child: 0  Parm: px of type int [mem: Parameter loc: -2 size: 1] [line: 3]
.   Sibling: 1  Parm: py of array of type int [mem: Parameter loc: -3 size: 1] [line: 3]
.   Child: 1  Compound [mem: None loc: 0 size: -16] [line: 4]
.   .   Child: 0  Var: x of type int [mem: Local loc: -4 size: 1] [line: 5]
.   .   Sibling: 1  Var: y of array of type int [mem: Local loc: -6 size: 11] [line: 5]
.   .   Sibling: 2  Var: sx of static type int [mem: LocalStatic loc: -12 size: 1] [line: 6]
.   .   Sibling: 3  Var: sy of static array of type int [mem: LocalStatic loc: -14 size: 11] [line: 6]
.   .   Child: 1  Assign: <= of type int [line: 8]
.   .   .   Child: 0  Id: gx of type int [mem: Global loc: 0 size: 1] [line: 8]
.   .   .   Child: 1  Const 111 of type int [line: 8]
.   .   Sibling: 1  Assign: <= of type int [line: 9]
.   .   .   Child: 0  Id: gx of type int [mem: Global loc: 0 size: 1] [line: 9]
.   .   .   Child: 1  Id: gx of type int [mem: Global loc: 0 size: 1] [line: 9]
.   .   Sibling: 2  Call: output of type void [line: 10]
.   .   .   Child: 0  Id: gx of type int [mem: Global loc: 0 size: 1] [line: 10]
.   .   Sibling: 3  Assign: <= of type int [line: 11]
.   .   .   Child: 0  Op: [ of type int [line: 11]
.   .   .   .   Child: 0  Id: gy of array of type int [mem: Global loc: -2 size: 11] [line: 11]
.   .   .   .   Child: 1  Const 9 of type int [line: 11]
.   .   .   Child: 1  Const 222 of type int [line: 11]
.   .   Sibling: 4  Assign: <= of type int [line: 12]
.   .   .   Child: 0  Op: [ of type int [line: 12]
.   .   .   .   Child: 0  Id: gy of array of type int [mem: Global loc: -2 size: 11] [line: 12]
.   .   .   .   Child: 1  Const 9 of type int [line: 12]
.   .   .   Child: 1  Op: [ of type int [line: 12]
.   .   .   .   Child: 0  Id: gy of array of type int [mem: Global loc: -2 size: 11] [line: 12]
.   .   .   .   Child: 1  Const 9 of type int [line: 12]
.   .   Sibling: 5  Call: output of type void [line: 13]
.   .   .   Child: 0  Op: [ of type int [line: 13]
.   .   .   .   Child: 0  Id: gy of array of type int [mem: Global loc: -2 size: 11] [line: 13]
.   .   .   .   Child: 1  Const 9 of type int [line: 13]
.   .   Sibling: 6  Call: outnl of type void [line: 14]
.   .   Sibling: 7  Assign: <= of type int [line: 16]
.   .   .   Child: 0  Id: x of type int [mem: Local loc: -4 size: 1] [line: 16]
.   .   .   Child: 1  Const 333 of type int [line: 16]
.   .   Sibling: 8  Assign: <= of type int [line: 17]
.   .   .   Child: 0  Id: x of type int [mem: Local loc: -4 size: 1] [line: 17]
.   .   .   Child: 1  Id: x of type int [mem: Local loc: -4 size: 1] [line: 17]
.   .   Sibling: 9  Call: output of type void [line: 18]
.   .   .   Child: 0  Id: x of type int [mem: Local loc: -4 size: 1] [line: 18]
.   .   Sibling: 10  Assign: <= of type int [line: 19]
.   .   .   Child: 0  Op: [ of type int [line: 19]
.   .   .   .   Child: 0  Id: y of array of type int [mem: Local loc: -6 size: 11] [line: 19]
.   .   .   .   Child: 1  Const 9 of type int [line: 19]
.   .   .   Child: 1  Const 444 of type int [line: 19]
.   .   Sibling: 11  Assign: <= of type int [line: 20]
.   .   .   Child: 0  Op: [ of type int [line: 20]
.   .   .   .   Child: 0  Id: y of array of type int [mem: Local loc: -6 size: 11] [line: 20]
.   .   .   .   Child: 1  Const 9 of type int [line: 20]
.   .   .   Child: 1  Op: [ of type int [line: 20]
.   .   .   .   Child: 0  Id: y of array of type int [mem: Local loc: -6 size: 11] [line: 20]
.   .   .   .   Child: 1  Const 9 of type int [line: 20]
.   .   Sibling: 12  Call: output of type void [line: 21]
.   .   .   Child: 0  Op: [ of type int [line: 21]
.   .   .   .   Child: 0  Id: y of array of type int [mem: Local loc: -6 size: 11] [line: 21]
.   .   .   .   Child: 1  Const 9 of type int [line: 21]
.   .   Sibling: 13  Call: outnl of type void [line: 22]
.   .   Sibling: 14  Assign: <= of type int [line: 24]
.   .   .   Child: 0  Id: px of type int [mem: Parameter loc: -2 size: 1] [line: 24]
.   .   .   Child: 1  Const 555 of type int [line: 24]
.   .   Sibling: 15  Assign: <= of type int [line: 25]
.   .   .   Child: 0  Id: px of type int [mem: Parameter loc: -2 size: 1] [line: 25]
.   .   .   Child: 1  Id: px of type int [mem: Parameter loc: -2 size: 1] [line: 25]
.   .   Sibling: 16  Call: output of type void [line: 26]
.   .   .   Child: 0  Id: px of type int [mem: Parameter loc: -2 size: 1] [line: 26]
.   .   Sibling: 17  Assign: <= of type int [line: 27]
.   .   .   Child: 0  Op: [ of type int [line: 27]
.   .   .   .   Child: 0  Id: py of array of type int [mem: Parameter loc: -3 size: 1] [line: 27]
.   .   .   .   Child: 1  Const 9 of type int [line: 27]
.   .   .   Child: 1  Const 666 of type int [line: 27]
.   .   Sibling: 18  Assign: <= of type int [line: 28]
.   .   .   Child: 0  Op: [ of type int [line: 28]
.   .   .   .   Child: 0  Id: py of array of type int [mem: Parameter loc: -3 size: 1] [line: 28]
.   .   .   .   Child: 1  Const 9 of type int [line: 28]
.   .   .   Child: 1  Op: [ of type int [line: 28]
.   .   .   .   Child: 0  Id: py of array of type int [mem: Parameter loc: -3 size: 1] [line: 28]
.   .   .   .   Child: 1  Const 9 of type int [line: 28]
.   .   Sibling: 19  Call: output of type void [line: 29]
.   .   .   Child: 0  Op: [ of type int [line: 29]
.   .   .   .   Child: 0  Id: py of array of type int [mem: Parameter loc: -3 size: 1] [line: 29]
.   .   .   .   Child: 1  Const 9 of type int [line: 29]
.   .   Sibling: 20  Call: outnl of type void [line: 30]
.   .   Sibling: 21  Assign: <= of type int [line: 32]
.   .   .   Child: 0  Id: sx of static type int [mem: LocalStatic loc: -12 size: 1] [line: 32]
.   .   .   Child: 1  Const 777 of type int [line: 32]
.   .   Sibling: 22  Assign: <= of type int [line: 33]
.   .   .   Child: 0  Id: sx of static type int [mem: LocalStatic loc: -12 size: 1] [line: 33]
.   .   .   Child: 1  Id: sx of static type int [mem: LocalStatic loc: -12 size: 1] [line: 33]
.   .   Sibling: 23  Call: output of type void [line: 34]
.   .   .   Child: 0  Id: sx of static type int [mem: LocalStatic loc: -12 size: 1] [line: 34]
.   .   Sibling: 24  Assign: <= of type int [line: 35]
.   .   .   Child: 0  Op: [ of type int [line: 35]
.   .   .   .   Child: 0  Id: sy of static array of type int [mem: LocalStatic loc: -14 size: 11] [line: 35]
.   .   .   .   Child: 1  Const 9 of type int [line: 35]
.   .   .   Child: 1  Const 888 of type int [line: 35]
.   .   Sibling: 25  Assign: <= of type int [line: 36]
.   .   .   Child: 0  Op: [ of type int [line: 36]
.   .   .   .   Child: 0  Id: sy of static array of type int [mem: LocalStatic loc: -14 size: 11] [line: 36]
.   .   .   .   Child: 1  Const 9 of type int [line: 36]
.   .   .   Child: 1  Op: [ of type int [line: 36]
.   .   .   .   Child: 0  Id: sy of static array of type int [mem: LocalStatic loc: -14 size: 11] [line: 36]
.   .   .   .   Child: 1  Const 9 of type int [line: 36]
.   .   Sibling: 26  Call: output of type void [line: 37]
.   .   .   Child: 0  Op: [ of type int [line: 37]
.   .   .   .   Child: 0  Id: sy of static array of type int [mem: LocalStatic loc: -14 size: 11] [line: 37]
.   .   .   .   Child: 1  Const 9 of type int [line: 37]
.   .   Sibling: 27  Call: outnl of type void [line: 38]
Sibling: 3  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 41]
.   Child: 1  Compound [mem: None loc: 0 size: -14] [line: 41]
.   .   Child: 0  Var: lx of type int [mem: Local loc: -2 size: 1] [line: 42]
.   .   Sibling: 1  Var: ly of array of type int [mem: Local loc: -4 size: 11] [line: 42]
.   .   Child: 1  Assign: <= of type int [line: 44]
.   .   .   Child: 0  Id: lx of type int [mem: Local loc: -2 size: 1] [line: 44]
.   .   .   Child: 1  Assign: <= of type int [line: 44]
.   .   .   .   Child: 0  Op: [ of type int [line: 44]
.   .   .   .   .   Child: 0  Id: ly of array of type int [mem: Local loc: -4 size: 11] [line: 44]
.   .   .   .   .   Child: 1  Const 0 of type int [line: 44]
.   .   .   .   Child: 1  Const 111 of type int [line: 44]
.   .   Sibling: 1  Call: fred of type void [line: 45]
.   .   .   Child: 0  Id: gx of type int [mem: Global loc: 0 size: 1] [line: 45]
.   .   .   Sibling: 1  Id: gy of array of type int [mem: Global loc: -2 size: 11] [line: 45]
.   .   Sibling: 2  Call: fred of type void [line: 46]
.   .   .   Child: 0  Id: lx of type int [mem: Local loc: -2 size: 1] [line: 46]
.   .   .   Sibling: 1  Id: ly of array of type int [mem: Local loc: -4 size: 11] [line: 46]
Offset for end of global space: -24
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M vars.c-
WARNING(1): The variable 'ga' seems not to be used.
WARNING(2): The variable 'gca' seems not to be used.
WARNING(4): The function 'dog' seems not to be used.
WARNING(4): The parameter 'pb' seems not to be used.
WARNING(4): The parameter 'pc' seems not to be used.
WARNING(4): The variable 'i' seems not to be used.
WARNING(8): The variable 'a' seems not to be used.
WARNING(9): The variable 'ca' seems not to be used.
WARNING(10): The variable 'sa' seems not to be used.
WARNING(11): The variable 'sca' seems not to be used.
Var: ga of type int [mem: Global loc: 0 size: 1] [line: 1]
Sibling: 1  Var: gca of array of type char [mem: Global loc: -42 size: 11] [line: 2]
.   Child: 0  Const "cry havoc and let slip the dogs of war." of array of type char [mem: Global loc: -2 size: 40] [line: 2]
Sibling: 2  Func: dog returns type void [mem: Global loc: 0 size: -5] [line: 4]
.   Child: 0  Parm: pa of type int [mem: Parameter loc: -2 size: 1] [line: 4]
.   Sibling: 1  Parm: pb of type bool [mem: Parameter loc: -3 size: 1] [line: 4]
.   Sibling: 2  Parm: pc of array of type char [mem: Parameter loc: -4 size: 1] [line: 4]
.   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 4]
.   .   Child: 1  For [mem: None loc: 0 size: -6] [line: 4]
.   .   .   Child: 0  Var: i of type int [mem: Local loc: -5 size: 1] [line: 4]
.   .   .   Child: 1  Range [line: 4]
.   .   .   .   Child: 0  Const 1 of type int [line: 4]
.   .   .   .   Child: 1  Id: pa of type int [mem: Parameter loc: -2 size: 1] [line: 4]
Sibling: 3  Func: main returns type void [mem: Global loc: 0 size: -2] [line: 6]
.   Child: 1  Compound [mem: None loc: 0 size: -14] [line: 7]
.   .   Child: 0  Var: a of type int [mem: Local loc: -2 size: 1] [line: 8]
.   .   Sibling: 1  Var: ca of array of type char [mem: Local loc: -4 size: 11] [line: 9]
.   .   .   Child: 0  Const "retrogressive" of array of type char [mem: Global loc: -53 size: 14] [line: 9]
.   .   Sibling: 2  Var: sa of static type int [mem: LocalStatic loc: -66 size: 1] [line: 10]
.   .   Sibling: 3  Var: sca of static array of type char [mem: LocalStatic loc: -81 size: 21] [line: 11]
.   .   .   Child: 0  Const "epistolatory" of array of type char [mem: Global loc: -68 size: 13] [line: 11]
Offset for end of global space: -101
Number of warnings: 10
Number of errors: 0

==============
==============
./c- -M walsh.c-
WARNING(90): Variable 'f' may be uninitialized when used here.
Func: pow returns type int [mem: Global loc: 0 size: -4] [line: 3]
.   Child: 0  Parm: n of type int [mem: Parameter loc: -2 size: 1] [line: 3]
.   Sibling: 1  Parm: p of type int [mem: Parameter loc: -3 size: 1] [line: 3]
.   Child: 1  Compound [mem: None loc: 0 size: -6] [line: 4]
.   .   Child: 0  Var: sqr of type int [mem: Local loc: -4 size: 1] [line: 5]
.   .   Sibling: 1  Var: ans of type int [mem: Local loc: -5 size: 1] [line: 6]
.   .   Child: 1  Assign: <= of type int [line: 8]
.   .   .   Child: 0  Id: ans of type int [mem: Local loc: -5 size: 1] [line: 8]
.   .   .   Child: 1  Const 1 of type int [line: 8]
.   .   Sibling: 1  Assign: <= of type int [line: 9]
.   .   .   Child: 0  Id: sqr of type int [mem: Local loc: -4 size: 1] [line: 9]
.   .   .   Child: 1  Id: n of type int [mem: Parameter loc: -2 size: 1] [line: 9]
.   .   Sibling: 2  While [line: 10]
.   .   .   Child: 0  Const true of type bool [line: 10]
.   .   .   Child: 1  Compound [mem: None loc: 0 size: -6] [line: 10]
.   .   .   .   Child: 1  If [line: 11]
.   .   .   .   .   Child: 0  Op: = of type bool [line: 11]
.   .   .   .   .   .   Child: 0  Op: % of type int [line: 11]
.   .   .   .   .   .   .   Child: 0  Id: p of type int [mem: Parameter loc: -3 size: 1] [line: 11]
.   .   .   .   .   .   .   Child: 1  Const 2 of type int [line: 11]
.   .   .   .   .   .   Child: 1  Const 1 of type int [line: 11]
.   .   .   .   .   Child: 1  Assign: <= of type int [line: 11]
.   .   .   .   .   .   Child: 0  Id: ans of type int [mem: Local loc: -5 size: 1] [line: 11]
.   .   .   .   .   .   Child: 1  Op: * of type int [line: 11]
.   .   .   .   .   .   .   Child: 0  Id: ans of type int [mem: Local loc: -5 size: 1] [line: 11]
.   .   .   .   .   .   .   Child: 1  Id: sqr of type int [mem: Local loc: -4 size: 1] [line: 11]
.   .   .   .   Sibling: 1  Assign: <= of type int [line: 12]
.   .   .   .   .   Child: 0  Id: p of type int [mem: Parameter loc: -3 size: 1] [line: 12]
.   .   .   .   .   Child: 1  Op: / of type int [line: 12]
.   .   .   .   .   .   Child: 0  Id: p of type int [mem: Parameter loc: -3 size: 1] [line: 12]
.   .   .   .   .   .   Child: 1  Const 2 of type int [line: 12]
.   .   .   .   Sibling: 2  If [line: 13]
.   .   .   .   .   Child: 0  Op: = of type bool [line: 13]
.   .   .   .   .   .   Child: 0  Id: p of type int [mem: Parameter loc: -3 size: 1] [line: 13]
.   .   .   .   .   .   Child: 1  Const 0 of type int [line: 13]
.   .   .   .   .   Child: 1  Return [line: 13]
.   .   .   .   .   .   Child: 0  Id: ans of type int [mem: Local loc: -5 size: 1] [line: 13]
.   .   .   .   Sibling: 3  Assign: <= of type int [line: 14]
.   .   .   .   .   Child: 0  Id: sqr of type int [mem: Local loc: -4 size: 1] [line: 14]
.   .   .   .   .   Child: 1  Op: * of type int [line: 14]
.   .   .   .   .   .   Child: 0  Id: sqr of type int [mem: Local loc: -4 size: 1] [line: 14]
.   .   .   .   .   .   Child: 1  Id: sqr of type int [mem: Local loc: -4 size: 1] [line: 14]
Sibling: 1  Func: getFunc returns type int [mem: Global loc: 0 size: -3] [line: 18]
.   Child: 0  Parm: f of array of type int [mem: Parameter loc: -2 size: 1] [line: 18]
.   Child: 1  Compound [mem: None loc: 0 size: -6] [line: 19]
.   .   Child: 0  Var: numbits of type int [mem: Local loc: -3 size: 1] [line: 20]
.   .   Sibling: 1  Var: i of type int [mem: Local loc: -4 size: 1] [line: 21]
.   .   Sibling: 2  Var: size of type int [mem: Local loc: -5 size: 1] [line: 22]
.   .   Child: 1  Assign: <= of type int [line: 24]
.   .   .   Child: 0  Id: numbits of type int [mem: Local loc: -3 size: 1] [line: 24]
.   .   .   Child: 1  Call: input of type int [line: 24]
.   .   Sibling: 1  If [line: 25]
.   .   .   Child: 0  Op: = of type bool [line: 25]
.   .   .   .   Child: 0  Id: numbits of type int [mem: Local loc: -3 size: 1] [line: 25]
.   .   .   .   Child: 1  Const 0 of type int [line: 25]
.   .   .   Child: 1  Return [line: 25]
.   .   .   .   Child: 0  Const 0 of type int [line: 25]
.   .   Sibling: 2  Assign: <= of type int [line: 26]
.   .   .   Child: 0  Id: size of type int [mem: Local loc: -5 size: 1] [line: 26]
.   .   .   Child: 1  Call: pow of type int [line: 26]
.   .   .   .   Child: 0  Const 2 of type int [line: 26]
.   .   .   .   Sibling: 1  Id: numbits of type int [mem: Local loc: -3 size: 1] [line: 26]
.   .   Sibling: 3  Assign: <= of type int [line: 27]
.   .   .   Child: 0  Id: i of type int [mem: Local loc: -4 size: 1] [line: 27]
.   .   .   Child: 1  Const 0 of type int [line: 27]
.   .   Sibling: 4  While [line: 28]
.   .   .   Child: 0  Op: < of type bool [line: 28]
.   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -4 size: 1] [line: 28]
.   .   .   .   Child: 1  Id: size of type int [mem: Local loc: -5 size: 1] [line: 28]
.   .   .   Child: 1  Compound [mem: None loc: 0 size: -6] [line: 28]
.   .   .   .   Child: 1  Assign: <= of type int [line: 29]
.   .   .   .   .   Child: 0  Op: [ of type int [line: 29]
.   .   .   .   .   .   Child: 0  Id: f of array of type int [mem: Parameter loc: -2 size: 1] [line: 29]
.   .   .   .   .   .   Child: 1  Id: i of type int [mem: Local loc: -4 size: 1] [line: 29]
.   .   .   .   .   Child: 1  Call: input of type int [line: 29]
.   .   .   .   Sibling: 1  Assign: <= of type int [line: 30]
.   .   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -4 size: 1] [line: 30]
.   .   .   .   .   Child: 1  Op: + of type int [line: 30]
.   .   .   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -4 size: 1] [line: 30]
.   .   .   .   .   .   Child: 1  Const 1 of type int [line: 30]
.   .   Sibling: 5  Return [line: 33]
.   .   .   Child: 0  Id: numbits of type int [mem: Local loc: -3 size: 1] [line: 33]
Sibling: 2  Func: printFunc returns type void [mem: Global loc: 0 size: -4] [line: 36]
.   Child: 0  Parm: f of array of type int [mem: Parameter loc: -2 size: 1] [line: 36]
.   Sibling: 1  Parm: size of type int [mem: Parameter loc: -3 size: 1] [line: 36]
.   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 37]
.   .   Child: 0  Var: i of type int [mem: Local loc: -4 size: 1] [line: 38]
.   .   Child: 1  Assign: <= of type int [line: 40]
.   .   .   Child: 0  Id: i of type int [mem: Local loc: -4 size: 1] [line: 40]
.   .   .   Child: 1  Const 0 of type int [line: 40]
.   .   Sibling: 1  While [line: 41]
.   .   .   Child: 0  Op: < of type bool [line: 41]
.   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -4 size: 1] [line: 41]
.   .   .   .   Child: 1  Id: size of type int [mem: Parameter loc: -3 size: 1] [line: 41]
.   .   .   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 41]
.   .   .   .   Child: 1  Call: output of type void [line: 42]
.   .   .   .   .   Child: 0  Op: [ of type int [line: 42]
.   .   .   .   .   .   Child: 0  Id: f of array of type int [mem: Parameter loc: -2 size: 1] [line: 42]
.   .   .   .   .   .   Child: 1  Id: i of type int [mem: Local loc: -4 size: 1] [line: 42]
.   .   .   .   Sibling: 1  Assign: <= of type int [line: 43]
.   .   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -4 size: 1] [line: 43]
.   .   .   .   .   Child: 1  Op: + of type int [line: 43]
.   .   .   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -4 size: 1] [line: 43]
.   .   .   .   .   .   Child: 1  Const 1 of type int [line: 43]
.   .   Sibling: 2  Call: outnl of type void [line: 45]
Sibling: 3  Func: fwt returns type void [mem: Global loc: 0 size: -5] [line: 49]
.   Child: 0  Parm: w of array of type int [mem: Parameter loc: -2 size: 1] [line: 49]
.   Sibling: 1  Parm: start of type int [mem: Parameter loc: -3 size: 1] [line: 49]
.   Sibling: 2  Parm: size of type int [mem: Parameter loc: -4 size: 1] [line: 49]
.   Child: 1  Compound [mem: None loc: 0 size: -8] [line: 50]
.   .   Child: 0  Var: a of type int [mem: Local loc: -5 size: 1] [line: 51]
.   .   Sibling: 1  Var: b of type int [mem: Local loc: -6 size: 1] [line: 51]
.   .   Sibling: 2  Var: tmp of type int [mem: Local loc: -7 size: 1] [line: 51]
.   .   Child: 1  Assign: <= of type int [line: 53]
.   .   .   Child: 0  Id: size of type int [mem: Parameter loc: -4 size: 1] [line: 53]
.   .   .   Child: 1  Op: / of type int [line: 53]
.   .   .   .   Child: 0  Id: size of type int [mem: Parameter loc: -4 size: 1] [line: 53]
.   .   .   .   Child: 1  Const 2 of type int [line: 53]
.   .   Sibling: 1  If [line: 54]
.   .   .   Child: 0  Op: > of type bool [line: 54]
.   .   .   .   Child: 0  Id: size of type int [mem: Parameter loc: -4 size: 1] [line: 54]
.   .   .   .   Child: 1  Const 1 of type int [line: 54]
.   .   .   Child: 1  Compound [mem: None loc: 0 size: -8] [line: 54]
.   .   .   .   Child: 1  Call: fwt of type void [line: 55]
.   .   .   .   .   Child: 0  Id: w of array of type int [mem: Parameter loc: -2 size: 1] [line: 55]
.   .   .   .   .   Sibling: 1  Id: start of type int [mem: Parameter loc: -3 size: 1] [line: 55]
.   .   .   .   .   Sibling: 2  Id: size of type int [mem: Parameter loc: -4 size: 1] [line: 55]
.   .   .   .   Sibling: 1  Call: fwt of type void [line: 56]
.   .   .   .   .   Child: 0  Id: w of array of type int [mem: Parameter loc: -2 size: 1] [line: 56]
.   .   .   .   .   Sibling: 1  Op: + of type int [line: 56]
.   .   .   .   .   .   Child: 0  Id: start of type int [mem: Parameter loc: -3 size: 1] [line: 56]
.   .   .   .   .   .   Child: 1  Id: size of type int [mem: Parameter loc: -4 size: 1] [line: 56]
.   .   .   .   .   Sibling: 2  Id: size of type int [mem: Parameter loc: -4 size: 1] [line: 56]
.   .   Sibling: 2  Assign: <= of type int [line: 59]
.   .   .   Child: 0  Id: a of type int [mem: Local loc: -5 size: 1] [line: 59]
.   .   .   Child: 1  Id: start of type int [mem: Parameter loc: -3 size: 1] [line: 59]
.   .   Sibling: 3  Assign: <= of type int [line: 60]
.   .   .   Child: 0  Id: b of type int [mem: Local loc: -6 size: 1] [line: 60]
.   .   .   Child: 1  Op: + of type int [line: 60]
.   .   .   .   Child: 0  Id: start of type int [mem: Parameter loc: -3 size: 1] [line: 60]
.   .   .   .   Child: 1  Id: size of type int [mem: Parameter loc: -4 size: 1] [line: 60]
.   .   Sibling: 4  While [line: 61]
.   .   .   Child: 0  Op: < of type bool [line: 61]
.   .   .   .   Child: 0  Id: a of type int [mem: Local loc: -5 size: 1] [line: 61]
.   .   .   .   Child: 1  Op: + of type int [line: 61]
.   .   .   .   .   Child: 0  Id: start of type int [mem: Parameter loc: -3 size: 1] [line: 61]
.   .   .   .   .   Child: 1  Id: size of type int [mem: Parameter loc: -4 size: 1] [line: 61]
.   .   .   Child: 1  Compound [mem: None loc: 0 size: -8] [line: 61]
.   .   .   .   Child: 1  Assign: <= of type int [line: 62]
.   .   .   .   .   Child: 0  Id: tmp of type int [mem: Local loc: -7 size: 1] [line: 62]
.   .   .   .   .   Child: 1  Op: [ of type int [line: 62]
.   .   .   .   .   .   Child: 0  Id: w of array of type int [mem: Parameter loc: -2 size: 1] [line: 62]
.   .   .   .   .   .   Child: 1  Id: a of type int [mem: Local loc: -5 size: 1] [line: 62]
.   .   .   .   Sibling: 1  Assign: <= of type int [line: 63]
.   .   .   .   .   Child: 0  Op: [ of type int [line: 63]
.   .   .   .   .   .   Child: 0  Id: w of array of type int [mem: Parameter loc: -2 size: 1] [line: 63]
.   .   .   .   .   .   Child: 1  Id: a of type int [mem: Local loc: -5 size: 1] [line: 63]
.   .   .   .   .   Child: 1  Op: + of type int [line: 63]
.   .   .   .   .   .   Child: 0  Op: [ of type int [line: 63]
.   .   .   .   .   .   .   Child: 0  Id: w of array of type int [mem: Parameter loc: -2 size: 1] [line: 63]
.   .   .   .   .   .   .   Child: 1  Id: a of type int [mem: Local loc: -5 size: 1] [line: 63]
.   .   .   .   .   .   Child: 1  Op: [ of type int [line: 63]
.   .   .   .   .   .   .   Child: 0  Id: w of array of type int [mem: Parameter loc: -2 size: 1] [line: 63]
.   .   .   .   .   .   .   Child: 1  Id: b of type int [mem: Local loc: -6 size: 1] [line: 63]
.   .   .   .   Sibling: 2  Assign: <= of type int [line: 64]
.   .   .   .   .   Child: 0  Op: [ of type int [line: 64]
.   .   .   .   .   .   Child: 0  Id: w of array of type int [mem: Parameter loc: -2 size: 1] [line: 64]
.   .   .   .   .   .   Child: 1  Id: b of type int [mem: Local loc: -6 size: 1] [line: 64]
.   .   .   .   .   Child: 1  Op: - of type int [line: 64]
.   .   .   .   .   .   Child: 0  Id: tmp of type int [mem: Local loc: -7 size: 1] [line: 64]
.   .   .   .   .   .   Child: 1  Op: [ of type int [line: 64]
.   .   .   .   .   .   .   Child: 0  Id: w of array of type int [mem: Parameter loc: -2 size: 1] [line: 64]
.   .   .   .   .   .   .   Child: 1  Id: b of type int [mem: Local loc: -6 size: 1] [line: 64]
.   .   .   .   Sibling: 3  Assign: <= of type int [line: 65]
.   .   .   .   .   Child: 0  Id: a of type int [mem: Local loc: -5 size: 1] [line: 65]
.   .   .   .   .   Child: 1  Op: + of type int [line: 65]
.   .   .   .   .   .   Child: 0  Id: a of type int [mem: Local loc: -5 size: 1] [line: 65]
.   .   .   .   .   .   Child: 1  Const 1 of type int [line: 65]
.   .   .   .   Sibling: 4  Assign: <= of type int [line: 66]
.   .   .   .   .   Child: 0  Id: b of type int [mem: Local loc: -6 size: 1] [line: 66]
.   .   .   .   .   Child: 1  Op: + of type int [line: 66]
.   .   .   .   .   .   Child: 0  Id: b of type int [mem: Local loc: -6 size: 1] [line: 66]
.   .   .   .   .   .   Child: 1  Const 1 of type int [line: 66]
Sibling: 4  Func: div returns type void [mem: Global loc: 0 size: -4] [line: 70]
.   Child: 0  Parm: f of array of type int [mem: Parameter loc: -2 size: 1] [line: 70]
.   Sibling: 1  Parm: size of type int [mem: Parameter loc: -3 size: 1] [line: 70]
.   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 71]
.   .   Child: 0  Var: i of type int [mem: Local loc: -4 size: 1] [line: 72]
.   .   Child: 1  Assign: <= of type int [line: 74]
.   .   .   Child: 0  Id: i of type int [mem: Local loc: -4 size: 1] [line: 74]
.   .   .   Child: 1  Const 0 of type int [line: 74]
.   .   Sibling: 1  While [line: 75]
.   .   .   Child: 0  Op: < of type bool [line: 75]
.   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -4 size: 1] [line: 75]
.   .   .   .   Child: 1  Id: size of type int [mem: Parameter loc: -3 size: 1] [line: 75]
.   .   .   Child: 1  Compound [mem: None loc: 0 size: -5] [line: 75]
.   .   .   .   Child: 1  Assign: <= of type int [line: 76]
.   .   .   .   .   Child: 0  Op: [ of type int [line: 76]
.   .   .   .   .   .   Child: 0  Id: f of array of type int [mem: Parameter loc: -2 size: 1] [line: 76]
.   .   .   .   .   .   Child: 1  Id: i of type int [mem: Local loc: -4 size: 1] [line: 76]
.   .   .   .   .   Child: 1  Op: / of type int [line: 76]
.   .   .   .   .   .   Child: 0  Op: [ of type int [line: 76]
.   .   .   .   .   .   .   Child: 0  Id: f of array of type int [mem: Parameter loc: -2 size: 1] [line: 76]
.   .   .   .   .   .   .   Child: 1  Id: i of type int [mem: Local loc: -4 size: 1] [line: 76]
.   .   .   .   .   .   Child: 1  Id: size of type int [mem: Parameter loc: -3 size: 1] [line: 76]
.   .   .   .   Sibling: 1  Assign: ++ of type int [line: 77]
.   .   .   .   .   Child: 0  Id: i of type int [mem: Local loc: -4 size: 1] [line: 77]
Sibling: 5  Func: main returns type int [mem: Global loc: 0 size: -2] [line: 81]
.   Child: 1  Compound [mem: None loc: 0 size: -262] [line: 82]
.   .   Child: 0  Var: f of array of type int [mem: Local loc: -3 size: 257] [line: 83]
.   .   Sibling: 1  Var: size of type int [mem: Local loc: -259 size: 1] [line: 85]
.   .   Sibling: 2  Var: numbits of type int [mem: Local loc: -260 size: 1] [line: 86]
.   .   Sibling: 3  Var: half of type int [mem: Local loc: -261 size: 1] [line: 87]
.   .   Child: 1  While [line: 89]
.   .   .   Child: 0  Const true of type bool [line: 89]
.   .   .   Child: 1  Compound [mem: None loc: 0 size: -262] [line: 89]
.   .   .   .   Child: 1  Assign: <= of type int [line: 90]
.   .   .   .   .   Child: 0  Id: numbits of type int [mem: Local loc: -260 size: 1] [line: 90]
.   .   .   .   .   Child: 1  Call: getFunc of type int [line: 90]
.   .   .   .   .   .   Child: 0  Id: f of array of type int [mem: Local loc: -3 size: 257] [line: 90]
.   .   .   .   Sibling: 1  If [line: 91]
.   .   .   .   .   Child: 0  Op: = of type bool [line: 91]
.   .   .   .   .   .   Child: 0  Id: numbits of type int [mem: Local loc: -260 size: 1] [line: 91]
.   .   .   .   .   .   Child: 1  Const 0 of type int [line: 91]
.   .   .   .   .   Child: 1  Return [line: 91]
.   .   .   .   .   .   Child: 0  Const 0 of type int [line: 91]
.   .   .   .   Sibling: 2  Assign: <= of type int [line: 92]
.   .   .   .   .   Child: 0  Id: size of type int [mem: Local loc: -259 size: 1] [line: 92]
.   .   .   .   .   Child: 1  Call: pow of type int [line: 92]
.   .   .   .   .   .   Child: 0  Const 2 of type int [line: 92]
.   .   .   .   .   .   Sibling: 1  Id: numbits of type int [mem: Local loc: -260 size: 1] [line: 92]
.   .   .   .   Sibling: 3  Assign: <= of type int [line: 93]
.   .   .   .   .   Child: 0  Id: half of type int [mem: Local loc: -261 size: 1] [line: 93]
.   .   .   .   .   Child: 1  Op: / of type int [line: 93]
.   .   .   .   .   .   Child: 0  Id: size of type int [mem: Local loc: -259 size: 1] [line: 93]
.   .   .   .   .   .   Child: 1  Const 2 of type int [line: 93]
.   .   .   .   Sibling: 4  Call: fwt of type void [line: 95]
.   .   .   .   .   Child: 0  Id: f of array of type int [mem: Local loc: -3 size: 257] [line: 95]
.   .   .   .   .   Sibling: 1  Const 0 of type int [line: 95]
.   .   .   .   .   Sibling: 2  Id: size of type int [mem: Local loc: -259 size: 1] [line: 95]
.   .   .   .   Sibling: 5  Call: printFunc of type void [line: 96]
.   .   .   .   .   Child: 0  Id: f of array of type int [mem: Local loc: -3 size: 257] [line: 96]
.   .   .   .   .   Sibling: 1  Id: size of type int [mem: Local loc: -259 size: 1] [line: 96]
.   .   .   .   Sibling: 6  Call: fwt of type void [line: 98]
.   .   .   .   .   Child: 0  Id: f of array of type int [mem: Local loc: -3 size: 257] [line: 98]
.   .   .   .   .   Sibling: 1  Const 0 of type int [line: 98]
.   .   .   .   .   Sibling: 2  Id: size of type int [mem: Local loc: -259 size: 1] [line: 98]
.   .   .   .   Sibling: 7  Call: div of type void [line: 99]
.   .   .   .   .   Child: 0  Id: f of array of type int [mem: Local loc: -3 size: 257] [line: 99]
.   .   .   .   .   Sibling: 1  Id: size of type int [mem: Local loc: -259 size: 1] [line: 99]
.   .   .   .   Sibling: 8  Call: printFunc of type void [line: 100]
.   .   .   .   .   Child: 0  Id: f of array of type int [mem: Local loc: -3 size: 257] [line: 100]
.   .   .   .   .   Sibling: 1  Id: size of type int [mem: Local loc: -259 size: 1] [line: 100]
.   .   Sibling: 1  Return [line: 102]
.   .   .   Child: 0  Const 0 of type int [line: 102]
Offset for end of global space: 0
Number of warnings: 1
Number of errors: 0

==============
==============
./c- -M while.c-
Func: main returns type void [mem: Global loc: 0 size: -2] [line: 2]
.   Child: 1  Compound [mem: None loc: 0 size: -3] [line: 3]
.   .   Child: 0  Var: x of type int [mem: Local loc: -2 size: 1] [line: 4]
.   .   Child: 1  Assign: <= of type int [line: 5]
.   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 5]
.   .   .   Child: 1  Const 0 of type int [line: 5]
.   .   Sibling: 1  While [line: 7]
.   .   .   Child: 0  Op: > of type bool [line: 7]
.   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 7]
.   .   .   .   Child: 1  Const 10 of type int [line: 7]
.   .   .   Child: 1  Assign: ++ of type int [line: 7]
.   .   .   .   Child: 0  Id: x of type int [mem: Local loc: -2 size: 1] [line: 7]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -M whileif.c-
ERROR(13): '<=' requires operands of the same type but lhs is type bool and rhs is type int.
Number of warnings: 0
Number of errors: 1

* End of testing
Kill all remaining c- processes
=================================================
Output Comparison
** Congratulations!  Your output matches the expected output exactly!
