=================================================
Output of Building User Code
Exploding tar files
20230317182108-geor5198-CS445-S23-A4.tar
parser.l
parser.y
makefile
TokenTree.cpp
ourgetopt.c
symbolTable.cpp
semantic.cpp
TokenTree.h
ourgetopt.h
symbolTable.h
semantic.h
Undossing tarred files assumes all files are ascii and not binary
undosing parser.l
undosing parser.y
undosing makefile
undosing TokenTree.cpp
undosing ourgetopt.c
undosing symbolTable.cpp
undosing semantic.cpp
undosing TokenTree.h
undosing ourgetopt.h
undosing symbolTable.h
undosing semantic.h
Extracting test files
allbad.c-
allgood.c-
array2.c-
array.c-
arrayops.c-
arrayx.c-
assignb.c-
assignBool.c-
assignChar.c-
assignInt.c-
badarray.c-
badcontrol.c-
basicAll5.c-
break2.c-
break3.c-
break4.c-
break.c-
call2.c-
call3.c-
call4.c-
call.c-
callerr.c-
compfunc.c-
constants.c-
control2.c-
control.c-
cover.c-
decl.c-
decllists.c-
defused.c-
emptyline.c-
everythingS23.c-
exp2.c-
exp3.c-
exp4.c-
exp.c-
expL.c-
expR.c-
for2.c-
fora.c-
forb.c-
for.c-
forerr.c-
forscope.c-
funcscope.c-
gcd2.c-
gcd.c-
if2.c-
if.c-
ifevil.c-
ifNest.c-
init2.c-
init3.c-
init4.c-
init5.c-
initbad2.c-
initbad.c-
init.c-
initconst.c-
initused.c-
io.c-
lhs.c-
loops.c-
loopscope2.c-
loopscope.c-
matchunmatch.c-
minus.c-
mixedControl2.c-
mixedControl3.c-
mixedControl.c-
nano.c-
nest.c-
nested.c-
nestedfors.c-
notused.c-
oparray.c-
ops.c-
optype.c-
overlapArray.c-
overlap.c-
overlapStatic.c-
param.c-
paramerr2.c-
paramerr3.c-
paramerr.c-
part2.c-
precassoc.c-
randomRoll.c-
rangeifwhile.c-
redefined.c-
returnbad.c-
return.c-
scope.c-
simple.c-
small.c-
static.c-
strange.c-
stress.c-
testExample.c-
tinybad.c-
tiny.c-
tinygood.c-
tinyscope.c-
tinyType.c-
types3.c-
types.c-
undeclared.c-
undefined.c-
uninit2.c-
uninit.c-
uninitialized.c-
unused.c-
varAssign.c-
var.c-
varPair.c-
while.c-
whileif.c-
remove Tmp dir contents
Now start the build process

find makefile (lowercase)
makefile
A makefile is here and you compiler will be built with it
make the program
Alter compiler with special development tool set including g++ 4.9
parser.y: warning: 2 shift/reduce conflicts [-Wconflicts-sr]
Output from build is 5 lines long
Output from build will be trimmed to 1000 lines if it is too long.
bison -v -t -d parser.y
flex parser.l
g++    -c -o lex.yy.o lex.yy.c
g++    -c -o parser.tab.o parser.tab.c
g++ lex.yy.o parser.tab.o TokenTree.cpp ourgetopt.c  symbolTable.cpp semantic.cpp  -o c-
was a program called c- built?
c- is here and you compiler will now be tested
-rwx--x--x. 1 rs-cs-heckendo domain_users 198880 Mar 17 18:24 c-

END OF BUILD
=================================================
Complete Output of Testing
Run Tests
Limited to 30 seconds total run time and 8000 lines of output

* ================================================ *
|      Tests for CS445 Assignment 4                |
|       Comparison with Expected Output            |
|            Semantic Analysis II                  |
|  Errors and Warnings will be sorted by line num  |
|                                                  |
* ================================================ *

/home/rs-cs-heckendo/TestWorld
-rwxrwxrwx jp/jp          1522 2022-05-31 10:48 allbad.c-
-rwxrwxrwx jp/jp          1288 2022-05-31 10:48 allgood.c-
-rwxrwxrwx jp/jp           363 2022-05-31 10:48 array2.c-
-rwxrwxrwx jp/jp           175 2022-05-31 10:48 array.c-
-rwxrwxrwx jp/jp           860 2022-05-31 10:48 arrayops.c-
-rwxrwxrwx jp/jp           273 2022-05-31 10:48 arrayx.c-
-rwxrwxrwx jp/jp           175 2022-05-31 10:48 assignb.c-
-rwxrwxrwx jp/jp           492 2022-05-31 10:48 assignBool.c-
-rwxrwxrwx jp/jp           483 2022-05-31 10:48 assignChar.c-
-rwxrwxrwx jp/jp           470 2022-05-31 10:48 assignInt.c-
-rwxrwxrwx jp/jp            76 2022-05-31 10:48 badarray.c-
-rwxrwxrwx jp/jp          1008 2022-05-31 10:48 badcontrol.c-
-rwxrwxrwx jp/jp          6336 2022-05-31 10:48 basicAll5.c-
-rwxrwxrwx jp/jp           281 2022-05-31 10:48 break2.c-
-rwxrwxrwx jp/jp           110 2022-05-31 10:48 break3.c-
-rwxrwxrwx jp/jp           155 2022-05-31 10:48 break4.c-
-rwxrwxrwx jp/jp           122 2022-05-31 10:48 break.c-
-rwxrwxrwx jp/jp           340 2022-05-31 10:48 call2.c-
-rwxrwxrwx jp/jp           415 2022-05-31 10:48 call3.c-
-rwxrwxrwx jp/jp          1515 2022-05-31 10:48 call4.c-
-rwxrwxrwx jp/jp           929 2022-05-31 10:48 call.c-
-rwxrwxrwx jp/jp           293 2022-05-31 10:48 callerr.c-
-rwxrwxrwx jp/jp           334 2022-05-31 10:48 compfunc.c-
-rwxrwxrwx jp/jp           117 2022-05-31 10:48 constants.c-
-rwxrwxrwx jp/jp           480 2022-05-31 10:48 control2.c-
-rwxrwxrwx jp/jp           252 2022-05-31 10:48 control.c-
-rwxrwxrwx jp/jp          1150 2022-05-31 10:48 cover.c-
-rwxrwxrwx jp/jp            62 2022-05-31 10:48 decl.c-
-rwxrwxrwx jp/jp           141 2022-05-31 10:48 decllists.c-
-rwxrwxrwx jp/jp           528 2022-05-31 10:48 defused.c-
-rwxrwxrwx jp/jp           206 2022-05-31 10:48 emptyline.c-
-rwxrwxrwx jp/jp          3292 2022-05-31 10:48 everythingS23.c-
-rwxrwxrwx jp/jp           699 2022-05-31 10:48 exp2.c-
-rwxrwxrwx jp/jp           893 2022-05-31 10:48 exp3.c-
-rwxrwxrwx jp/jp          1267 2022-05-31 10:48 exp4.c-
-rwxrwxrwx jp/jp          1079 2022-05-31 10:48 exp.c-
-rwxrwxrwx jp/jp            59 2022-05-31 10:48 expL.c-
-rwxrwxrwx jp/jp            59 2022-05-31 10:48 expR.c-
-rwxrwxrwx jp/jp           164 2022-05-31 10:48 for2.c-
-rwxrwxrwx jp/jp           204 2022-05-31 10:48 fora.c-
-rwxrwxrwx jp/jp           139 2022-05-31 10:48 forb.c-
-rwxrwxrwx jp/jp           465 2022-05-31 10:48 for.c-
-rwxrwxrwx jp/jp           262 2022-05-31 10:48 forerr.c-
-rwxrwxrwx jp/jp           984 2022-05-31 10:48 forscope.c-
-rwxrwxrwx jp/jp           763 2022-05-31 10:48 funcscope.c-
-rwxrwxrwx jp/jp           280 2022-05-31 10:48 gcd2.c-
-rwxrwxrwx jp/jp           335 2022-05-31 10:48 gcd.c-
-rwxrwxrwx jp/jp           398 2022-05-31 10:48 if2.c-
-rwxrwxrwx jp/jp           112 2022-05-31 10:48 if.c-
-rwxrwxrwx jp/jp           242 2022-05-31 10:48 ifevil.c-
-rwxrwxrwx jp/jp           299 2022-05-31 10:48 ifNest.c-
-rwxrwxrwx jp/jp           272 2022-05-31 10:48 init2.c-
-rwxrwxrwx jp/jp           411 2022-05-31 10:48 init3.c-
-rwxrwxrwx jp/jp           105 2022-05-31 10:48 init4.c-
-rwxrwxrwx jp/jp           528 2022-05-31 10:48 init5.c-
-rwxrwxrwx jp/jp           112 2022-05-31 10:48 initbad2.c-
-rwxrwxrwx jp/jp           186 2022-05-31 10:48 initbad.c-
-rwxrwxrwx jp/jp           146 2022-05-31 10:48 init.c-
-rwxrwxrwx jp/jp           118 2022-05-31 10:48 initconst.c-
-rwxrwxrwx jp/jp           146 2022-05-31 10:48 initused.c-
-rwxrwxrwx jp/jp           848 2022-05-31 10:48 io.c-
-rwxrwxrwx jp/jp           449 2022-05-31 10:48 lhs.c-
-rwxrwxrwx jp/jp           482 2022-05-31 10:48 loops.c-
-rwxrwxrwx jp/jp           549 2022-05-31 10:48 loopscope2.c-
-rwxrwxrwx jp/jp           163 2022-05-31 10:48 loopscope.c-
-rwxrwxrwx jp/jp           386 2022-05-31 10:48 matchunmatch.c-
-rwxrwxrwx jp/jp           112 2022-05-31 10:48 minus.c-
-rwxrwxrwx jp/jp           298 2022-05-31 10:48 mixedControl2.c-
-rwxrwxrwx jp/jp           364 2022-05-31 10:48 mixedControl3.c-
-rwxrwxrwx jp/jp           490 2022-05-31 10:48 mixedControl.c-
-rwxrwxrwx jp/jp            53 2022-05-31 10:48 nano.c-
-rwxrwxrwx jp/jp          1547 2022-05-31 10:48 nest.c-
-rwxrwxrwx jp/jp           472 2022-05-31 10:48 nested.c-
-rwxrwxrwx jp/jp           174 2022-05-31 10:48 nestedfors.c-
-rwxrwxrwx jp/jp           265 2022-05-31 10:48 notused.c-
-rwxrwxrwx jp/jp           551 2022-05-31 10:48 oparray.c-
-rwxrwxrwx jp/jp          4230 2022-05-31 10:48 ops.c-
-rwxrwxrwx jp/jp           226 2022-05-31 10:48 optype.c-
-rwxrwxrwx jp/jp           445 2022-05-31 10:48 overlapArray.c-
-rwxrwxrwx jp/jp           408 2022-05-31 10:48 overlap.c-
-rwxrwxrwx jp/jp           672 2022-05-31 10:48 overlapStatic.c-
-rwxrwxrwx jp/jp           789 2022-05-31 10:48 param.c-
-rwxrwxrwx jp/jp           222 2022-05-31 10:48 paramerr2.c-
-rwxrwxrwx jp/jp           794 2022-05-31 10:48 paramerr3.c-
-rwxrwxrwx jp/jp          1059 2022-05-31 10:48 paramerr.c-
-rwxrwxrwx jp/jp           539 2022-05-31 10:48 part2.c-
-rwxrwxrwx jp/jp           272 2022-05-31 10:48 precassoc.c-
-rwxrwxrwx jp/jp           321 2022-05-31 10:48 randomRoll.c-
-rwxrwxrwx jp/jp           209 2022-05-31 10:48 rangeifwhile.c-
-rwxrwxrwx jp/jp           508 2022-05-31 10:48 redefined.c-
-rwxrwxrwx jp/jp           164 2022-05-31 10:48 returnbad.c-
-rwxrwxrwx jp/jp           483 2022-05-31 10:48 return.c-
-rwxrwxrwx jp/jp           650 2022-05-31 10:48 scope.c-
-rwxrwxrwx jp/jp            63 2022-05-31 10:48 simple.c-
-rwxrwxrwx jp/jp           362 2022-05-31 10:48 small.c-
-rwxrwxrwx jp/jp            93 2022-05-31 10:48 static.c-
-rwxrwxrwx jp/jp           464 2022-05-31 10:48 strange.c-
-rwxrwxrwx jp/jp           501 2022-05-31 10:48 stress.c-
-rwxrwxrwx jp/jp          1035 2022-05-31 10:48 testExample.c-
-rwxrwxrwx jp/jp           216 2022-05-31 10:48 tinybad.c-
-rwxrwxrwx jp/jp           182 2022-05-31 10:48 tiny.c-
-rwxrwxrwx jp/jp           162 2022-05-31 10:48 tinygood.c-
-rwxrwxrwx jp/jp           190 2022-05-31 10:48 tinyscope.c-
-rwxrwxrwx jp/jp           941 2022-05-31 10:48 tinyType.c-
-rwxrwxrwx jp/jp           244 2022-05-31 10:48 types3.c-
-rwxrwxrwx jp/jp          1748 2022-05-31 10:48 types.c-
-rwxrwxrwx jp/jp           101 2022-05-31 10:48 undeclared.c-
-rwxrwxrwx jp/jp           658 2022-05-31 10:48 undefined.c-
-rwxrwxrwx jp/jp           217 2022-05-31 10:48 uninit2.c-
-rwxrwxrwx jp/jp           201 2022-05-31 10:48 uninit.c-
-rwxrwxrwx jp/jp           347 2022-05-31 10:48 uninitialized.c-
-rwxrwxrwx jp/jp           104 2022-05-31 10:48 unused.c-
-rwxrwxrwx jp/jp           947 2022-05-31 10:48 varAssign.c-
-rwxrwxrwx jp/jp           216 2022-05-31 10:48 var.c-
-rwxrwxrwx jp/jp           664 2022-05-31 10:48 varPair.c-
-rwxrwxrwx jp/jp            75 2022-05-31 10:48 while.c-
-rwxrwxrwx jp/jp          1792 2022-05-31 10:48 whileif.c-

==============
==============
Test invalid input
./c- gcd.c- (should produce no tree)
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -P allbad.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
ERROR(2): Function 'ant' at line 2 is expecting to return type char but returns type int.
ERROR(7): '<=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(8): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(9): '<=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(11): '>' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(12): '<' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(13): '!<' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(13): '!>' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(14): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(15): 'and' requires operands of type bool but lhs is of type int.
ERROR(15): Expecting Boolean test condition in if statement but got type int.
ERROR(15): Unary 'not' requires an operand of type bool but was given type int.
ERROR(16): Expecting Boolean test condition in if statement but got type int.
ERROR(16): 'or' requires operands of type bool but lhs is of type int.
ERROR(16): Unary 'not' requires an operand of type bool but was given type int.
ERROR(17): Expecting Boolean test condition in if statement but got type int.
ERROR(17): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(21): '+' requires operands of type int but lhs is of type bool.
ERROR(22): '-' requires operands of type int but rhs is of type bool.
ERROR(23): '*' requires operands of type int but lhs is of type bool.
ERROR(24): '/' requires operands of type int but rhs is of type bool.
ERROR(25): '%' requires operands of type int but lhs is of type bool.
ERROR(27): '+=' requires operands of type int but lhs is of type bool.
ERROR(28): '-=' requires operands of type int but lhs is of type bool.
ERROR(29): '*=' requires operands of type int but lhs is of type bool.
ERROR(30): '/=' requires operands of type int but lhs is of type bool.
ERROR(32): Unary 'chsign' requires an operand of type int but was given type bool.
ERROR(33): Unary 'not' requires an operand of type bool but was given type int.
ERROR(34): Unary '?' requires an operand of type int but was given type bool.
WARNING(42): Variable 'aa' may be uninitialized when used here.
ERROR(43): Array 'ba' should be indexed by type int but got type char.
ERROR(43): '<=' requires operands of the same type but lhs is type char and rhs is type int.
WARNING(43): Variable 'b' may be uninitialized when used here.
ERROR(44): Array 'ca' should be indexed by type int but got type bool.
ERROR(44): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
WARNING(44): Variable 'c' may be uninitialized when used here.
ERROR(45): Array 'aa' should be indexed by type int but got type bool.
ERROR(45): Array index is the unindexed array 'aa'.
ERROR(46): Cannot index nonarray 'cat'.
ERROR(46): Cannot use function 'cat' as a variable.
ERROR(47): Cannot use function 'cat' as a variable.
ERROR(47): Too many parameters passed for function 'cat' declared on line 37.
ERROR(54): '<=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(65): '<=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(67): Cannot return an array.
WARNING(73): Variable 'i' may be uninitialized when used here.
ERROR(79): Symbol 'a' is already declared at line 79.
WARNING(79): The function 'elk' seems not to be used.
ERROR(81): Symbol 'a' is already declared at line 79.
ERROR(82): Symbol 'b' is not declared.
WARNING(84): The variable 'a' seems not to be used.
ERROR(85): Symbol 'c' is not declared.
ERROR(85): Symbol 'c' is not declared.
ERROR(86): Symbol 'c' is not declared.
WARNING(86): Variable 'b' may be uninitialized when used here.
WARNING(91): The function 'mane' seems not to be used.
ERROR(96): The operation '?' does not work with arrays.
ERROR(96): Unary '?' requires an operand of type int but was given type char.
ERROR(97): '/' requires operands of type int but lhs is of type char.
ERROR(97): '/' requires operands of type int but rhs is of type char.
ERROR(97): The operation '/' does not work with arrays.
ERROR(98): The operation 'sizeof' only works with arrays.
ERROR(99): 'bbb' is a simple variable and cannot be called.
ERROR(101): Expecting type bool in parameter 1 of call to 'bat' declared on line 4 but got type int.
ERROR(101): Expecting type int in parameter 2 of call to 'bat' declared on line 4 but got type char.
ERROR(102): '<=' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(103): Expecting type bool in parameter 1 of call to 'bat' declared on line 4 but got type char.
ERROR(103): Expecting type int in parameter 2 of call to 'bat' declared on line 4 but got type bool.
ERROR(105): '+' requires operands of type int but lhs is of type void.
ERROR(105): '+' requires operands of type int but rhs is of type bool.
ERROR(105): Too few parameters passed for function 'dog' declared on line 70.
ERROR(107): '+' requires operands of type int but lhs is of type char.
ERROR(110): Symbol 'mane' is already declared at line 91.
Number of warnings: 8
Number of errors: 66

==============
==============
./c- -P allgood.c-
WARNING(40): Variable 'aa' may be uninitialized when used here.
WARNING(41): Variable 'b' may be uninitialized when used here.
WARNING(42): Variable 'c' may be uninitialized when used here.
ERROR(47): Cannot use array in position 1 in range of for statement.
ERROR(47): Cannot use array in position 2 in range of for statement.
ERROR(48): Cannot use array in position 1 in range of for statement.
ERROR(48): Cannot use array in position 2 in range of for statement.
ERROR(48): Cannot use array in position 3 in range of for statement.
ERROR(48): Expecting type int in position 1 in range of for statement but got type bool.
WARNING(48): The variable 'z' seems not to be used.
WARNING(67): The function 'dog' seems not to be used.
WARNING(70): Variable 'i' may be uninitialized when used here.
Number of warnings: 6
Number of errors: 6

==============
==============
./c- -P array2.c-
WARNING(24): Variable 'y' may be uninitialized when used here.
Var: w is array of type int [line: 2]
Sibling: 1  Func: dog returns type int [line: 4]
.   Child: 0  Parm: x of type int [line: 4]
.   Child: 1  Compound [line: 4]
.   .   Child: 0  Var: y is array of type int [line: 5]
.   .   Sibling: 1  Var: z of type int [line: 5]
.   .   Child: 1  Assign: <= of type int [line: 7]
.   .   .   Child: 0  Op: [ of type int [line: 7]
.   .   .   .   Child: 0  Id: y of type int [line: 7]
.   .   .   .   Child: 1  Const 11 of type int [line: 7]
.   .   .   Child: 1  Op: + of type int [line: 7]
.   .   .   .   Child: 0  Op: * of type int [line: 7]
.   .   .   .   .   Child: 0  Id: x of type int [line: 7]
.   .   .   .   .   Child: 1  Const 111 of type int [line: 7]
.   .   .   .   Child: 1  Const 222 of type int [line: 7]
.   .   Sibling: 1  Assign: <= of type int [line: 8]
.   .   .   Child: 0  Id: z of type int [line: 8]
.   .   .   Child: 1  Op: [ of type int [line: 8]
.   .   .   .   Child: 0  Id: y of type int [line: 8]
.   .   .   .   Child: 1  Const 11 of type int [line: 8]
.   .   Sibling: 2  Assign: <= of type int [line: 9]
.   .   .   Child: 0  Op: [ of type int [line: 9]
.   .   .   .   Child: 0  Id: w of type int [line: 9]
.   .   .   .   Child: 1  Const 13 of type int [line: 9]
.   .   .   Child: 1  Op: * of type int [line: 9]
.   .   .   .   Child: 0  Op: * of type int [line: 9]
.   .   .   .   .   Child: 0  Op: * of type int [line: 9]
.   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 9]
.   .   .   .   .   .   .   Child: 0  Op: [ of type int [line: 9]
.   .   .   .   .   .   .   .   Child: 0  Id: w of type int [line: 9]
.   .   .   .   .   .   .   .   Child: 1  Const 15 of type int [line: 9]
.   .   .   .   .   .   Child: 1  Id: x of type int [line: 9]
.   .   .   .   .   Child: 1  Op: [ of type int [line: 9]
.   .   .   .   .   .   Child: 0  Id: y of type int [line: 9]
.   .   .   .   .   .   Child: 1  Const 17 of type int [line: 9]
.   .   .   .   Child: 1  Id: z of type int [line: 9]
.   .   Sibling: 3  Return [line: 11]
.   .   .   Child: 0  Op: * of type int [line: 11]
.   .   .   .   Child: 0  Id: z of type int [line: 11]
.   .   .   .   Child: 1  Op: [ of type int [line: 11]
.   .   .   .   .   Child: 0  Id: y of type int [line: 11]
.   .   .   .   .   Child: 1  Const 11 of type int [line: 11]
Sibling: 2  Func: cat returns type void [line: 14]
.   Child: 0  Parm: x is array of type int [line: 14]
.   Sibling: 1  Parm: z of type int [line: 14]
.   Child: 1  Compound [line: 14]
.   .   Child: 1  Assign: <= of type int [line: 15]
.   .   .   Child: 0  Op: [ of type int [line: 15]
.   .   .   .   Child: 0  Id: x of type int [line: 15]
.   .   .   .   Child: 1  Const 10 of type int [line: 15]
.   .   .   Child: 1  Const 333 of type int [line: 15]
.   .   Sibling: 1  Assign: <= of type int [line: 16]
.   .   .   Child: 0  Op: [ of type int [line: 16]
.   .   .   .   Child: 0  Id: w of type int [line: 16]
.   .   .   .   Child: 1  Const 11 of type int [line: 16]
.   .   .   Child: 1  Const 444 of type int [line: 16]
.   .   Sibling: 2  For [line: 17]
.   .   .   Child: 0  Var: i of type int [line: 17]
.   .   .   Child: 1  Range [line: 17]
.   .   .   .   Child: 0  Const 1 of type int [line: 17]
.   .   .   .   Child: 1  Op: sizeof of type int [line: 17]
.   .   .   .   .   Child: 0  Id: x of type int [line: 17]
.   .   .   Child: 2  Assign: += of type int [line: 18]
.   .   .   .   Child: 0  Op: [ of type int [line: 18]
.   .   .   .   .   Child: 0  Id: w of type int [line: 18]
.   .   .   .   .   Child: 1  Op: [ of type int [line: 18]
.   .   .   .   .   .   Child: 0  Id: x of type int [line: 18]
.   .   .   .   .   .   Child: 1  Id: i of type int [line: 18]
.   .   .   .   Child: 1  Op: * of type int [line: 18]
.   .   .   .   .   Child: 0  Op: [ of type int [line: 18]
.   .   .   .   .   .   Child: 0  Id: w of type int [line: 18]
.   .   .   .   .   .   Child: 1  Op: [ of type int [line: 18]
.   .   .   .   .   .   .   Child: 0  Id: x of type int [line: 18]
.   .   .   .   .   .   .   Child: 1  Op: - of type int [line: 18]
.   .   .   .   .   .   .   .   Child: 0  Id: i of type int [line: 18]
.   .   .   .   .   .   .   .   Child: 1  Const 1 of type int [line: 18]
.   .   .   .   .   Child: 1  Id: z of type int [line: 18]
Sibling: 3  Func: main returns type void [line: 21]
.   Child: 1  Compound [line: 21]
.   .   Child: 0  Var: y is array of type int [line: 22]
.   .   Child: 1  Call: cat of type void [line: 24]
.   .   .   Child: 0  Id: y of type int [line: 24]
.   .   .   Sibling: 1  Const 12 of type int [line: 24]
.   .   Sibling: 1  Call: dog of type int [line: 25]
.   .   .   Child: 0  Const 666 of type int [line: 25]
Number of warnings: 1
Number of errors: 0

==============
==============
./c- -P array.c-
WARNING(12): Variable 'b' may be uninitialized when used here.
Var: a is array of type int [line: 2]
Sibling: 1  Func: main returns type void [line: 4]
.   Child: 1  Compound [line: 5]
.   .   Child: 0  Var: b is array of type int [line: 6]
.   .   Sibling: 1  Var: c is array of type int [line: 7]
.   .   Child: 1  Op: [ of type int [line: 9]
.   .   .   Child: 0  Id: c of type int [line: 9]
.   .   .   Child: 1  Const 22 of type int [line: 9]
.   .   Sibling: 1  Const 999 of type int [line: 10]
.   .   Sibling: 2  Call: output of type void [line: 11]
.   .   .   Child: 0  Op: sizeof of type int [line: 11]
.   .   .   .   Child: 0  Id: a of type int [line: 11]
.   .   Sibling: 3  Call: output of type void [line: 12]
.   .   .   Child: 0  Op: sizeof of type int [line: 12]
.   .   .   .   Child: 0  Id: b of type int [line: 12]
.   .   Sibling: 4  Call: output of type void [line: 13]
.   .   .   Child: 0  Op: sizeof of type int [line: 13]
.   .   .   .   Child: 0  Id: c of type int [line: 13]
Number of warnings: 1
Number of errors: 0

==============
==============
./c- -P arrayops.c-
ERROR(13): '<=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(14): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(18): The operation 'chsign' does not work with arrays.
ERROR(19): The operation 'chsign' does not work with arrays.
ERROR(21): Cannot index nonarray 'a'.
ERROR(22): Array index is the unindexed array 'aa'.
ERROR(22): Cannot index nonarray 'a'.
ERROR(24): Array index is the unindexed array 'aa'.
ERROR(26): The operation 'sizeof' only works with arrays.
ERROR(29): The operation '?' does not work with arrays.
ERROR(31): The operation 'not' does not work with arrays.
ERROR(33): The operation '++' does not work with arrays.
ERROR(36): The operation '+' does not work with arrays.
ERROR(37): The operation '+' does not work with arrays.
ERROR(38): The operation '+' does not work with arrays.
ERROR(41): The operation 'and' does not work with arrays.
ERROR(42): The operation 'and' does not work with arrays.
ERROR(43): The operation 'and' does not work with arrays.
ERROR(45): Cannot index nonarray 'c'.
WARNING(45): Variable 'c' may be uninitialized when used here.
WARNING(46): Variable 'cc' may be uninitialized when used here.
ERROR(47): Cannot index nonarray 'c'.
ERROR(47): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(48): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(51): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(56): '=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(57): '=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(58): '=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(63): '!<' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(64): '!<' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(65): '!<' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(70): '<' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(71): '<' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(72): '<' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(75): '<' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(75): '<' requires operands of the same type but lhs is type char and rhs is type int.
Number of warnings: 2
Number of errors: 34

==============
==============
./c- -P arrayx.c-
WARNING(2): The variable 'e' seems not to be used.
ERROR(6): Initializer for variable 'bb' requires both operands be arrays or not but variable is an array and rhs is not an array.
ERROR(7): Initializer for variable 'cc' requires both operands be arrays or not but variable is an array and rhs is not an array.
ERROR(8): Initializer for variable 'ii' requires both operands be arrays or not but variable is an array and rhs is not an array.
ERROR(10): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(11): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(12): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
WARNING(19): Variable 'd' may be uninitialized when used here.
Number of warnings: 2
Number of errors: 6

==============
==============
./c- -P assignb.c-
WARNING(5): The variable 'c' seems not to be used.
ERROR(7): Symbol 'x' is not declared.
ERROR(7): Symbol 'x' is not declared.
ERROR(8): Symbol 'x' is not declared.
WARNING(9): Variable 'aa' may be uninitialized when used here.
WARNING(10): Variable 'b' may be uninitialized when used here.
WARNING(12): Variable 'cc' may be uninitialized when used here.
Number of warnings: 4
Number of errors: 3

==============
==============
./c- -P assignBool.c-
WARNING(34): Variable 'zx' may be uninitialized when used here.
WARNING(34): Variable 'zy' may be uninitialized when used here.
Var: gx of type bool [line: 2]
Sibling: 1  Var: gy is array of type bool [line: 2]
Sibling: 2  Func: esperanza returns type void [line: 4]
.   Child: 0  Parm: px of type bool [line: 4]
.   Sibling: 1  Parm: py is array of type bool [line: 4]
.   Child: 1  Compound [line: 5]
.   .   Child: 0  Var: x of type bool [line: 6]
.   .   Sibling: 1  Var: y is array of type bool [line: 6]
.   .   Sibling: 2  Var: sx of type bool [line: 7]
.   .   Sibling: 3  Var: sy is array of type bool [line: 7]
.   .   Child: 1  Assign: <= of type bool [line: 9]
.   .   .   Child: 0  Id: gx of type bool [line: 9]
.   .   .   Child: 1  Const true of type bool [line: 9]
.   .   Sibling: 1  Call: outputb of type void [line: 10]
.   .   .   Child: 0  Id: gx of type bool [line: 10]
.   .   Sibling: 2  Assign: <= of type bool [line: 11]
.   .   .   Child: 0  Op: [ of type bool [line: 11]
.   .   .   .   Child: 0  Id: gy of type bool [line: 11]
.   .   .   .   Child: 1  Const 9 of type int [line: 11]
.   .   .   Child: 1  Const true of type bool [line: 11]
.   .   Sibling: 3  Call: outputb of type void [line: 12]
.   .   .   Child: 0  Op: [ of type bool [line: 12]
.   .   .   .   Child: 0  Id: gy of type bool [line: 12]
.   .   .   .   Child: 1  Const 9 of type int [line: 12]
.   .   Sibling: 4  Assign: <= of type bool [line: 13]
.   .   .   Child: 0  Id: x of type bool [line: 13]
.   .   .   Child: 1  Const true of type bool [line: 13]
.   .   Sibling: 5  Call: outputb of type void [line: 14]
.   .   .   Child: 0  Id: x of type bool [line: 14]
.   .   Sibling: 6  Assign: <= of type bool [line: 15]
.   .   .   Child: 0  Op: [ of type bool [line: 15]
.   .   .   .   Child: 0  Id: y of type bool [line: 15]
.   .   .   .   Child: 1  Const 9 of type int [line: 15]
.   .   .   Child: 1  Const true of type bool [line: 15]
.   .   Sibling: 7  Call: outputb of type void [line: 16]
.   .   .   Child: 0  Op: [ of type bool [line: 16]
.   .   .   .   Child: 0  Id: y of type bool [line: 16]
.   .   .   .   Child: 1  Const 9 of type int [line: 16]
.   .   Sibling: 8  Call: outnl of type void [line: 17]
.   .   Sibling: 9  Assign: <= of type bool [line: 19]
.   .   .   Child: 0  Id: px of type bool [line: 19]
.   .   .   Child: 1  Const true of type bool [line: 19]
.   .   Sibling: 10  Call: outputb of type void [line: 20]
.   .   .   Child: 0  Id: px of type bool [line: 20]
.   .   Sibling: 11  Assign: <= of type bool [line: 21]
.   .   .   Child: 0  Op: [ of type bool [line: 21]
.   .   .   .   Child: 0  Id: py of type bool [line: 21]
.   .   .   .   Child: 1  Const 9 of type int [line: 21]
.   .   .   Child: 1  Const true of type bool [line: 21]
.   .   Sibling: 12  Call: outputb of type void [line: 22]
.   .   .   Child: 0  Op: [ of type bool [line: 22]
.   .   .   .   Child: 0  Id: py of type bool [line: 22]
.   .   .   .   Child: 1  Const 9 of type int [line: 22]
.   .   Sibling: 13  Assign: <= of type bool [line: 23]
.   .   .   Child: 0  Id: sx of type bool [line: 23]
.   .   .   Child: 1  Const true of type bool [line: 23]
.   .   Sibling: 14  Call: outputb of type void [line: 24]
.   .   .   Child: 0  Id: sx of type bool [line: 24]
.   .   Sibling: 15  Assign: <= of type bool [line: 25]
.   .   .   Child: 0  Op: [ of type bool [line: 25]
.   .   .   .   Child: 0  Id: sy of type bool [line: 25]
.   .   .   .   Child: 1  Const 9 of type int [line: 25]
.   .   .   Child: 1  Const true of type bool [line: 25]
.   .   Sibling: 16  Call: outputb of type void [line: 26]
.   .   .   Child: 0  Op: [ of type bool [line: 26]
.   .   .   .   Child: 0  Id: sy of type bool [line: 26]
.   .   .   .   Child: 1  Const 9 of type int [line: 26]
.   .   Sibling: 17  Call: outnl of type void [line: 27]
Sibling: 3  Func: main returns type void [line: 31]
.   Child: 1  Compound [line: 32]
.   .   Child: 0  Var: zx of type bool [line: 33]
.   .   Sibling: 1  Var: zy is array of type bool [line: 33]
.   .   Child: 1  Call: esperanza of type void [line: 34]
.   .   .   Child: 0  Id: zx of type bool [line: 34]
.   .   .   Sibling: 1  Id: zy of type bool [line: 34]
Number of warnings: 2
Number of errors: 0

==============
==============
./c- -P assignChar.c-
WARNING(33): Variable 'zx' may be uninitialized when used here.
WARNING(33): Variable 'zy' may be uninitialized when used here.
Var: gx of type char [line: 2]
Sibling: 1  Var: gy is array of type char [line: 2]
Sibling: 2  Func: esperanza returns type void [line: 4]
.   Child: 0  Parm: px of type char [line: 4]
.   Sibling: 1  Parm: py is array of type char [line: 4]
.   Child: 1  Compound [line: 5]
.   .   Child: 0  Var: x of type char [line: 6]
.   .   Sibling: 1  Var: y is array of type char [line: 6]
.   .   Sibling: 2  Var: sx of type char [line: 7]
.   .   Sibling: 3  Var: sy is array of type char [line: 7]
.   .   Child: 1  Assign: <= of type char [line: 9]
.   .   .   Child: 0  Id: gx of type char [line: 9]
.   .   .   Child: 1  Const 'a'  of type char [line: 9]
.   .   Sibling: 1  Call: outputc of type void [line: 10]
.   .   .   Child: 0  Id: gx of type char [line: 10]
.   .   Sibling: 2  Assign: <= of type char [line: 11]
.   .   .   Child: 0  Op: [ of type char [line: 11]
.   .   .   .   Child: 0  Id: gy of type char [line: 11]
.   .   .   .   Child: 1  Const 9 of type int [line: 11]
.   .   .   Child: 1  Const 'b'  of type char [line: 11]
.   .   Sibling: 3  Call: outputc of type void [line: 12]
.   .   .   Child: 0  Op: [ of type char [line: 12]
.   .   .   .   Child: 0  Id: gy of type char [line: 12]
.   .   .   .   Child: 1  Const 9 of type int [line: 12]
.   .   Sibling: 4  Assign: <= of type char [line: 13]
.   .   .   Child: 0  Id: x of type char [line: 13]
.   .   .   Child: 1  Const 'c'  of type char [line: 13]
.   .   Sibling: 5  Call: outputc of type void [line: 14]
.   .   .   Child: 0  Id: x of type char [line: 14]
.   .   Sibling: 6  Assign: <= of type char [line: 15]
.   .   .   Child: 0  Op: [ of type char [line: 15]
.   .   .   .   Child: 0  Id: y of type char [line: 15]
.   .   .   .   Child: 1  Const 9 of type int [line: 15]
.   .   .   Child: 1  Const 'd'  of type char [line: 15]
.   .   Sibling: 7  Call: outputc of type void [line: 16]
.   .   .   Child: 0  Op: [ of type char [line: 16]
.   .   .   .   Child: 0  Id: y of type char [line: 16]
.   .   .   .   Child: 1  Const 9 of type int [line: 16]
.   .   Sibling: 8  Call: outnl of type void [line: 17]
.   .   Sibling: 9  Assign: <= of type char [line: 18]
.   .   .   Child: 0  Id: px of type char [line: 18]
.   .   .   Child: 1  Const 'e'  of type char [line: 18]
.   .   Sibling: 10  Call: outputc of type void [line: 19]
.   .   .   Child: 0  Id: px of type char [line: 19]
.   .   Sibling: 11  Assign: <= of type char [line: 20]
.   .   .   Child: 0  Op: [ of type char [line: 20]
.   .   .   .   Child: 0  Id: py of type char [line: 20]
.   .   .   .   Child: 1  Const 9 of type int [line: 20]
.   .   .   Child: 1  Const 'f'  of type char [line: 20]
.   .   Sibling: 12  Call: outputc of type void [line: 21]
.   .   .   Child: 0  Op: [ of type char [line: 21]
.   .   .   .   Child: 0  Id: py of type char [line: 21]
.   .   .   .   Child: 1  Const 9 of type int [line: 21]
.   .   Sibling: 13  Assign: <= of type char [line: 22]
.   .   .   Child: 0  Id: sx of type char [line: 22]
.   .   .   Child: 1  Const 'f'  of type char [line: 22]
.   .   Sibling: 14  Call: outputc of type void [line: 23]
.   .   .   Child: 0  Id: sx of type char [line: 23]
.   .   Sibling: 15  Assign: <= of type char [line: 24]
.   .   .   Child: 0  Op: [ of type char [line: 24]
.   .   .   .   Child: 0  Id: sy of type char [line: 24]
.   .   .   .   Child: 1  Const 9 of type int [line: 24]
.   .   .   Child: 1  Const 'h'  of type char [line: 24]
.   .   Sibling: 16  Call: outputc of type void [line: 25]
.   .   .   Child: 0  Op: [ of type char [line: 25]
.   .   .   .   Child: 0  Id: sy of type char [line: 25]
.   .   .   .   Child: 1  Const 9 of type int [line: 25]
.   .   Sibling: 17  Call: outnl of type void [line: 26]
Sibling: 3  Func: main returns type void [line: 30]
.   Child: 1  Compound [line: 31]
.   .   Child: 0  Var: zx of type char [line: 32]
.   .   Sibling: 1  Var: zy is array of type char [line: 32]
.   .   Child: 1  Call: esperanza of type void [line: 33]
.   .   .   Child: 0  Id: zx of type char [line: 33]
.   .   .   Sibling: 1  Id: zy of type char [line: 33]
Number of warnings: 2
Number of errors: 0

==============
==============
./c- -P assignInt.c-
WARNING(33): Variable 'zx' may be uninitialized when used here.
WARNING(33): Variable 'zy' may be uninitialized when used here.
Var: gx of type int [line: 2]
Sibling: 1  Var: gy is array of type int [line: 2]
Sibling: 2  Func: esperanza returns type void [line: 4]
.   Child: 0  Parm: px of type int [line: 4]
.   Sibling: 1  Parm: py is array of type int [line: 4]
.   Child: 1  Compound [line: 5]
.   .   Child: 0  Var: x of type int [line: 6]
.   .   Sibling: 1  Var: y is array of type int [line: 6]
.   .   Sibling: 2  Var: sx of type int [line: 7]
.   .   Sibling: 3  Var: sy is array of type int [line: 7]
.   .   Child: 1  Assign: <= of type int [line: 9]
.   .   .   Child: 0  Id: gx of type int [line: 9]
.   .   .   Child: 1  Const 111 of type int [line: 9]
.   .   Sibling: 1  Call: output of type void [line: 10]
.   .   .   Child: 0  Id: gx of type int [line: 10]
.   .   Sibling: 2  Assign: <= of type int [line: 11]
.   .   .   Child: 0  Op: [ of type int [line: 11]
.   .   .   .   Child: 0  Id: gy of type int [line: 11]
.   .   .   .   Child: 1  Const 9 of type int [line: 11]
.   .   .   Child: 1  Const 222 of type int [line: 11]
.   .   Sibling: 3  Call: output of type void [line: 12]
.   .   .   Child: 0  Op: [ of type int [line: 12]
.   .   .   .   Child: 0  Id: gy of type int [line: 12]
.   .   .   .   Child: 1  Const 9 of type int [line: 12]
.   .   Sibling: 4  Assign: <= of type int [line: 13]
.   .   .   Child: 0  Id: x of type int [line: 13]
.   .   .   Child: 1  Const 333 of type int [line: 13]
.   .   Sibling: 5  Call: output of type void [line: 14]
.   .   .   Child: 0  Id: x of type int [line: 14]
.   .   Sibling: 6  Assign: <= of type int [line: 15]
.   .   .   Child: 0  Op: [ of type int [line: 15]
.   .   .   .   Child: 0  Id: y of type int [line: 15]
.   .   .   .   Child: 1  Const 9 of type int [line: 15]
.   .   .   Child: 1  Const 444 of type int [line: 15]
.   .   Sibling: 7  Call: output of type void [line: 16]
.   .   .   Child: 0  Op: [ of type int [line: 16]
.   .   .   .   Child: 0  Id: y of type int [line: 16]
.   .   .   .   Child: 1  Const 9 of type int [line: 16]
.   .   Sibling: 8  Call: outnl of type void [line: 17]
.   .   Sibling: 9  Assign: <= of type int [line: 18]
.   .   .   Child: 0  Id: px of type int [line: 18]
.   .   .   Child: 1  Const 555 of type int [line: 18]
.   .   Sibling: 10  Call: output of type void [line: 19]
.   .   .   Child: 0  Id: px of type int [line: 19]
.   .   Sibling: 11  Assign: <= of type int [line: 20]
.   .   .   Child: 0  Op: [ of type int [line: 20]
.   .   .   .   Child: 0  Id: py of type int [line: 20]
.   .   .   .   Child: 1  Const 9 of type int [line: 20]
.   .   .   Child: 1  Const 666 of type int [line: 20]
.   .   Sibling: 12  Call: output of type void [line: 21]
.   .   .   Child: 0  Op: [ of type int [line: 21]
.   .   .   .   Child: 0  Id: py of type int [line: 21]
.   .   .   .   Child: 1  Const 9 of type int [line: 21]
.   .   Sibling: 13  Assign: <= of type int [line: 22]
.   .   .   Child: 0  Id: sx of type int [line: 22]
.   .   .   Child: 1  Const 777 of type int [line: 22]
.   .   Sibling: 14  Call: output of type void [line: 23]
.   .   .   Child: 0  Id: sx of type int [line: 23]
.   .   Sibling: 15  Assign: <= of type int [line: 24]
.   .   .   Child: 0  Op: [ of type int [line: 24]
.   .   .   .   Child: 0  Id: sy of type int [line: 24]
.   .   .   .   Child: 1  Const 9 of type int [line: 24]
.   .   .   Child: 1  Const 888 of type int [line: 24]
.   .   Sibling: 16  Call: output of type void [line: 25]
.   .   .   Child: 0  Op: [ of type int [line: 25]
.   .   .   .   Child: 0  Id: sy of type int [line: 25]
.   .   .   .   Child: 1  Const 9 of type int [line: 25]
.   .   Sibling: 17  Call: outnl of type void [line: 26]
Sibling: 3  Func: main returns type void [line: 30]
.   Child: 1  Compound [line: 31]
.   .   Child: 0  Var: zx of type int [line: 32]
.   .   Sibling: 1  Var: zy is array of type int [line: 32]
.   .   Child: 1  Call: esperanza of type void [line: 33]
.   .   .   Child: 0  Id: zx of type int [line: 33]
.   .   .   Sibling: 1  Id: zy of type int [line: 33]
Number of warnings: 2
Number of errors: 0

==============
==============
./c- -P badarray.c-
ERROR(3): Cannot return an array.
WARNING(3): Variable 'x' may be uninitialized when used here.
Number of warnings: 1
Number of errors: 1

==============
==============
./c- -P badcontrol.c-
ERROR(6): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(7): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(9): Expecting Boolean test condition in if statement but got type int.
ERROR(11): Expecting Boolean test condition in if statement but got type int.
ERROR(14): Expecting Boolean test condition in if statement but got type int.
ERROR(14): Expecting Boolean test condition in if statement but got type int.
ERROR(17): Expecting Boolean test condition in if statement but got type int.
ERROR(18): Expecting Boolean test condition in if statement but got type int.
ERROR(19): Expecting Boolean test condition in if statement but got type int.
ERROR(20): Expecting Boolean test condition in if statement but got type int.
ERROR(21): Expecting Boolean test condition in if statement but got type int.
ERROR(23): Expecting Boolean test condition in while statement but got type int.
ERROR(25): Expecting Boolean test condition in while statement but got type void.
ERROR(33): Expecting Boolean test condition in while statement but got type int.
ERROR(36): Expecting Boolean test condition in while statement but got type int.
ERROR(44): Cannot have a break statement outside of loop.
WARNING(46): The variable 'z' seems not to be used.
WARNING(48): The variable 'i' seems not to be used.
ERROR(50): Expecting type int in position 1 in range of for statement but got type bool.
WARNING(50): The variable 'i' seems not to be used.
ERROR(52): Expecting type int in position 1 in range of for statement but got type void.
ERROR(52): Symbol 'zog' is not declared.
WARNING(52): The variable 'i' seems not to be used.
ERROR(54): '<=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(56): Expecting type int in position 3 in range of for statement but got type bool.
WARNING(56): The variable 'i' seems not to be used.
ERROR(58): Expecting type int in position 3 in range of for statement but got type void.
WARNING(58): The variable 'i' seems not to be used.
ERROR(60): Symbol 'zog' is not declared.
WARNING(60): The variable 'i' seems not to be used.
ERROR(62): Symbol 'zog' is not declared.
WARNING(62): The variable 'i' seems not to be used.
Number of warnings: 8
Number of errors: 24

==============
==============
./c- -P basicAll5.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(11): The parameter 'x' seems not to be used.
ERROR(13): Symbol 'x' is already declared at line 11.
ERROR(17): Symbol 'cat' is not declared.
ERROR(19): Function 'dog' at line 11 is expecting to return type char but returns type int.
WARNING(19): Variable 'b' may be uninitialized when used here.
ERROR(22): Symbol 'dog' is already declared at line 11.
WARNING(22): Expecting to return type int but function 'dog' has no return statement.
WARNING(22): The parameter 'x' seems not to be used.
WARNING(25): The variable 'x' seems not to be used.
WARNING(29): The parameter 'x' seems not to be used.
ERROR(31): Initializer for variable 'b' of type int is of type char
WARNING(32): The variable 'c' seems not to be used.
ERROR(33): Initializer for variable 'd' is not a constant expression.
WARNING(33): The variable 'd' seems not to be used.
ERROR(34): Initializer for variable 'e' is not a constant expression.
WARNING(34): The variable 'e' seems not to be used.
ERROR(36): Function 'cat' at line 29 is expecting to return type char but return has no value.
ERROR(39): Symbol 'cat' is already declared at line 29.
WARNING(40): The variable 'unusedGlobal' seems not to be used.
WARNING(42): The parameter 'x' seems not to be used.
WARNING(44): The variable 'unusedLocal' seems not to be used.
ERROR(45): Function 'ibex' at line 42 is expecting to return type int but returns type bool.
WARNING(48): The parameter 'y' seems not to be used.
ERROR(50): Function 'ox' at line 48 is expecting no return value, but return has a value.
WARNING(53): Expecting to return type char but function 'emu' has no return statement.
WARNING(53): The parameter 'x' seems not to be used.
WARNING(53): The parameter 'y' seems not to be used.
WARNING(53): The parameter 'z' seems not to be used.
WARNING(57): The function 'mane' seems not to be used.
WARNING(59): The variable 'yuri' seems not to be used.
ERROR(60): Symbol 'x' is already declared at line 59.
ERROR(61): Symbol 'x' is already declared at line 59.
WARNING(68): The variable 'c' seems not to be used.
ERROR(70): Symbol 'v' is not declared.
ERROR(72): Expecting Boolean test condition in if statement but got type char.
WARNING(72): Variable 'x' may be uninitialized when used here.
ERROR(73): Expecting Boolean test condition in if statement but got type char.
ERROR(74): Expecting Boolean test condition in while statement but got type char.
ERROR(75): Expecting Boolean test condition in while statement but got type void.
ERROR(75): Expecting type char in parameter 1 of call to 'ox' declared on line 48 but got type int.
WARNING(77): The variable 'z' seems not to be used.
ERROR(78): Expecting type int in position 2 in range of for statement but got type bool.
WARNING(78): The variable 'i' seems not to be used.
ERROR(79): Expecting type int in position 1 in range of for statement but got type char.
WARNING(79): The variable 'i' seems not to be used.
ERROR(80): Expecting type int in position 3 in range of for statement but got type char.
WARNING(80): The variable 'i' seems not to be used.
ERROR(82): Cannot use function 'cat' as a variable.
ERROR(83): '<=' requires operands of the same type but lhs is type char and rhs is type int.
WARNING(83): Variable 'b' may be uninitialized when used here.
ERROR(84): '+=' requires operands of type int but lhs is of type char.
ERROR(85): '-=' requires operands of type int but rhs is of type char.
ERROR(86): '>' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(89): Cannot use array as test condition in if statement.
ERROR(89): Expecting Boolean test condition in if statement but got type int.
WARNING(89): Variable 'bb' may be uninitialized when used here.
ERROR(90): Cannot use array as test condition in if statement.
ERROR(90): Expecting Boolean test condition in if statement but got type int.
ERROR(91): Cannot use array as test condition in while statement.
ERROR(91): Expecting Boolean test condition in while statement but got type int.
ERROR(93): Cannot have a break statement outside of loop.
ERROR(95): Expecting Boolean test condition in while statement but got type int.
ERROR(96): Expecting Boolean test condition in while statement but got type int.
ERROR(96): Expecting Boolean test condition in while statement but got type int.
ERROR(98): '+' requires operands of type int but lhs is of type char.
ERROR(98): The operation '+' does not work with arrays.
WARNING(98): Variable 'aa' may be uninitialized when used here.
WARNING(99): Variable 'zz' may be uninitialized when used here.
WARNING(100): Variable 'cc' may be uninitialized when used here.
ERROR(102): '=' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(103): '=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(104): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(106): '+' requires operands of type int but lhs is of type bool.
ERROR(106): '+' requires operands of type int but rhs is of type char.
ERROR(108): '*' requires operands of type int but lhs is of type char.
ERROR(108): '*' requires operands of type int but rhs is of type bool.
ERROR(110): Unary 'not' requires an operand of type bool but was given type char.
ERROR(111): '+' requires operands of type int but lhs is of type char.
ERROR(111): Unary 'not' requires an operand of type bool but was given type int.
ERROR(114): Cannot index nonarray 'x'.
ERROR(116): 'and' requires operands of type bool but lhs is of type char.
ERROR(116): 'and' requires operands of type bool but rhs is of type char.
ERROR(116): '=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(116): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(116): '*' requires operands of type int but lhs is of type char.
ERROR(116): '+' requires operands of type int but lhs is of type char.
ERROR(116): '*' requires operands of type int but rhs is of type bool.
ERROR(117): 'and' requires operands of type bool but lhs is of type char.
ERROR(117): '=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(117): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(117): '*' requires operands of type int but lhs is of type char.
ERROR(117): '+' requires operands of type int but lhs is of type char.
ERROR(117): '*' requires operands of type int but rhs is of type bool.
ERROR(117): Symbol 'y' is not declared.
ERROR(118): 'and' requires operands of type bool but lhs is of type char.
ERROR(118): 'and' requires operands of type bool but rhs is of type char.
ERROR(118): 'or' requires operands of type bool but rhs is of type int.
ERROR(118): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(118): '*' requires operands of type int but lhs is of type char.
ERROR(118): '*' requires operands of type int but rhs is of type bool.
ERROR(120): The operation 'sizeof' only works with arrays.
ERROR(121): 'and' requires operands of type bool but lhs is of type int.
ERROR(121): 'and' requires operands of type bool but rhs is of type int.
ERROR(127): Cannot use function 'cat' as a variable.
ERROR(129): Array 'aa' should be indexed by type int but got type char.
ERROR(129): Array index is the unindexed array 'aa'.
ERROR(130): Cannot index nonarray 'AA'.
ERROR(130): Symbol 'AA' is not declared.
ERROR(132): Symbol 'meerkat' is not declared.
ERROR(134): Symbol 'xyzzy' is not declared.
ERROR(135): Symbol 'meerkat' is not declared.
ERROR(136): 'and' requires operands of type bool but rhs is of type int.
ERROR(136): Symbol 'xyzzy' is not declared.
ERROR(138): '*' requires operands of type int but lhs is of type char.
ERROR(138): '+' requires operands of type int but lhs is of type char.
ERROR(138): Symbol 'flight' is not declared.
ERROR(138): Symbol 'uu' is not declared.
ERROR(138): Symbol 'y' is not declared.
ERROR(138): Unary 'chsign' requires an operand of type int but was given type bool.
ERROR(138): Unary 'not' requires an operand of type bool but was given type int.
ERROR(140): 'x' is a simple variable and cannot be called.
ERROR(142): Expecting type char in parameter 1 of call to 'dog' declared on line 11 but got type int.
ERROR(142): Too many parameters passed for function 'dog' declared on line 11.
ERROR(143): Too few parameters passed for function 'ibex' declared on line 42.
ERROR(145): Expecting type char in parameter 1 of call to 'dog' declared on line 11 but got type bool.
ERROR(147): Not expecting array in parameter 1 of call to 'cat' declared on line 29.
ERROR(148): Expecting type char in parameter 1 of call to 'cat' declared on line 29 but got type bool.
ERROR(148): Not expecting array in parameter 1 of call to 'cat' declared on line 29.
WARNING(148): Variable 'ba' may be uninitialized when used here.
ERROR(150): Expecting array in parameter 1 of call to 'ibex' declared on line 42.
ERROR(151): Expecting type char in parameter 1 of call to 'ibex' declared on line 42 but got type int.
ERROR(152): Cannot index nonarray 'ibex'.
ERROR(152): Cannot use function 'ibex' as a variable.
ERROR(154): Cannot use function 'ibex' as a variable.
ERROR(155): Cannot use function 'ibex' as a variable.
ERROR(157): Array 'aa' should be indexed by type int but got type char.
ERROR(158): Array 'aa' should be indexed by type int but got type char.
ERROR(158): Array index is the unindexed array 'zz'.
ERROR(159): Array 'aa' should be indexed by type int but got type void.
ERROR(159): Expecting type char in parameter 1 of call to 'ox' declared on line 48 but got type bool.
ERROR(160): Array 'aa' should be indexed by type int but got type char.
ERROR(161): Array 'aa' should be indexed by type int but got type bool.
ERROR(162): Cannot use function 'ox' as a variable.
ERROR(163): Cannot use function 'ibex' as a variable.
ERROR(165): Expecting type char in parameter 1 of call to 'ox' declared on line 48 but got type int.
ERROR(165): '<=' requires operands of the same type but lhs is type char and rhs is type void.
ERROR(166): Expecting type char in parameter 1 of call to 'ox' declared on line 48 but got type int.
ERROR(166): '<=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(166): '+' requires operands of type int but lhs is of type char.
ERROR(166): '+' requires operands of type int but rhs is of type void.
ERROR(167): Expecting type char in parameter 1 of call to 'cat' declared on line 29 but got type void.
ERROR(167): Expecting type char in parameter 1 of call to 'ox' declared on line 48 but got type int.
ERROR(168): Expecting type char in parameter 1 of call to 'cat' declared on line 29 but got type bool.
ERROR(169): Expecting type char in parameter 1 of call to 'cat' declared on line 29 but got type int.
ERROR(171): '<=' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(173): '<=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(173): '<=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(173): '<=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(175): 'and' requires operands of type bool but lhs is of type int.
ERROR(175): 'and' requires operands of type bool but rhs is of type int.
ERROR(175): '*' requires operands of type int but lhs is of type char.
ERROR(175): '*' requires operands of type int but rhs is of type char.
ERROR(177): 'and' requires operands of type bool but lhs is of type int.
ERROR(177): 'and' requires operands of type bool but rhs is of type char.
ERROR(177): Expecting type char in parameter 1 of call to 'emu' declared on line 53 but got type int.
ERROR(177): Expecting type char in parameter 3 of call to 'emu' declared on line 53 but got type bool.
ERROR(177): '+' requires operands of type int but lhs is of type char.
ERROR(177): Symbol 'parrot' is not declared.
ERROR(178): 'and' requires operands of type bool but lhs is of type int.
ERROR(178): 'and' requires operands of type bool but rhs is of type char.
ERROR(178): 'and' requires operands of type bool but rhs is of type char.
ERROR(178): Expecting type char in parameter 1 of call to 'emu' declared on line 53 but got type bool.
ERROR(178): Expecting type char in parameter 1 of call to 'emu' declared on line 53 but got type int.
ERROR(178): Expecting type char in parameter 2 of call to 'emu' declared on line 53 but got type bool.
ERROR(178): Expecting type char in parameter 3 of call to 'emu' declared on line 53 but got type bool.
ERROR(178): Expecting type char in parameter 3 of call to 'emu' declared on line 53 but got type bool.
ERROR(178): '*' requires operands of type int but lhs is of type char.
ERROR(178): '+' requires operands of type int but lhs is of type char.
ERROR(178): Symbol 'parrot' is not declared.
ERROR(178): Too many parameters passed for function 'emu' declared on line 53.
ERROR(182): Cannot return an array.
Number of warnings: 31
Number of errors: 151

==============
==============
./c- -P break2.c-
Func: main returns type void [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 0  Var: i of type int [line: 4]
.   .   Child: 1  Assign: <= of type int [line: 6]
.   .   .   Child: 0  Id: i of type int [line: 6]
.   .   .   Child: 1  Const 0 of type int [line: 6]
.   .   Sibling: 1  While [line: 7]
.   .   .   Child: 0  Const true of type bool [line: 7]
.   .   .   Child: 1  Compound [line: 7]
.   .   .   .   Child: 1  While [line: 8]
.   .   .   .   .   Child: 0  Const true of type bool [line: 8]
.   .   .   .   .   Child: 1  Compound [line: 8]
.   .   .   .   .   .   Child: 1  Assign: ++ of type int [line: 9]
.   .   .   .   .   .   .   Child: 0  Id: i of type int [line: 9]
.   .   .   .   .   .   Sibling: 1  Call: output of type void [line: 10]
.   .   .   .   .   .   .   Child: 0  Id: i of type int [line: 10]
.   .   .   .   .   .   Sibling: 2  If [line: 11]
.   .   .   .   .   .   .   Child: 0  Op: > of type bool [line: 11]
.   .   .   .   .   .   .   .   Child: 0  Id: i of type int [line: 11]
.   .   .   .   .   .   .   .   Child: 1  Const 4 of type int [line: 11]
.   .   .   .   .   .   .   Child: 1  Break [line: 11]
.   .   .   .   .   .   Sibling: 3  Call: outnl of type void [line: 12]
.   .   .   .   Sibling: 1  If [line: 14]
.   .   .   .   .   Child: 0  Op: > of type bool [line: 14]
.   .   .   .   .   .   Child: 0  Id: i of type int [line: 14]
.   .   .   .   .   .   Child: 1  Const 8 of type int [line: 14]
.   .   .   .   .   Child: 1  Break [line: 14]
.   .   Sibling: 2  Call: output of type void [line: 16]
.   .   .   Child: 0  Id: i of type int [line: 16]
.   .   Sibling: 3  Call: outnl of type void [line: 17]
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -P break3.c-
WARNING(4): The variable 'x' seems not to be used.
Func: main returns type void [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 0  Var: x of type int [line: 4]
.   .   Child: 1  While [line: 5]
.   .   .   Child: 0  Const true of type bool [line: 5]
.   .   .   Child: 1  For [line: 5]
.   .   .   .   Child: 0  Var: x of type int [line: 5]
.   .   .   .   Child: 1  Range [line: 5]
.   .   .   .   .   Child: 0  Const 1 of type int [line: 5]
.   .   .   .   .   Child: 1  Id: x of type int [line: 5]
.   .   .   .   Child: 2  If [line: 5]
.   .   .   .   .   Child: 0  Op: > of type bool [line: 5]
.   .   .   .   .   .   Child: 0  Id: x of type int [line: 5]
.   .   .   .   .   .   Child: 1  Const 1 of type int [line: 5]
.   .   .   .   .   Child: 1  Break [line: 5]
.   .   .   .   .   Child: 2  Break [line: 5]
Number of warnings: 1
Number of errors: 0

==============
==============
./c- -P break4.c-
ERROR(10): Cannot have a break statement outside of loop.
Number of warnings: 0
Number of errors: 1

==============
==============
./c- -P break.c-
Func: main returns type void [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 1  While [line: 4]
.   .   .   Child: 0  Const true of type bool [line: 4]
.   .   .   Child: 1  Compound [line: 4]
.   .   .   .   Child: 1  Const 666 of type int [line: 5]
.   .   .   .   Sibling: 1  Break [line: 6]
.   .   .   .   Sibling: 2  Const 777 of type int [line: 7]
.   .   .   .   Sibling: 3  Break [line: 8]
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -P call2.c-
Func: three returns type void [line: 2]
.   Child: 0  Parm: z is array of type int [line: 2]
.   Child: 1  Compound [line: 2]
.   .   Child: 1  Call: output of type void [line: 3]
.   .   .   Child: 0  Op: [ of type int [line: 3]
.   .   .   .   Child: 0  Id: z of type int [line: 3]
.   .   .   .   Child: 1  Const 7 of type int [line: 3]
.   .   Sibling: 1  Assign: <= of type int [line: 4]
.   .   .   Child: 0  Op: [ of type int [line: 4]
.   .   .   .   Child: 0  Id: z of type int [line: 4]
.   .   .   .   Child: 1  Const 7 of type int [line: 4]
.   .   .   Child: 1  Const 666 of type int [line: 4]
.   .   Sibling: 2  Call: outnl of type void [line: 5]
Sibling: 1  Func: two returns type void [line: 9]
.   Child: 0  Parm: y is array of type int [line: 9]
.   Child: 1  Compound [line: 9]
.   .   Child: 1  Call: output of type void [line: 10]
.   .   .   Child: 0  Op: [ of type int [line: 10]
.   .   .   .   Child: 0  Id: y of type int [line: 10]
.   .   .   .   Child: 1  Const 7 of type int [line: 10]
.   .   Sibling: 1  Call: three of type void [line: 11]
.   .   .   Child: 0  Id: y of type int [line: 11]
.   .   Sibling: 2  Call: output of type void [line: 12]
.   .   .   Child: 0  Op: [ of type int [line: 12]
.   .   .   .   Child: 0  Id: y of type int [line: 12]
.   .   .   .   Child: 1  Const 7 of type int [line: 12]
Sibling: 2  Func: one returns type void [line: 16]
.   Child: 0  Parm: x is array of type int [line: 16]
.   Child: 1  Compound [line: 16]
.   .   Child: 1  Call: output of type void [line: 17]
.   .   .   Child: 0  Op: [ of type int [line: 17]
.   .   .   .   Child: 0  Id: x of type int [line: 17]
.   .   .   .   Child: 1  Const 7 of type int [line: 17]
.   .   Sibling: 1  Call: two of type void [line: 18]
.   .   .   Child: 0  Id: x of type int [line: 18]
.   .   Sibling: 2  Call: output of type void [line: 19]
.   .   .   Child: 0  Op: [ of type int [line: 19]
.   .   .   .   Child: 0  Id: x of type int [line: 19]
.   .   .   .   Child: 1  Const 7 of type int [line: 19]
Sibling: 3  Func: main returns type void [line: 23]
.   Child: 1  Compound [line: 24]
.   .   Child: 0  Var: w is array of type int [line: 25]
.   .   Child: 1  Assign: <= of type int [line: 27]
.   .   .   Child: 0  Op: [ of type int [line: 27]
.   .   .   .   Child: 0  Id: w of type int [line: 27]
.   .   .   .   Child: 1  Const 7 of type int [line: 27]
.   .   .   Child: 1  Const 42 of type int [line: 27]
.   .   Sibling: 1  Call: one of type void [line: 28]
.   .   .   Child: 0  Id: w of type int [line: 28]
.   .   Sibling: 2  Call: output of type void [line: 29]
.   .   .   Child: 0  Op: [ of type int [line: 29]
.   .   .   .   Child: 0  Id: w of type int [line: 29]
.   .   .   .   Child: 1  Const 7 of type int [line: 29]
.   .   Sibling: 3  Call: outnl of type void [line: 30]
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -P call3.c-
Func: three returns type int [line: 2]
.   Child: 0  Parm: z is array of type int [line: 2]
.   Child: 1  Compound [line: 2]
.   .   Child: 1  Call: output of type void [line: 3]
.   .   .   Child: 0  Op: [ of type int [line: 3]
.   .   .   .   Child: 0  Id: z of type int [line: 3]
.   .   .   .   Child: 1  Const 7 of type int [line: 3]
.   .   Sibling: 1  Assign: <= of type int [line: 4]
.   .   .   Child: 0  Op: [ of type int [line: 4]
.   .   .   .   Child: 0  Id: z of type int [line: 4]
.   .   .   .   Child: 1  Const 7 of type int [line: 4]
.   .   .   Child: 1  Const 666 of type int [line: 4]
.   .   Sibling: 2  Call: outnl of type void [line: 5]
.   .   Sibling: 3  Return [line: 7]
.   .   .   Child: 0  Op: [ of type int [line: 7]
.   .   .   .   Child: 0  Id: z of type int [line: 7]
.   .   .   .   Child: 1  Const 7 of type int [line: 7]
Sibling: 1  Func: two returns type int [line: 11]
.   Child: 0  Parm: y is array of type int [line: 11]
.   Child: 1  Compound [line: 11]
.   .   Child: 1  Call: output of type void [line: 12]
.   .   .   Child: 0  Op: [ of type int [line: 12]
.   .   .   .   Child: 0  Id: y of type int [line: 12]
.   .   .   .   Child: 1  Const 7 of type int [line: 12]
.   .   Sibling: 1  Call: three of type int [line: 13]
.   .   .   Child: 0  Id: y of type int [line: 13]
.   .   Sibling: 2  Call: output of type void [line: 14]
.   .   .   Child: 0  Op: [ of type int [line: 14]
.   .   .   .   Child: 0  Id: y of type int [line: 14]
.   .   .   .   Child: 1  Const 7 of type int [line: 14]
.   .   Sibling: 3  Return [line: 16]
.   .   .   Child: 0  Op: [ of type int [line: 16]
.   .   .   .   Child: 0  Id: y of type int [line: 16]
.   .   .   .   Child: 1  Const 7 of type int [line: 16]
Sibling: 2  Func: one returns type int [line: 20]
.   Child: 0  Parm: x is array of type int [line: 20]
.   Child: 1  Compound [line: 20]
.   .   Child: 1  Call: output of type void [line: 21]
.   .   .   Child: 0  Op: [ of type int [line: 21]
.   .   .   .   Child: 0  Id: x of type int [line: 21]
.   .   .   .   Child: 1  Const 7 of type int [line: 21]
.   .   Sibling: 1  Call: two of type int [line: 22]
.   .   .   Child: 0  Id: x of type int [line: 22]
.   .   Sibling: 2  Call: output of type void [line: 23]
.   .   .   Child: 0  Op: [ of type int [line: 23]
.   .   .   .   Child: 0  Id: x of type int [line: 23]
.   .   .   .   Child: 1  Const 7 of type int [line: 23]
.   .   Sibling: 3  Return [line: 25]
.   .   .   Child: 0  Op: [ of type int [line: 25]
.   .   .   .   Child: 0  Id: x of type int [line: 25]
.   .   .   .   Child: 1  Const 7 of type int [line: 25]
Sibling: 3  Func: main returns type void [line: 29]
.   Child: 1  Compound [line: 30]
.   .   Child: 0  Var: w is array of type int [line: 31]
.   .   Child: 1  Assign: <= of type int [line: 33]
.   .   .   Child: 0  Op: [ of type int [line: 33]
.   .   .   .   Child: 0  Id: w of type int [line: 33]
.   .   .   .   Child: 1  Const 7 of type int [line: 33]
.   .   .   Child: 1  Const 42 of type int [line: 33]
.   .   Sibling: 1  Call: output of type void [line: 34]
.   .   .   Child: 0  Call: one of type int [line: 34]
.   .   .   .   Child: 0  Id: w of type int [line: 34]
.   .   Sibling: 2  Call: output of type void [line: 35]
.   .   .   Child: 0  Op: [ of type int [line: 35]
.   .   .   .   Child: 0  Id: w of type int [line: 35]
.   .   .   .   Child: 1  Const 7 of type int [line: 35]
.   .   Sibling: 3  Call: outnl of type void [line: 36]
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -P call4.c-
WARNING(2): Expecting to return type int but function 'showInt' has no return statement.
WARNING(8): Expecting to return type int but function 'showIntArray' has no return statement.
WARNING(19): Expecting to return type int but function 'showBool' has no return statement.
WARNING(30): The function 'magic' seems not to be used.
Func: showInt returns type int [line: 2]
.   Child: 0  Parm: x of type int [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 1  Call: output of type void [line: 4]
.   .   .   Child: 0  Id: x of type int [line: 4]
.   .   Sibling: 1  Call: outnl of type void [line: 5]
Sibling: 1  Func: showIntArray returns type int [line: 8]
.   Child: 0  Parm: x is array of type int [line: 8]
.   Sibling: 1  Parm: size of type int [line: 8]
.   Child: 1  Compound [line: 9]
.   .   Child: 0  Var: i of type int [line: 10]
.   .   Child: 1  Assign: <= of type int [line: 11]
.   .   .   Child: 0  Id: i of type int [line: 11]
.   .   .   Child: 1  Const 0 of type int [line: 11]
.   .   Sibling: 1  While [line: 12]
.   .   .   Child: 0  Op: < of type bool [line: 12]
.   .   .   .   Child: 0  Id: i of type int [line: 12]
.   .   .   .   Child: 1  Id: size of type int [line: 12]
.   .   .   Child: 1  Compound [line: 12]
.   .   .   .   Child: 1  Call: output of type void [line: 13]
.   .   .   .   .   Child: 0  Op: [ of type int [line: 13]
.   .   .   .   .   .   Child: 0  Id: x of type int [line: 13]
.   .   .   .   .   .   Child: 1  Id: i of type int [line: 13]
.   .   .   .   Sibling: 1  Assign: <= of type int [line: 14]
.   .   .   .   .   Child: 0  Id: i of type int [line: 14]
.   .   .   .   .   Child: 1  Op: + of type int [line: 14]
.   .   .   .   .   .   Child: 0  Id: i of type int [line: 14]
.   .   .   .   .   .   Child: 1  Const 1 of type int [line: 14]
.   .   Sibling: 2  Call: outnl of type void [line: 16]
Sibling: 2  Func: showBool returns type int [line: 19]
.   Child: 0  Parm: x of type bool [line: 19]
.   Child: 1  Compound [line: 20]
.   .   Child: 1  Call: outputb of type void [line: 21]
.   .   .   Child: 0  Id: x of type bool [line: 21]
.   .   Sibling: 1  Call: outnl of type void [line: 22]
Sibling: 3  Func: truth returns type bool [line: 25]
.   Child: 1  Compound [line: 26]
.   .   Child: 1  Return [line: 27]
.   .   .   Child: 0  Const true of type bool [line: 27]
Sibling: 4  Func: magic returns type int [line: 30]
.   Child: 1  Compound [line: 31]
.   .   Child: 1  Return [line: 32]
.   .   .   Child: 0  Const 666 of type int [line: 32]
Sibling: 5  Func: sqr returns type int [line: 35]
.   Child: 0  Parm: x of type int [line: 35]
.   Child: 1  Compound [line: 36]
.   .   Child: 1  Return [line: 37]
.   .   .   Child: 0  Op: * of type int [line: 37]
.   .   .   .   Child: 0  Id: x of type int [line: 37]
.   .   .   .   Child: 1  Id: x of type int [line: 37]
Sibling: 6  Func: add returns type int [line: 40]
.   Child: 0  Parm: x of type int [line: 40]
.   Sibling: 1  Parm: y of type int [line: 40]
.   Child: 1  Compound [line: 41]
.   .   Child: 1  Return [line: 42]
.   .   .   Child: 0  Op: + of type int [line: 42]
.   .   .   .   Child: 0  Id: x of type int [line: 42]
.   .   .   .   Child: 1  Id: y of type int [line: 42]
Sibling: 7  Func: mul returns type int [line: 45]
.   Child: 0  Parm: x of type int [line: 45]
.   Sibling: 1  Parm: y of type int [line: 45]
.   Child: 1  Compound [line: 46]
.   .   Child: 1  Return [line: 47]
.   .   .   Child: 0  Op: * of type int [line: 47]
.   .   .   .   Child: 0  Id: x of type int [line: 47]
.   .   .   .   Child: 1  Id: y of type int [line: 47]
Sibling: 8  Var: g of type int [line: 50]
Sibling: 9  Func: caller returns type void [line: 52]
.   Child: 0  Parm: x of type int [line: 52]
.   Sibling: 1  Parm: y is array of type int [line: 52]
.   Child: 1  Compound [line: 53]
.   .   Child: 0  Var: z of type int [line: 54]
.   .   Sibling: 1  Var: a of type int [line: 55]
.   .   Child: 1  Assign: <= of type int [line: 57]
.   .   .   Child: 0  Id: a of type int [line: 57]
.   .   .   Child: 1  Const 666 of type int [line: 57]
.   .   Sibling: 1  Assign: <= of type int [line: 58]
.   .   .   Child: 0  Id: g of type int [line: 58]
.   .   .   Child: 1  Const 777 of type int [line: 58]
.   .   Sibling: 2  Assign: <= of type int [line: 60]
.   .   .   Child: 0  Id: z of type int [line: 60]
.   .   .   Child: 1  Call: sqr of type int [line: 60]
.   .   .   .   Child: 0  Id: x of type int [line: 60]
.   .   Sibling: 3  Call: output of type void [line: 61]
.   .   .   Child: 0  Id: z of type int [line: 61]
.   .   Sibling: 4  Call: outnl of type void [line: 62]
.   .   Sibling: 5  Assign: <= of type int [line: 64]
.   .   .   Child: 0  Id: z of type int [line: 64]
.   .   .   Child: 1  Call: sqr of type int [line: 64]
.   .   .   .   Child: 0  Op: [ of type int [line: 64]
.   .   .   .   .   Child: 0  Id: y of type int [line: 64]
.   .   .   .   .   Child: 1  Const 7 of type int [line: 64]
.   .   Sibling: 6  Call: output of type void [line: 65]
.   .   .   Child: 0  Id: z of type int [line: 65]
.   .   Sibling: 7  Call: outnl of type void [line: 66]
.   .   Sibling: 8  Assign: <= of type int [line: 68]
.   .   .   Child: 0  Id: z of type int [line: 68]
.   .   .   Child: 1  Call: sqr of type int [line: 68]
.   .   .   .   Child: 0  Id: a of type int [line: 68]
.   .   Sibling: 9  Call: output of type void [line: 69]
.   .   .   Child: 0  Id: z of type int [line: 69]
.   .   Sibling: 10  Call: outnl of type void [line: 70]
.   .   Sibling: 11  Assign: <= of type int [line: 72]
.   .   .   Child: 0  Id: z of type int [line: 72]
.   .   .   Child: 1  Call: sqr of type int [line: 72]
.   .   .   .   Child: 0  Id: g of type int [line: 72]
.   .   Sibling: 12  Call: output of type void [line: 73]
.   .   .   Child: 0  Id: z of type int [line: 73]
.   .   Sibling: 13  Call: outnl of type void [line: 74]
Sibling: 10  Func: swap returns type void [line: 77]
.   Child: 0  Parm: x is array of type int [line: 77]
.   Sibling: 1  Parm: z1 of type int [line: 77]
.   Sibling: 2  Parm: z2 of type int [line: 77]
.   Child: 1  Compound [line: 78]
.   .   Child: 0  Var: tmp of type int [line: 79]
.   .   Child: 1  Assign: <= of type int [line: 80]
.   .   .   Child: 0  Id: tmp of type int [line: 80]
.   .   .   Child: 1  Op: [ of type int [line: 80]
.   .   .   .   Child: 0  Id: x of type int [line: 80]
.   .   .   .   Child: 1  Id: z1 of type int [line: 80]
.   .   Sibling: 1  Assign: <= of type int [line: 81]
.   .   .   Child: 0  Op: [ of type int [line: 81]
.   .   .   .   Child: 0  Id: x of type int [line: 81]
.   .   .   .   Child: 1  Id: z1 of type int [line: 81]
.   .   .   Child: 1  Op: [ of type int [line: 81]
.   .   .   .   Child: 0  Id: x of type int [line: 81]
.   .   .   .   Child: 1  Id: z2 of type int [line: 81]
.   .   Sibling: 2  Assign: <= of type int [line: 82]
.   .   .   Child: 0  Op: [ of type int [line: 82]
.   .   .   .   Child: 0  Id: x of type int [line: 82]
.   .   .   .   Child: 1  Id: z2 of type int [line: 82]
.   .   .   Child: 1  Id: tmp of type int [line: 82]
Sibling: 11  Func: main returns type void [line: 85]
.   Child: 1  Compound [line: 86]
.   .   Child: 0  Var: p of type int [line: 87]
.   .   Sibling: 1  Var: q of type int [line: 87]
.   .   Sibling: 2  Var: r is array of type int [line: 87]
.   .   Sibling: 3  Var: s is array of type int [line: 87]
.   .   Child: 1  Assign: <= of type int [line: 89]
.   .   .   Child: 0  Id: p of type int [line: 89]
.   .   .   Child: 1  Const 0 of type int [line: 89]
.   .   Sibling: 1  While [line: 90]
.   .   .   Child: 0  Op: < of type bool [line: 90]
.   .   .   .   Child: 0  Id: p of type int [line: 90]
.   .   .   .   Child: 1  Const 10 of type int [line: 90]
.   .   .   Child: 1  Compound [line: 90]
.   .   .   .   Child: 1  Assign: <= of type int [line: 91]
.   .   .   .   .   Child: 0  Op: [ of type int [line: 91]
.   .   .   .   .   .   Child: 0  Id: r of type int [line: 91]
.   .   .   .   .   .   Child: 1  Id: p of type int [line: 91]
.   .   .   .   .   Child: 1  Id: p of type int [line: 91]
.   .   .   .   Sibling: 1  Assign: ++ of type int [line: 92]
.   .   .   .   .   Child: 0  Id: p of type int [line: 92]
.   .   Sibling: 2  Assign: <= of type int [line: 95]
.   .   .   Child: 0  Id: p of type int [line: 95]
.   .   .   Child: 1  Const 111 of type int [line: 95]
.   .   Sibling: 3  Assign: <= of type int [line: 96]
.   .   .   Child: 0  Id: q of type int [line: 96]
.   .   .   Child: 1  Const 222 of type int [line: 96]
.   .   Sibling: 4  Assign: <= of type int [line: 97]
.   .   .   Child: 0  Op: [ of type int [line: 97]
.   .   .   .   Child: 0  Id: r of type int [line: 97]
.   .   .   .   Child: 1  Const 7 of type int [line: 97]
.   .   .   Child: 1  Const 333 of type int [line: 97]
.   .   Sibling: 5  Assign: <= of type int [line: 98]
.   .   .   Child: 0  Op: [ of type int [line: 98]
.   .   .   .   Child: 0  Id: s of type int [line: 98]
.   .   .   .   Child: 1  Const 7 of type int [line: 98]
.   .   .   Child: 1  Const 444 of type int [line: 98]
.   .   Sibling: 6  Call: showInt of type int [line: 100]
.   .   .   Child: 0  Id: p of type int [line: 100]
.   .   Sibling: 7  Call: showIntArray of type int [line: 102]
.   .   .   Child: 0  Id: r of type int [line: 102]
.   .   .   Sibling: 1  Const 10 of type int [line: 102]
.   .   Sibling: 8  Call: showBool of type int [line: 104]
.   .   .   Child: 0  Call: truth of type bool [line: 104]
.   .   Sibling: 9  Call: output of type void [line: 106]
.   .   .   Child: 0  Call: showInt of type int [line: 106]
.   .   .   .   Child: 0  Id: p of type int [line: 106]
.   .   Sibling: 10  Call: output of type void [line: 107]
.   .   .   Child: 0  Call: showBool of type int [line: 107]
.   .   .   .   Child: 0  Call: truth of type bool [line: 107]
.   .   Sibling: 11  Call: caller of type void [line: 109]
.   .   .   Child: 0  Id: p of type int [line: 109]
.   .   .   Sibling: 1  Id: r of type int [line: 109]
.   .   Sibling: 12  Call: output of type void [line: 111]
.   .   .   Child: 0  Call: add of type int [line: 111]
.   .   .   .   Child: 0  Call: add of type int [line: 111]
.   .   .   .   .   Child: 0  Id: p of type int [line: 111]
.   .   .   .   .   Sibling: 1  Id: q of type int [line: 111]
.   .   .   .   Sibling: 1  Call: mul of type int [line: 111]
.   .   .   .   .   Child: 0  Id: p of type int [line: 111]
.   .   .   .   .   Sibling: 1  Id: q of type int [line: 111]
.   .   Sibling: 13  Call: outnl of type void [line: 112]
.   .   Sibling: 14  Assign: <= of type int [line: 113]
.   .   .   Child: 0  Op: [ of type int [line: 113]
.   .   .   .   Child: 0  Id: r of type int [line: 113]
.   .   .   .   Child: 1  Const 9 of type int [line: 113]
.   .   .   Child: 1  Const 555 of type int [line: 113]
.   .   Sibling: 15  Call: swap of type void [line: 114]
.   .   .   Child: 0  Id: r of type int [line: 114]
.   .   .   Sibling: 1  Const 7 of type int [line: 114]
.   .   .   Sibling: 2  Const 9 of type int [line: 114]
.   .   Sibling: 16  Call: output of type void [line: 115]
.   .   .   Child: 0  Op: [ of type int [line: 115]
.   .   .   .   Child: 0  Id: r of type int [line: 115]
.   .   .   .   Child: 1  Const 9 of type int [line: 115]
.   .   Sibling: 17  Call: outnl of type void [line: 116]
.   .   Sibling: 18  Call: output of type void [line: 117]
.   .   .   Child: 0  Op: * of type int [line: 117]
.   .   .   .   Child: 0  Const 2 of type int [line: 117]
.   .   .   .   Child: 1  Call: add of type int [line: 117]
.   .   .   .   .   Child: 0  Op: * of type int [line: 117]
.   .   .   .   .   .   Child: 0  Call: add of type int [line: 117]
.   .   .   .   .   .   .   Child: 0  Op: * of type int [line: 117]
.   .   .   .   .   .   .   .   Child: 0  Const 3 of type int [line: 117]
.   .   .   .   .   .   .   .   Child: 1  Const 4 of type int [line: 117]
.   .   .   .   .   .   .   Sibling: 1  Op: * of type int [line: 117]
.   .   .   .   .   .   .   .   Child: 0  Const 5 of type int [line: 117]
.   .   .   .   .   .   .   .   Child: 1  Const 6 of type int [line: 117]
.   .   .   .   .   .   Child: 1  Const 7 of type int [line: 117]
.   .   .   .   .   Sibling: 1  Op: * of type int [line: 117]
.   .   .   .   .   .   Child: 0  Call: add of type int [line: 117]
.   .   .   .   .   .   .   Child: 0  Op: * of type int [line: 117]
.   .   .   .   .   .   .   .   Child: 0  Const 9 of type int [line: 117]
.   .   .   .   .   .   .   .   Child: 1  Const 10 of type int [line: 117]
.   .   .   .   .   .   .   Sibling: 1  Op: * of type int [line: 117]
.   .   .   .   .   .   .   .   Child: 0  Const 11 of type int [line: 117]
.   .   .   .   .   .   .   .   Child: 1  Const 12 of type int [line: 117]
.   .   .   .   .   .   Child: 1  Const 13 of type int [line: 117]
.   .   Sibling: 19  Call: outnl of type void [line: 118]
Number of warnings: 4
Number of errors: 0

==============
==============
./c- -P call.c-
Func: cheyenne returns type void [line: 2]
.   Child: 0  Parm: a of type int [line: 2]
.   Sibling: 1  Parm: b of type bool [line: 2]
.   Sibling: 2  Parm: c of type char [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 1  Call: output of type void [line: 4]
.   .   .   Child: 0  Id: a of type int [line: 4]
.   .   Sibling: 1  Call: outputb of type void [line: 5]
.   .   .   Child: 0  Id: b of type bool [line: 5]
.   .   Sibling: 2  Call: outputc of type void [line: 6]
.   .   .   Child: 0  Id: c of type char [line: 6]
.   .   Sibling: 3  Call: outnl of type void [line: 7]
Sibling: 1  Func: sioux returns type void [line: 11]
.   Child: 0  Parm: a is array of type int [line: 11]
.   Sibling: 1  Parm: b is array of type bool [line: 11]
.   Sibling: 2  Parm: c is array of type char [line: 11]
.   Child: 1  Compound [line: 12]
.   .   Child: 1  Call: output of type void [line: 13]
.   .   .   Child: 0  Op: [ of type int [line: 13]
.   .   .   .   Child: 0  Id: a of type int [line: 13]
.   .   .   .   Child: 1  Const 1 of type int [line: 13]
.   .   Sibling: 1  Call: outputb of type void [line: 14]
.   .   .   Child: 0  Op: [ of type bool [line: 14]
.   .   .   .   Child: 0  Id: b of type bool [line: 14]
.   .   .   .   Child: 1  Const 2 of type int [line: 14]
.   .   Sibling: 2  Call: outputc of type void [line: 15]
.   .   .   Child: 0  Op: [ of type char [line: 15]
.   .   .   .   Child: 0  Id: c of type char [line: 15]
.   .   .   .   Child: 1  Const 3 of type int [line: 15]
.   .   Sibling: 3  Call: outnl of type void [line: 16]
Sibling: 2  Func: comanche returns type void [line: 20]
.   Child: 0  Parm: z is array of type int [line: 20]
.   Child: 1  Compound [line: 21]
.   .   Child: 0  Var: b is array of type bool [line: 22]
.   .   Sibling: 1  Var: c is array of type char [line: 23]
.   .   Child: 1  Assign: <= of type bool [line: 25]
.   .   .   Child: 0  Op: [ of type bool [line: 25]
.   .   .   .   Child: 0  Id: b of type bool [line: 25]
.   .   .   .   Child: 1  Const 2 of type int [line: 25]
.   .   .   Child: 1  Const true of type bool [line: 25]
.   .   Sibling: 1  Assign: <= of type char [line: 26]
.   .   .   Child: 0  Op: [ of type char [line: 26]
.   .   .   .   Child: 0  Id: c of type char [line: 26]
.   .   .   .   Child: 1  Const 3 of type int [line: 26]
.   .   .   Child: 1  Const 'z'  of type char [line: 26]
.   .   Sibling: 2  Call: sioux of type void [line: 27]
.   .   .   Child: 0  Id: z of type int [line: 27]
.   .   .   Sibling: 1  Id: b of type bool [line: 27]
.   .   .   Sibling: 2  Id: c of type char [line: 27]
Sibling: 3  Var: ga is array of type int [line: 32]
Sibling: 4  Var: gb is array of type bool [line: 33]
Sibling: 5  Var: gc is array of type char [line: 34]
Sibling: 6  Func: main returns type void [line: 36]
.   Child: 1  Compound [line: 37]
.   .   Child: 0  Var: a is array of type int [line: 38]
.   .   Sibling: 1  Var: b is array of type bool [line: 39]
.   .   Sibling: 2  Var: c is array of type char [line: 40]
.   .   Child: 1  Assign: <= of type int [line: 42]
.   .   .   Child: 0  Op: [ of type int [line: 42]
.   .   .   .   Child: 0  Id: a of type int [line: 42]
.   .   .   .   Child: 1  Const 1 of type int [line: 42]
.   .   .   Child: 1  Const 555 of type int [line: 42]
.   .   Sibling: 1  Assign: <= of type bool [line: 43]
.   .   .   Child: 0  Op: [ of type bool [line: 43]
.   .   .   .   Child: 0  Id: b of type bool [line: 43]
.   .   .   .   Child: 1  Const 2 of type int [line: 43]
.   .   .   Child: 1  Const true of type bool [line: 43]
.   .   Sibling: 2  Assign: <= of type char [line: 44]
.   .   .   Child: 0  Op: [ of type char [line: 44]
.   .   .   .   Child: 0  Id: c of type char [line: 44]
.   .   .   .   Child: 1  Const 3 of type int [line: 44]
.   .   .   Child: 1  Const 'z'  of type char [line: 44]
.   .   Sibling: 3  Call: cheyenne of type void [line: 45]
.   .   .   Child: 0  Const 666 of type int [line: 45]
.   .   .   Sibling: 1  Const true of type bool [line: 45]
.   .   .   Sibling: 2  Const 'c'  of type char [line: 45]
.   .   Sibling: 4  Call: cheyenne of type void [line: 46]
.   .   .   Child: 0  Const 777 of type int [line: 46]
.   .   .   Sibling: 1  Const false of type bool [line: 46]
.   .   .   Sibling: 2  Const 'd'  of type char [line: 46]
.   .   Sibling: 5  Call: sioux of type void [line: 47]
.   .   .   Child: 0  Id: a of type int [line: 47]
.   .   .   Sibling: 1  Id: b of type bool [line: 47]
.   .   .   Sibling: 2  Id: c of type char [line: 47]
.   .   Sibling: 6  Call: comanche of type void [line: 48]
.   .   .   Child: 0  Id: a of type int [line: 48]
.   .   Sibling: 7  Assign: <= of type int [line: 50]
.   .   .   Child: 0  Op: [ of type int [line: 50]
.   .   .   .   Child: 0  Id: ga of type int [line: 50]
.   .   .   .   Child: 1  Const 1 of type int [line: 50]
.   .   .   Child: 1  Const 888 of type int [line: 50]
.   .   Sibling: 8  Assign: <= of type bool [line: 51]
.   .   .   Child: 0  Op: [ of type bool [line: 51]
.   .   .   .   Child: 0  Id: gb of type bool [line: 51]
.   .   .   .   Child: 1  Const 2 of type int [line: 51]
.   .   .   Child: 1  Const false of type bool [line: 51]
.   .   Sibling: 9  Assign: <= of type char [line: 52]
.   .   .   Child: 0  Op: [ of type char [line: 52]
.   .   .   .   Child: 0  Id: gc of type char [line: 52]
.   .   .   .   Child: 1  Const 3 of type int [line: 52]
.   .   .   Child: 1  Const 'g'  of type char [line: 52]
.   .   Sibling: 10  Call: sioux of type void [line: 53]
.   .   .   Child: 0  Id: ga of type int [line: 53]
.   .   .   Sibling: 1  Id: gb of type bool [line: 53]
.   .   .   Sibling: 2  Id: gc of type char [line: 53]
.   .   Sibling: 11  Call: comanche of type void [line: 54]
.   .   .   Child: 0  Id: ga of type int [line: 54]
.   .   Sibling: 12  Compound [line: 56]
.   .   .   Child: 0  Var: ga is array of type int [line: 57]
.   .   .   Sibling: 1  Var: gb is array of type bool [line: 58]
.   .   .   Sibling: 2  Var: gc is array of type char [line: 59]
.   .   .   Child: 1  Assign: <= of type int [line: 60]
.   .   .   .   Child: 0  Op: [ of type int [line: 60]
.   .   .   .   .   Child: 0  Id: ga of type int [line: 60]
.   .   .   .   .   Child: 1  Const 1 of type int [line: 60]
.   .   .   .   Child: 1  Const 999 of type int [line: 60]
.   .   .   Sibling: 1  Assign: <= of type bool [line: 61]
.   .   .   .   Child: 0  Op: [ of type bool [line: 61]
.   .   .   .   .   Child: 0  Id: gb of type bool [line: 61]
.   .   .   .   .   Child: 1  Const 2 of type int [line: 61]
.   .   .   .   Child: 1  Const true of type bool [line: 61]
.   .   .   Sibling: 2  Assign: <= of type char [line: 62]
.   .   .   .   Child: 0  Op: [ of type char [line: 62]
.   .   .   .   .   Child: 0  Id: gc of type char [line: 62]
.   .   .   .   .   Child: 1  Const 3 of type int [line: 62]
.   .   .   .   Child: 1  Const 's'  of type char [line: 62]
.   .   .   Sibling: 3  Call: sioux of type void [line: 64]
.   .   .   .   Child: 0  Id: ga of type int [line: 64]
.   .   .   .   Sibling: 1  Id: gb of type bool [line: 64]
.   .   .   .   Sibling: 2  Id: gc of type char [line: 64]
.   .   .   Sibling: 4  Call: comanche of type void [line: 65]
.   .   .   .   Child: 0  Id: ga of type int [line: 65]
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -P callerr.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
ERROR(8): Function 'ella' at line 6 is expecting no return value, but return has a value.
ERROR(16): Symbol 'lyra' is not declared.
ERROR(18): Expecting type int in parameter 1 of call to 'ella' declared on line 6 but got type void.
ERROR(20): Too many parameters passed for function 'dory' declared on line 1.
ERROR(21): Too many parameters passed for function 'dory' declared on line 1.
ERROR(22): Symbol 'lyra' is not declared.
ERROR(23): Symbol 'lyra' is not declared.
ERROR(23): Too many parameters passed for function 'dory' declared on line 1.
ERROR(27): '<=' requires operands of the same type but lhs is type int and rhs is type void.
Number of warnings: 0
Number of errors: 10

==============
==============
./c- -P compfunc.c-
WARNING(3): The function 'elk' seems not to be used.
ERROR(4): Symbol 'x' is already declared at line 3.
WARNING(11): The function 'fox' seems not to be used.
WARNING(19): The function 'gnu' seems not to be used.
WARNING(26): The function 'hog' seems not to be used.
WARNING(26): The parameter 'x' seems not to be used.
Number of warnings: 5
Number of errors: 1

==============
==============
./c- -P constants.c-
Func: main returns type void [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 1  Call: output of type void [line: 4]
.   .   .   Child: 0  Const 111 of type int [line: 4]
.   .   Sibling: 1  Call: outputb of type void [line: 5]
.   .   .   Child: 0  Const true of type bool [line: 5]
.   .   Sibling: 2  Call: outputb of type void [line: 6]
.   .   .   Child: 0  Const false of type bool [line: 6]
.   .   Sibling: 3  Call: outputc of type void [line: 7]
.   .   .   Child: 0  Const 'x'  of type char [line: 7]
.   .   Sibling: 4  Call: outnl of type void [line: 8]
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -P control2.c-
Func: main returns type void [line: 1]
.   Child: 1  Compound [line: 1]
.   .   Child: 0  Var: x of type bool [line: 2]
.   .   Sibling: 1  Var: y of type bool [line: 2]
.   .   Child: 1  Assign: <= of type bool [line: 4]
.   .   .   Child: 0  Id: x of type bool [line: 4]
.   .   .   Child: 1  Const true of type bool [line: 4]
.   .   Sibling: 1  Assign: <= of type bool [line: 5]
.   .   .   Child: 0  Id: y of type bool [line: 5]
.   .   .   Child: 1  Const false of type bool [line: 5]
.   .   Sibling: 2  If [line: 7]
.   .   .   Child: 0  Id: x of type bool [line: 7]
.   .   .   Child: 1  Const 111 of type int [line: 7]
.   .   Sibling: 3  If [line: 9]
.   .   .   Child: 0  Id: y of type bool [line: 9]
.   .   .   Child: 1  Const 222 of type int [line: 9]
.   .   .   Child: 2  Const 333 of type int [line: 10]
.   .   Sibling: 4  If [line: 12]
.   .   .   Child: 0  Id: x of type bool [line: 12]
.   .   .   Child: 1  If [line: 12]
.   .   .   .   Child: 0  Id: y of type bool [line: 12]
.   .   .   .   Child: 1  Const 444 of type int [line: 12]
.   .   .   .   Child: 2  Const 555 of type int [line: 13]
.   .   Sibling: 5  While [line: 15]
.   .   .   Child: 0  Id: x of type bool [line: 15]
.   .   .   Child: 1  Const 666 of type int [line: 15]
.   .   Sibling: 6  While [line: 17]
.   .   .   Child: 0  Id: y of type bool [line: 17]
.   .   .   Child: 1  Compound [line: 17]
.   .   .   .   Child: 1  Const 777 of type int [line: 18]
.   .   .   .   Sibling: 1  Break [line: 19]
.   .   .   .   Sibling: 2  Const 888 of type int [line: 20]
.   .   .   .   Sibling: 3  Break [line: 21]
.   .   .   .   Sibling: 4  Const 999 of type int [line: 22]
.   .   Sibling: 7  While [line: 25]
.   .   .   Child: 0  Id: x of type bool [line: 25]
.   .   .   Child: 1  Compound [line: 25]
.   .   .   .   Child: 1  Const 111 of type int [line: 26]
.   .   .   .   Sibling: 1  Break [line: 27]
.   .   .   .   Sibling: 2  While [line: 28]
.   .   .   .   .   Child: 0  Id: y of type bool [line: 28]
.   .   .   .   .   Child: 1  Compound [line: 28]
.   .   .   .   .   .   Child: 1  Const 222 of type int [line: 29]
.   .   .   .   .   .   Sibling: 1  Break [line: 30]
.   .   .   .   .   .   Sibling: 2  Const 333 of type int [line: 31]
.   .   .   .   Sibling: 3  Break [line: 33]
.   .   .   .   Sibling: 4  Const 444 of type int [line: 34]
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -P control.c-
Func: main returns type void [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 0  Var: x of type int [line: 4]
.   .   Child: 1  If [line: 6]
.   .   .   Child: 0  Op: > of type bool [line: 6]
.   .   .   .   Child: 0  Const 6 of type int [line: 6]
.   .   .   .   Child: 1  Const 3 of type int [line: 6]
.   .   .   Child: 1  Compound [line: 6]
.   .   .   .   Child: 1  Assign: <= of type int [line: 7]
.   .   .   .   .   Child: 0  Id: x of type int [line: 7]
.   .   .   .   .   Child: 1  Const 111 of type int [line: 7]
.   .   .   Child: 2  Compound [line: 9]
.   .   .   .   Child: 1  Assign: <= of type int [line: 10]
.   .   .   .   .   Child: 0  Id: x of type int [line: 10]
.   .   .   .   .   Child: 1  Const 222 of type int [line: 10]
.   .   Sibling: 1  While [line: 13]
.   .   .   Child: 0  Op: > of type bool [line: 13]
.   .   .   .   Child: 0  Const 7 of type int [line: 13]
.   .   .   .   Child: 1  Const 3 of type int [line: 13]
.   .   .   Child: 1  Compound [line: 13]
.   .   .   .   Child: 1  Assign: <= of type int [line: 14]
.   .   .   .   .   Child: 0  Id: x of type int [line: 14]
.   .   .   .   .   Child: 1  Const 333 of type int [line: 14]
.   .   .   .   Sibling: 1  If [line: 15]
.   .   .   .   .   Child: 0  Op: < of type bool [line: 15]
.   .   .   .   .   .   Child: 0  Id: x of type int [line: 15]
.   .   .   .   .   .   Child: 1  Const 9 of type int [line: 15]
.   .   .   .   .   Child: 1  Break [line: 15]
.   .   .   .   Sibling: 2  Assign: <= of type int [line: 16]
.   .   .   .   .   Child: 0  Id: x of type int [line: 16]
.   .   .   .   .   Child: 1  Const 444 of type int [line: 16]
.   .   .   .   Sibling: 3  Break [line: 17]
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -P cover.c-
WARNING(2): The variable 'fahrenheit' seems not to be used.
ERROR(19): Unary '--' requires an operand of type int but was given type char.
ERROR(20): Unary '?' requires an operand of type int but was given type char.
ERROR(22): Cannot index nonarray 'e'.
ERROR(22): Cannot index nonarray 'e'.
ERROR(22): '+' requires operands of type int but lhs is of type bool.
ERROR(22): '+' requires operands of type int but rhs is of type bool.
ERROR(23): Array 'e' should be indexed by type int but got type bool.
ERROR(23): Cannot index nonarray 'e'.
ERROR(23): Cannot index nonarray 'e'.
ERROR(26): 'and' requires operands of type bool but lhs is of type int.
ERROR(26): 'and' requires operands of type bool but rhs is of type int.
WARNING(31): The variable 'i' seems not to be used.
WARNING(31): The variable 'x' seems not to be used.
WARNING(35): The variable 'a' seems not to be used.
WARNING(36): The variable 'c' seems not to be used.
WARNING(38): The variable 'g' seems not to be used.
ERROR(39): Not expecting array in parameter 2 of call to 'fred' declared on line 6.
WARNING(39): Variable 'b' may be uninitialized when used here.
WARNING(39): Variable 'd' may be uninitialized when used here.
WARNING(39): Variable 'e' may be uninitialized when used here.
WARNING(39): Variable 'f' may be uninitialized when used here.
Number of warnings: 10
Number of errors: 12

==============
==============
./c- -P decl.c-
WARNING(4): The variable 'a' seems not to be used.
WARNING(5): The variable 'b' seems not to be used.
WARNING(6): The variable 'c' seems not to be used.
Func: main returns type void [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 0  Var: a of type int [line: 4]
.   .   Sibling: 1  Var: b of type bool [line: 5]
.   .   Sibling: 2  Var: c of type char [line: 6]
Number of warnings: 3
Number of errors: 0

==============
==============
./c- -P decllists.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(1): The variable 'x' seems not to be used.
WARNING(1): The variable 'y' seems not to be used.
WARNING(1): The variable 'z' seems not to be used.
WARNING(3): Expecting to return type int but function 'fred' has no return statement.
WARNING(3): The function 'fred' seems not to be used.
WARNING(3): The parameter 'a' seems not to be used.
WARNING(3): The parameter 'b' seems not to be used.
WARNING(3): The parameter 'c' seems not to be used.
WARNING(3): The parameter 'd' seems not to be used.
WARNING(3): The parameter 'e' seems not to be used.
WARNING(3): The parameter 'f' seems not to be used.
WARNING(3): The parameter 'g' seems not to be used.
WARNING(3): The parameter 'h' seems not to be used.
WARNING(3): The parameter 'i' seems not to be used.
WARNING(3): The parameter 'j' seems not to be used.
WARNING(3): The parameter 'k' seems not to be used.
WARNING(3): The parameter 'l' seems not to be used.
WARNING(3): The parameter 'm' seems not to be used.
WARNING(5): The variable 'aa' seems not to be used.
WARNING(5): The variable 'bb' seems not to be used.
WARNING(5): The variable 'cc' seems not to be used.
WARNING(5): The variable 'dd' seems not to be used.
WARNING(5): The variable 'ee' seems not to be used.
WARNING(5): The variable 'ff' seems not to be used.
WARNING(5): The variable 'gg' seems not to be used.
WARNING(5): The variable 'hh' seems not to be used.
WARNING(5): The variable 'ii' seems not to be used.
Number of warnings: 27
Number of errors: 1

==============
==============
./c- -P defused.c-
WARNING(2): The variable 'x' seems not to be used.
WARNING(6): The variable 'v' seems not to be used.
WARNING(6): The variable 'z' seems not to be used.
ERROR(7): Symbol 'v' is already declared at line 6.
ERROR(8): Symbol 'x' is already declared at line 6.
WARNING(12): Variable 'y' may be uninitialized when used here.
ERROR(13): Symbol 'u' is not declared.
ERROR(13): Symbol 'w' is not declared.
ERROR(16): Symbol 'bob' is already declared at line 1.
ERROR(16): Symbol 'bob' is already declared at line 16.
ERROR(17): Initializer for variable 'bob' is not a constant expression.
ERROR(17): Symbol 'bob' is already declared at line 16.
WARNING(19): The variable 'bob' seems not to be used.
ERROR(20): Symbol 'bob' is already declared at line 19.
ERROR(31): Symbol 'bob' is already declared at line 1.
ERROR(33): Symbol 'a' is already declared at line 33.
ERROR(33): Symbol 'bob' is already declared at line 1.
WARNING(33): The parameter 'a' seems not to be used.
WARNING(39): Variable 'dave' may be uninitialized when used here.
Number of warnings: 7
Number of errors: 12

==============
==============
./c- -P emptyline.c-
WARNING(4): The function 'dogs' seems not to be used.
WARNING(6): The variable 'x' seems not to be used.
WARNING(12): The variable 'x' seems not to be used.
Func: main returns type void [line: 2]
.   Child: 1  Compound [line: 2]
Sibling: 1  Func: dogs returns type void [line: 4]
.   Child: 1  Compound [line: 5]
.   .   Child: 0  Var: x of type int [line: 6]
.   .   Child: 1  If [line: 9]
.   .   .   Child: 0  Const true of type bool [line: 9]
.   .   Sibling: 1  While [line: 11]
.   .   .   Child: 0  Const true of type bool [line: 11]
.   .   Sibling: 2  For [line: 12]
.   .   .   Child: 0  Var: x of type int [line: 12]
.   .   .   Child: 1  Range [line: 12]
.   .   .   .   Child: 0  Const 1 of type int [line: 12]
.   .   .   .   Child: 1  Const 10 of type int [line: 12]
.   .   Sibling: 3  Compound [line: 13]
Number of warnings: 3
Number of errors: 0

==============
==============
./c- -P everythingS23.c-
WARNING(46): Variable 'trousers' may be uninitialized when used here.
WARNING(54): Expecting to return type bool but function 'penguin' has no return statement.
WARNING(54): The function 'penguin' seems not to be used.
WARNING(54): The parameter 'cheese' seems not to be used.
WARNING(54): The parameter 'launch' seems not to be used.
WARNING(58): The variable 'c' seems not to be used.
WARNING(59): The variable 'i' seems not to be used.
WARNING(62): Variable 'Wensleydale' may be uninitialized when used here.
WARNING(70): The variable 'skein' seems not to be used.
WARNING(76): The function 'ramsBottom' seems not to be used.
WARNING(82): Variable 'chicken' may be uninitialized when used here.
WARNING(82): Variable 'run' may be uninitialized when used here.
WARNING(85): Variable 'gromit' may be uninitialized when used here.
WARNING(85): Variable 'wallace' may be uninitialized when used here.
WARNING(90): The function 'Wensleydale' seems not to be used.
WARNING(90): The parameter 'y' seems not to be used.
WARNING(92): The function 'LadyCampanula' seems not to be used.
WARNING(98): The variable 'pastry' seems not to be used.
WARNING(104): The function 'TheWereRabbit' seems not to be used.
WARNING(116): The variable 'wool' seems not to be used.
WARNING(125): Variable 'yarn' may be uninitialized when used here.
WARNING(127): Variable 'preston' may be uninitialized when used here.
WARNING(127): Variable 'shaun' may be uninitialized when used here.
WARNING(130): The variable 'aBigLongVariableName6andthx1138' seems not to be used.
WARNING(131): The variable 'odd' seems not to be used.
WARNING(131): The variable 'of' seems not to be used.
WARNING(131): The variable 'separation' seems not to be used.
WARNING(132): The variable 'stuff' seems not to be used.
WARNING(134): The variable 'ant' seems not to be used.
WARNING(135): The variable 'bat' seems not to be used.
WARNING(136): The variable 'cat' seems not to be used.
WARNING(137): The variable 'dog' seems not to be used.
WARNING(138): The variable 'hog' seems not to be used.
Var: gromit of type int [line: 6]
Sibling: 1  Var: mysteriousPenguin of type int [line: 6]
Sibling: 2  Func: wallace returns type void [line: 9]
.   Child: 0  Parm: wrong of type int [line: 9]
.   Sibling: 1  Parm: trousers of type int [line: 9]
.   Child: 1  Compound [line: 10]
.   .   Child: 0  Var: close of type bool [line: 11]
.   .   .   Child: 0  Const true of type bool [line: 11]
.   .   Sibling: 1  Var: shave of type bool [line: 11]
.   .   .   Child: 0  Const false of type bool [line: 11]
.   .   Sibling: 2  Var: cheese of type int [line: 12]
.   .   .   Child: 0  Const 17 of type int [line: 12]
.   .   Child: 1  Const 1729 of type int [line: 14]
.   .   Sibling: 1  Id: close of type bool [line: 15]
.   .   Sibling: 2  Op: + of type int [line: 16]
.   .   .   Child: 0  Op: * of type int [line: 16]
.   .   .   .   Child: 0  Const 11 of type int [line: 16]
.   .   .   .   Child: 1  Const 22 of type int [line: 16]
.   .   .   Child: 1  Op: * of type int [line: 16]
.   .   .   .   Child: 0  Const 33 of type int [line: 16]
.   .   .   .   Child: 1  Const 44 of type int [line: 16]
.   .   Sibling: 3  Assign: <= of type bool [line: 17]
.   .   .   Child: 0  Id: close of type bool [line: 17]
.   .   .   Child: 1  Id: shave of type bool [line: 17]
.   .   Sibling: 4  Assign: <= of type int [line: 18]
.   .   .   Child: 0  Id: wrong of type int [line: 18]
.   .   .   Child: 1  Op: % of type int [line: 18]
.   .   .   .   Child: 0  Id: trousers of type int [line: 18]
.   .   .   .   Child: 1  Op: / of type int [line: 18]
.   .   .   .   .   Child: 0  Const 666 of type int [line: 18]
.   .   .   .   .   Child: 1  Id: wrong of type int [line: 18]
.   .   Sibling: 5  Assign: <= of type int [line: 19]
.   .   .   Child: 0  Id: gromit of type int [line: 19]
.   .   .   Child: 1  Op: + of type int [line: 19]
.   .   .   .   Child: 0  Op: - of type int [line: 19]
.   .   .   .   .   Child: 0  Op: * of type int [line: 19]
.   .   .   .   .   .   Child: 0  Id: wrong of type int [line: 19]
.   .   .   .   .   .   Child: 1  Id: trousers of type int [line: 19]
.   .   .   .   .   Child: 1  Id: gromit of type int [line: 19]
.   .   .   .   Child: 1  Op: chsign of type int [line: 19]
.   .   .   .   .   Child: 0  Const 42 of type int [line: 19]
.   .   Sibling: 6  Assign: += of type int [line: 20]
.   .   .   Child: 0  Id: gromit of type int [line: 20]
.   .   .   Child: 1  Const 27182818 of type int [line: 20]
.   .   Sibling: 7  Assign: -= of type int [line: 21]
.   .   .   Child: 0  Id: gromit of type int [line: 21]
.   .   .   Child: 1  Op: chsign of type int [line: 21]
.   .   .   .   Child: 0  Const 31415927 of type int [line: 21]
.   .   Sibling: 8  Assign: /= of type int [line: 22]
.   .   .   Child: 0  Id: gromit of type int [line: 22]
.   .   .   Child: 1  Assign: *= of type int [line: 22]
.   .   .   .   Child: 0  Id: wrong of type int [line: 22]
.   .   .   .   Child: 1  Const 42 of type int [line: 22]
.   .   Sibling: 9  Assign: <= of type bool [line: 23]
.   .   .   Child: 0  Id: close of type bool [line: 23]
.   .   .   Child: 1  Op: and of type bool [line: 23]
.   .   .   .   Child: 0  Op: < of type bool [line: 23]
.   .   .   .   .   Child: 0  Id: wrong of type int [line: 23]
.   .   .   .   .   Child: 1  Id: trousers of type int [line: 23]
.   .   .   .   Child: 1  Op: !> of type bool [line: 23]
.   .   .   .   .   Child: 0  Id: trousers of type int [line: 23]
.   .   .   .   .   Child: 1  Id: gromit of type int [line: 23]
.   .   Sibling: 10  Assign: <= of type bool [line: 24]
.   .   .   Child: 0  Id: shave of type bool [line: 24]
.   .   .   Child: 1  Op: and of type bool [line: 24]
.   .   .   .   Child: 0  Op: > of type bool [line: 24]
.   .   .   .   .   Child: 0  Id: wrong of type int [line: 24]
.   .   .   .   .   Child: 1  Id: trousers of type int [line: 24]
.   .   .   .   Child: 1  Op: !< of type bool [line: 24]
.   .   .   .   .   Child: 0  Id: trousers of type int [line: 24]
.   .   .   .   .   Child: 1  Id: gromit of type int [line: 24]
.   .   Sibling: 11  Compound [line: 25]
.   .   .   Child: 0  Var: a of type int [line: 26]
.   .   .   Sibling: 1  Var: grand of type int [line: 26]
.   .   .   .   Child: 0  Op: / of type int [line: 26]
.   .   .   .   .   Child: 0  Const 1 of type int [line: 26]
.   .   .   .   .   Child: 1  Const 2 of type int [line: 26]
.   .   .   Sibling: 2  Var: day of type int [line: 26]
.   .   .   .   Child: 0  Op: * of type int [line: 26]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 26]
.   .   .   .   .   Child: 1  Const 4 of type int [line: 26]
.   .   .   Sibling: 3  Var: out of type int [line: 26]
.   .   .   .   Child: 0  Op: chsign of type int [line: 26]
.   .   .   .   .   Child: 0  Const 9 of type int [line: 26]
.   .   .   Child: 1  Assign: <= of type int [line: 27]
.   .   .   .   Child: 0  Id: a of type int [line: 27]
.   .   .   .   Child: 1  Assign: += of type int [line: 27]
.   .   .   .   .   Child: 0  Id: grand of type int [line: 27]
.   .   .   .   .   Child: 1  Assign: -= of type int [line: 27]
.   .   .   .   .   .   Child: 0  Id: day of type int [line: 27]
.   .   .   .   .   .   Child: 1  Id: out of type int [line: 27]
.   .   Sibling: 12  Assign: <= of type bool [line: 29]
.   .   .   Child: 0  Id: close of type bool [line: 29]
.   .   .   Child: 1  Op: and of type bool [line: 29]
.   .   .   .   Child: 0  Op: < of type bool [line: 29]
.   .   .   .   .   Child: 0  Op: + of type int [line: 29]
.   .   .   .   .   .   Child: 0  Op: * of type int [line: 29]
.   .   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 29]
.   .   .   .   .   .   .   .   Child: 0  Const 1 of type int [line: 29]
.   .   .   .   .   .   .   Child: 1  Const 2 of type int [line: 29]
.   .   .   .   .   .   Child: 1  Const 3 of type int [line: 29]
.   .   .   .   .   Child: 1  Op: * of type int [line: 29]
.   .   .   .   .   .   Child: 0  Const 4 of type int [line: 29]
.   .   .   .   .   .   Child: 1  Const 5 of type int [line: 29]
.   .   .   .   Child: 1  Op: > of type bool [line: 29]
.   .   .   .   .   Child: 0  Op: + of type int [line: 29]
.   .   .   .   .   .   Child: 0  Const 6 of type int [line: 29]
.   .   .   .   .   .   Child: 1  Const 7 of type int [line: 29]
.   .   .   .   .   Child: 1  Op: chsign of type int [line: 29]
.   .   .   .   .   .   Child: 0  Const 3 of type int [line: 29]
.   .   Sibling: 13  Assign: <= of type bool [line: 30]
.   .   .   Child: 0  Id: shave of type bool [line: 30]
.   .   .   Child: 1  Op: or of type bool [line: 30]
.   .   .   .   Child: 0  Const true of type bool [line: 30]
.   .   .   .   Child: 1  Op: and of type bool [line: 30]
.   .   .   .   .   Child: 0  Op: < of type bool [line: 30]
.   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 30]
.   .   .   .   .   .   .   Child: 0  Op: * of type int [line: 30]
.   .   .   .   .   .   .   .   Child: 0  Const 1 of type int [line: 30]
.   .   .   .   .   .   .   .   Child: 1  Op: + of type int [line: 30]
.   .   .   .   .   .   .   .   .   Child: 0  Const 2 of type int [line: 30]
.   .   .   .   .   .   .   .   .   Child: 1  Const 3 of type int [line: 30]
.   .   .   .   .   .   Child: 1  Op: * of type int [line: 30]
.   .   .   .   .   .   .   Child: 0  Const 4 of type int [line: 30]
.   .   .   .   .   .   .   Child: 1  Const 5 of type int [line: 30]
.   .   .   .   .   Child: 1  Op: > of type bool [line: 30]
.   .   .   .   .   .   Child: 0  Op: + of type int [line: 30]
.   .   .   .   .   .   .   Child: 0  Const 6 of type int [line: 30]
.   .   .   .   .   .   .   Child: 1  Const 7 of type int [line: 30]
.   .   .   .   .   .   Child: 1  Op: chsign of type int [line: 30]
.   .   .   .   .   .   .   Child: 0  Const 3 of type int [line: 30]
.   .   Sibling: 14  If [line: 31]
.   .   .   Child: 0  Op: != of type bool [line: 31]
.   .   .   .   Child: 0  Id: shave of type bool [line: 31]
.   .   .   .   Child: 1  Id: close of type bool [line: 31]
.   .   .   Child: 1  Assign: <= of type bool [line: 31]
.   .   .   .   Child: 0  Id: shave of type bool [line: 31]
.   .   .   .   Child: 1  Op: not of type bool [line: 31]
.   .   .   .   .   Child: 0  Id: close of type bool [line: 31]
.   .   Sibling: 15  If [line: 32]
.   .   .   Child: 0  Op: not of type bool [line: 32]
.   .   .   .   Child: 0  Op: or of type bool [line: 32]
.   .   .   .   .   Child: 0  Op: = of type bool [line: 32]
.   .   .   .   .   .   Child: 0  Id: shave of type bool [line: 32]
.   .   .   .   .   .   Child: 1  Id: close of type bool [line: 32]
.   .   .   .   .   Child: 1  Op: not of type bool [line: 32]
.   .   .   .   .   .   Child: 0  Id: close of type bool [line: 32]
.   .   .   Child: 1  Assign: <= of type bool [line: 32]
.   .   .   .   Child: 0  Id: shave of type bool [line: 32]
.   .   .   .   Child: 1  Const true of type bool [line: 32]
.   .   .   Child: 2  Assign: <= of type bool [line: 33]
.   .   .   .   Child: 0  Id: close of type bool [line: 33]
.   .   .   .   Child: 1  Const false of type bool [line: 33]
.   .   Sibling: 16  Assign: <= of type int [line: 34]
.   .   .   Child: 0  Id: mysteriousPenguin of type int [line: 34]
.   .   .   Child: 1  Op: chsign of type int [line: 34]
.   .   .   .   Child: 0  Op: - of type int [line: 34]
.   .   .   .   .   Child: 0  Op: chsign of type int [line: 34]
.   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 34]
.   .   .   .   .   .   .   Child: 0  Const 8 of type int [line: 34]
.   .   .   .   .   Child: 1  Op: chsign of type int [line: 34]
.   .   .   .   .   .   Child: 0  Assign: -- of type int [line: 34]
.   .   .   .   .   .   .   Child: 0  Id: cheese of type int [line: 34]
.   .   Sibling: 17  While [line: 36]
.   .   .   Child: 0  Id: shave of type bool [line: 36]
.   .   .   Child: 1  Compound [line: 36]
.   .   .   .   Child: 0  Var: were of type int [line: 37]
.   .   .   .   Sibling: 1  Var: rabbit of type int [line: 37]
.   .   .   .   Sibling: 2  Var: sheep is array of type int [line: 38]
.   .   .   .   Child: 1  Assign: <= of type int [line: 40]
.   .   .   .   .   Child: 0  Op: [ of type int [line: 40]
.   .   .   .   .   .   Child: 0  Id: sheep of type int [line: 40]
.   .   .   .   .   .   Child: 1  Const 2 of type int [line: 40]
.   .   .   .   .   Child: 1  Const 1618 of type int [line: 40]
.   .   .   .   Sibling: 1  If [line: 41]
.   .   .   .   .   Child: 0  Op: < of type bool [line: 41]
.   .   .   .   .   .   Child: 0  Op: [ of type int [line: 41]
.   .   .   .   .   .   .   Child: 0  Id: sheep of type int [line: 41]
.   .   .   .   .   .   .   Child: 1  Const 2 of type int [line: 41]
.   .   .   .   .   .   Child: 1  Const 496 of type int [line: 41]
.   .   .   .   .   Child: 1  Break [line: 41]
.   .   .   .   Sibling: 2  Call: wallace of type void [line: 42]
.   .   .   .   .   Child: 0  Assign: -- of type int [line: 42]
.   .   .   .   .   .   Child: 0  Id: gromit of type int [line: 42]
.   .   .   .   .   Sibling: 1  Op: - of type int [line: 42]
.   .   .   .   .   .   Child: 0  Id: were of type int [line: 42]
.   .   .   .   .   .   Child: 1  Id: rabbit of type int [line: 42]
.   .   .   .   Sibling: 3  Compound [line: 43]
.   .   .   .   .   Child: 0  Var: the of type int [line: 44]
.   .   .   .   .   Sibling: 1  Var: wrong of type int [line: 44]
.   .   .   .   .   Sibling: 2  Var: trousers of type int [line: 44]
.   .   .   .   .   Child: 1  Assign: <= of type int [line: 46]
.   .   .   .   .   .   Child: 0  Id: the of type int [line: 46]
.   .   .   .   .   .   Child: 1  Assign: += of type int [line: 46]
.   .   .   .   .   .   .   Child: 0  Id: wrong of type int [line: 46]
.   .   .   .   .   .   .   Child: 1  Assign: ++ of type int [line: 46]
.   .   .   .   .   .   .   .   Child: 0  Id: trousers of type int [line: 46]
.   .   .   .   .   Sibling: 1  If [line: 47]
.   .   .   .   .   .   Child: 0  Op: = of type bool [line: 47]
.   .   .   .   .   .   .   Child: 0  Id: were of type int [line: 47]
.   .   .   .   .   .   .   Child: 1  Id: rabbit of type int [line: 47]
.   .   .   .   .   .   Child: 1  Assign: <= of type int [line: 47]
.   .   .   .   .   .   .   Child: 0  Id: were of type int [line: 47]
.   .   .   .   .   .   .   Child: 1  Assign: -- of type int [line: 47]
.   .   .   .   .   .   .   .   Child: 0  Id: wrong of type int [line: 47]
.   .   Sibling: 18  Return [line: 50]
Sibling: 3  Func: penguin returns type bool [line: 54]
.   Child: 0  Parm: Feathers of type char [line: 54]
.   Sibling: 1  Parm: McGraw is array of type char [line: 54]
.   Sibling: 2  Parm: moon of type bool [line: 54]
.   Sibling: 3  Parm: cheese of type bool [line: 54]
.   Sibling: 4  Parm: launch of type int [line: 54]
.   Child: 1  Compound [line: 55]
.   .   Child: 0  Var: tottington of type char [line: 56]
.   .   .   Child: 0  Const 'x'  of type char [line: 56]
.   .   Sibling: 1  Var: Wensleydale is array of type char [line: 57]
.   .   Sibling: 2  Var: c of type char [line: 58]
.   .   Sibling: 3  Var: i of type int [line: 59]
.   .   Child: 1  Assign: <= of type char [line: 61]
.   .   .   Child: 0  Id: tottington of type char [line: 61]
.   .   .   Child: 1  Id: Feathers of type char [line: 61]
.   .   Sibling: 1  Assign: <= of type bool [line: 62]
.   .   .   Child: 0  Id: moon of type bool [line: 62]
.   .   .   Child: 1  Op: and of type bool [line: 62]
.   .   .   .   Child: 0  Op: !> of type bool [line: 62]
.   .   .   .   .   Child: 0  Id: McGraw of type char [line: 62]
.   .   .   .   .   Child: 1  Id: Wensleydale of type char [line: 62]
.   .   .   .   Child: 1  Id: moon of type bool [line: 62]
.   .   Sibling: 2  Assign: <= of type char [line: 63]
.   .   .   Child: 0  Id: Wensleydale of type char [line: 63]
.   .   .   Child: 1  Id: McGraw of type char [line: 63]
.   .   Sibling: 3  Assign: <= of type char [line: 64]
.   .   .   Child: 0  Op: [ of type char [line: 64]
.   .   .   .   Child: 0  Id: Wensleydale of type char [line: 64]
.   .   .   .   Child: 1  Op: sizeof of type int [line: 64]
.   .   .   .   .   Child: 0  Id: McGraw of type char [line: 64]
.   .   .   Child: 1  Const 'Q'  of type char [line: 64]
.   .   Sibling: 4  Assign: <= of type char [line: 65]
.   .   .   Child: 0  Op: [ of type char [line: 65]
.   .   .   .   Child: 0  Id: McGraw of type char [line: 65]
.   .   .   .   Child: 1  Const 3 of type int [line: 65]
.   .   .   Child: 1  Const 'A'  of type char [line: 65]
Sibling: 4  Func: Wendolene returns type int [line: 68]
.   Child: 0  Parm: wool of type int [line: 68]
.   Sibling: 1  Parm: shaun of type bool [line: 68]
.   Sibling: 2  Parm: yarn is array of type int [line: 68]
.   Sibling: 3  Parm: preston is array of type bool [line: 68]
.   Child: 1  Compound [line: 69]
.   .   Child: 0  Var: skein of type int [line: 70]
.   .   Child: 1  Assign: <= of type bool [line: 71]
.   .   .   Child: 0  Op: [ of type bool [line: 71]
.   .   .   .   Child: 0  Id: preston of type bool [line: 71]
.   .   .   .   Child: 1  Const 3 of type int [line: 71]
.   .   .   Child: 1  Op: or of type bool [line: 71]
.   .   .   .   Child: 0  Op: > of type bool [line: 71]
.   .   .   .   .   Child: 0  Op: [ of type int [line: 71]
.   .   .   .   .   .   Child: 0  Id: yarn of type int [line: 71]
.   .   .   .   .   .   Child: 1  Const 1 of type int [line: 71]
.   .   .   .   .   Child: 1  Id: wool of type int [line: 71]
.   .   .   .   Child: 1  Op: not of type bool [line: 71]
.   .   .   .   .   Child: 0  Id: shaun of type bool [line: 71]
.   .   Sibling: 1  Return [line: 72]
.   .   .   Child: 0  Op: + of type int [line: 72]
.   .   .   .   Child: 0  Op: + of type int [line: 72]
.   .   .   .   .   Child: 0  Op: + of type int [line: 72]
.   .   .   .   .   .   Child: 0  Op: + of type int [line: 72]
.   .   .   .   .   .   .   Child: 0  Id: wool of type int [line: 72]
.   .   .   .   .   .   .   Child: 1  Op: [ of type int [line: 72]
.   .   .   .   .   .   .   .   Child: 0  Id: yarn of type int [line: 72]
.   .   .   .   .   .   .   .   Child: 1  Const 0 of type int [line: 72]
.   .   .   .   .   .   Child: 1  Op: sizeof of type int [line: 72]
.   .   .   .   .   .   .   Child: 0  Id: yarn of type int [line: 72]
.   .   .   .   .   Child: 1  Op: [ of type int [line: 72]
.   .   .   .   .   .   Child: 0  Id: yarn of type int [line: 72]
.   .   .   .   .   .   Child: 1  Op: * of type int [line: 72]
.   .   .   .   .   .   .   Child: 0  Const 7 of type int [line: 72]
.   .   .   .   .   .   .   Child: 1  Id: wool of type int [line: 72]
.   .   .   .   Child: 1  Op: [ of type int [line: 72]
.   .   .   .   .   Child: 0  Id: yarn of type int [line: 72]
.   .   .   .   .   Child: 1  Op: - of type int [line: 72]
.   .   .   .   .   .   Child: 0  Op: [ of type int [line: 72]
.   .   .   .   .   .   .   Child: 0  Id: yarn of type int [line: 72]
.   .   .   .   .   .   .   Child: 1  Op: + of type int [line: 72]
.   .   .   .   .   .   .   .   Child: 0  Const 3 of type int [line: 72]
.   .   .   .   .   .   .   .   Child: 1  Op: * of type int [line: 72]
.   .   .   .   .   .   .   .   .   Child: 0  Id: wool of type int [line: 72]
.   .   .   .   .   .   .   .   .   Child: 1  Const 2 of type int [line: 72]
.   .   .   .   .   .   Child: 1  Const 4 of type int [line: 72]
Sibling: 5  Func: ramsBottom returns type bool [line: 76]
.   Child: 1  Compound [line: 77]
.   .   Child: 0  Var: chicken is array of type int [line: 78]
.   .   Sibling: 1  Var: run is array of type bool [line: 79]
.   .   Sibling: 2  Var: wallace is array of type int [line: 80]
.   .   Sibling: 3  Var: gromit is array of type int [line: 80]
.   .   Child: 1  Op: * of type int [line: 82]
.   .   .   Child: 0  Const 42 of type int [line: 82]
.   .   .   Child: 1  Call: Wendolene of type int [line: 82]
.   .   .   .   Child: 0  Op: + of type int [line: 82]
.   .   .   .   .   Child: 0  Op: + of type int [line: 82]
.   .   .   .   .   .   Child: 0  Const 1 of type int [line: 82]
.   .   .   .   .   .   Child: 1  Const 2 of type int [line: 82]
.   .   .   .   .   Child: 1  Const 3 of type int [line: 82]
.   .   .   .   Sibling: 1  Op: or of type bool [line: 82]
.   .   .   .   .   Child: 0  Op: not of type bool [line: 82]
.   .   .   .   .   .   Child: 0  Const true of type bool [line: 82]
.   .   .   .   .   Child: 1  Op: and of type bool [line: 82]
.   .   .   .   .   .   Child: 0  Const true of type bool [line: 82]
.   .   .   .   .   .   Child: 1  Const false of type bool [line: 82]
.   .   .   .   Sibling: 2  Id: chicken of type int [line: 82]
.   .   .   .   Sibling: 3  Id: run of type bool [line: 82]
.   .   Sibling: 1  Op: [ of type bool [line: 83]
.   .   .   Child: 0  Id: run of type bool [line: 83]
.   .   .   Child: 1  Op: - of type int [line: 83]
.   .   .   .   Child: 0  Op: sizeof of type int [line: 83]
.   .   .   .   .   Child: 0  Id: run of type bool [line: 83]
.   .   .   .   Child: 1  Const 1 of type int [line: 83]
.   .   Sibling: 2  Return [line: 85]
.   .   .   Child: 0  Op: not of type bool [line: 85]
.   .   .   .   Child: 0  Op: !< of type bool [line: 85]
.   .   .   .   .   Child: 0  Op: [ of type int [line: 85]
.   .   .   .   .   .   Child: 0  Id: wallace of type int [line: 85]
.   .   .   .   .   .   Child: 1  Const 1 of type int [line: 85]
.   .   .   .   .   Child: 1  Op: * of type int [line: 85]
.   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 85]
.   .   .   .   .   .   .   Child: 0  Op: [ of type int [line: 85]
.   .   .   .   .   .   .   .   Child: 0  Id: gromit of type int [line: 85]
.   .   .   .   .   .   .   .   Child: 1  Const 2 of type int [line: 85]
.   .   .   .   .   .   Child: 1  Const 3 of type int [line: 85]
Sibling: 6  Func: cheese returns type int [line: 88]
.   Child: 0  Parm: x of type int [line: 88]
.   Sibling: 1  Parm: y of type int [line: 88]
.   Child: 1  Compound [line: 88]
.   .   Child: 1  While [line: 88]
.   .   .   Child: 0  Op: > of type bool [line: 88]
.   .   .   .   Child: 0  Id: x of type int [line: 88]
.   .   .   .   Child: 1  Const 0 of type int [line: 88]
.   .   .   Child: 1  If [line: 88]
.   .   .   .   Child: 0  Op: > of type bool [line: 88]
.   .   .   .   .   Child: 0  Id: y of type int [line: 88]
.   .   .   .   .   Child: 1  Const 3 of type int [line: 88]
.   .   .   .   Child: 1  Assign: -- of type int [line: 88]
.   .   .   .   .   Child: 0  Id: x of type int [line: 88]
.   .   .   .   Child: 2  Return [line: 88]
.   .   .   .   .   Child: 0  Op: % of type int [line: 88]
.   .   .   .   .   .   Child: 0  Op: * of type int [line: 88]
.   .   .   .   .   .   .   Child: 0  Id: x of type int [line: 88]
.   .   .   .   .   .   .   Child: 1  Id: x of type int [line: 88]
.   .   .   .   .   .   Child: 1  Id: y of type int [line: 88]
Sibling: 7  Func: Wensleydale returns type int [line: 90]
.   Child: 0  Parm: x of type int [line: 90]
.   Sibling: 1  Parm: y of type int [line: 90]
.   Child: 1  Compound [line: 90]
.   .   Child: 1  Return [line: 90]
.   .   .   Child: 0  Call: cheese of type int [line: 90]
.   .   .   .   Child: 0  Id: x of type int [line: 90]
.   .   .   .   Sibling: 1  Id: gromit of type int [line: 90]
Sibling: 8  Func: LadyCampanula returns type int [line: 92]
.   Child: 0  Parm: c of type char [line: 92]
.   Sibling: 1  Parm: s is array of type char [line: 92]
.   Child: 1  Compound [line: 92]
.   .   Child: 1  While [line: 92]
.   .   .   Child: 0  Const true of type bool [line: 92]
.   .   .   Child: 1  For [line: 92]
.   .   .   .   Child: 0  Var: i of type int [line: 92]
.   .   .   .   Child: 1  Range [line: 92]
.   .   .   .   .   Child: 0  Op: - of type int [line: 92]
.   .   .   .   .   .   Child: 0  Op: sizeof of type int [line: 92]
.   .   .   .   .   .   .   Child: 0  Id: s of type char [line: 92]
.   .   .   .   .   .   Child: 1  Const 1 of type int [line: 92]
.   .   .   .   .   Child: 1  Const 0 of type int [line: 92]
.   .   .   .   .   Child: 2  Op: chsign of type int [line: 92]
.   .   .   .   .   .   Child: 0  Const 1 of type int [line: 92]
.   .   .   .   Child: 2  If [line: 92]
.   .   .   .   .   Child: 0  Op: = of type bool [line: 92]
.   .   .   .   .   .   Child: 0  Op: [ of type char [line: 92]
.   .   .   .   .   .   .   Child: 0  Id: s of type char [line: 92]
.   .   .   .   .   .   .   Child: 1  Id: i of type int [line: 92]
.   .   .   .   .   .   Child: 1  Id: c of type char [line: 92]
.   .   .   .   .   Child: 1  Return [line: 92]
.   .   .   .   .   .   Child: 0  Id: i of type int [line: 92]
Sibling: 9  Func: MrsTweedy returns type char [line: 95]
.   Child: 0  Parm: c of type char [line: 95]
.   Sibling: 1  Parm: s is array of type char [line: 95]
.   Child: 1  Compound [line: 96]
.   .   Child: 1  For [line: 97]
.   .   .   Child: 0  Var: ginger of type int [line: 97]
.   .   .   Child: 1  Range [line: 97]
.   .   .   .   Child: 0  Const 0 of type int [line: 97]
.   .   .   .   Child: 1  Const 10 of type int [line: 97]
.   .   .   Child: 2  Assign: <= of type char [line: 97]
.   .   .   .   Child: 0  Op: [ of type char [line: 97]
.   .   .   .   .   Child: 0  Id: s of type char [line: 97]
.   .   .   .   .   Child: 1  Id: ginger of type int [line: 97]
.   .   .   .   Child: 1  Id: c of type char [line: 97]
.   .   Sibling: 1  For [line: 98]
.   .   .   Child: 0  Var: pastry of type int [line: 98]
.   .   .   Child: 1  Range [line: 98]
.   .   .   .   Child: 0  Const 0 of type int [line: 98]
.   .   .   .   Child: 1  Const 2 of type int [line: 98]
.   .   .   .   Child: 2  Const 7 of type int [line: 98]
.   .   .   Child: 2  If [line: 98]
.   .   .   .   Child: 0  Op: = of type bool [line: 98]
.   .   .   .   .   Child: 0  Op: [ of type char [line: 98]
.   .   .   .   .   .   Child: 0  Id: s of type char [line: 98]
.   .   .   .   .   .   Child: 1  Const 0 of type int [line: 98]
.   .   .   .   .   Child: 1  Op: [ of type char [line: 98]
.   .   .   .   .   .   Child: 0  Id: s of type char [line: 98]
.   .   .   .   .   .   Child: 1  Const 1 of type int [line: 98]
.   .   .   .   Child: 1  Break [line: 98]
.   .   Sibling: 2  While [line: 99]
.   .   .   Child: 0  Const true of type bool [line: 99]
.   .   .   Child: 1  Break [line: 99]
.   .   Sibling: 3  Return [line: 101]
.   .   .   Child: 0  Const 'x'  of type char [line: 101]
Sibling: 10  Func: TheWereRabbit returns type char [line: 104]
.   Child: 0  Parm: x of type int [line: 104]
.   Child: 1  Compound [line: 105]
.   .   Child: 1  If [line: 106]
.   .   .   Child: 0  Op: = of type bool [line: 106]
.   .   .   .   Child: 0  Id: x of type int [line: 106]
.   .   .   .   Child: 1  Const 0 of type int [line: 106]
.   .   .   Child: 1  Return [line: 106]
.   .   .   .   Child: 0  Const '@'  of type char [line: 106]
.   .   .   Child: 2  If [line: 107]
.   .   .   .   Child: 0  Op: = of type bool [line: 107]
.   .   .   .   .   Child: 0  Id: x of type int [line: 107]
.   .   .   .   .   Child: 1  Const 1 of type int [line: 107]
.   .   .   .   Child: 1  Return [line: 107]
.   .   .   .   .   Child: 0  Const 'a'  of type char [line: 107]
.   .   .   .   Child: 2  If [line: 108]
.   .   .   .   .   Child: 0  Op: = of type bool [line: 108]
.   .   .   .   .   .   Child: 0  Id: x of type int [line: 108]
.   .   .   .   .   .   Child: 1  Const 2 of type int [line: 108]
.   .   .   .   .   Child: 1  Return [line: 108]
.   .   .   .   .   .   Child: 0  Const 'b'  of type char [line: 108]
.   .   .   .   .   Child: 2  If [line: 109]
.   .   .   .   .   .   Child: 0  Op: = of type bool [line: 109]
.   .   .   .   .   .   .   Child: 0  Id: x of type int [line: 109]
.   .   .   .   .   .   .   Child: 1  Const 3 of type int [line: 109]
.   .   .   .   .   .   Child: 1  Return [line: 109]
.   .   .   .   .   .   .   Child: 0  Const 'c'  of type char [line: 109]
.   .   .   .   .   .   Child: 2  If [line: 110]
.   .   .   .   .   .   .   Child: 0  Op: = of type bool [line: 110]
.   .   .   .   .   .   .   .   Child: 0  Id: x of type int [line: 110]
.   .   .   .   .   .   .   .   Child: 1  Const 4 of type int [line: 110]
.   .   .   .   .   .   .   Child: 1  Return [line: 110]
.   .   .   .   .   .   .   .   Child: 0  Const 'd'  of type char [line: 110]
.   .   .   .   .   .   .   Child: 2  Return [line: 111]
.   .   .   .   .   .   .   .   Child: 0  Const ' '  of type char [line: 111]
Sibling: 11  Func: main returns type int [line: 114]
.   Child: 1  Compound [line: 115]
.   .   Child: 0  Var: wool of type int [line: 116]
.   .   Sibling: 1  Var: yarn is array of type int [line: 116]
.   .   Sibling: 2  Var: shaun of type bool [line: 117]
.   .   Sibling: 3  Var: preston is array of type bool [line: 117]
.   .   Sibling: 4  Var: rocky is array of type char [line: 118]
.   .   Child: 1  Call: wallace of type void [line: 120]
.   .   .   Child: 0  Call: cheese of type int [line: 120]
.   .   .   .   Child: 0  Const 62 of type int [line: 120]
.   .   .   .   Sibling: 1  Op: chsign of type int [line: 120]
.   .   .   .   .   Child: 0  Const 311 of type int [line: 120]
.   .   .   Sibling: 1  Id: gromit of type int [line: 120]
.   .   Sibling: 1  Assign: <= of type char [line: 121]
.   .   .   Child: 0  Id: rocky of type char [line: 121]
.   .   .   Child: 1  Const is array "molybdenum" of type char [line: 121]
.   .   Sibling: 2  Call: MrsTweedy of type char [line: 123]
.   .   .   Child: 0  Const 'Z'  of type char [line: 123]
.   .   .   Sibling: 1  Id: rocky of type char [line: 123]
.   .   Sibling: 3  Op: + of type int [line: 125]
.   .   .   Child: 0  Op: [ of type int [line: 125]
.   .   .   .   Child: 0  Id: yarn of type int [line: 125]
.   .   .   .   Child: 1  Op: ? of type int [line: 125]
.   .   .   .   .   Child: 0  Const 100 of type int [line: 125]
.   .   .   Child: 1  Op: [ of type int [line: 125]
.   .   .   .   Child: 0  Id: yarn of type int [line: 125]
.   .   .   .   Child: 1  Op: ? of type int [line: 125]
.   .   .   .   .   Child: 0  Op: sizeof of type int [line: 125]
.   .   .   .   .   .   Child: 0  Id: yarn of type int [line: 125]
.   .   Sibling: 4  Return [line: 127]
.   .   .   Child: 0  Call: Wendolene of type int [line: 127]
.   .   .   .   Child: 0  Op: * of type int [line: 127]
.   .   .   .   .   Child: 0  Op: sizeof of type int [line: 127]
.   .   .   .   .   .   Child: 0  Id: preston of type bool [line: 127]
.   .   .   .   .   Child: 1  Op: sizeof of type int [line: 127]
.   .   .   .   .   .   Child: 0  Id: yarn of type int [line: 127]
.   .   .   .   Sibling: 1  Id: shaun of type bool [line: 127]
.   .   .   .   Sibling: 2  Id: yarn of type int [line: 127]
.   .   .   .   Sibling: 3  Id: preston of type bool [line: 127]
Sibling: 12  Var: aBigLongVariableName6andthx1138 of type bool [line: 130]
Sibling: 13  Var: odd of type int [line: 131]
Sibling: 14  Var: separation of type int [line: 131]
Sibling: 15  Var: of of type int [line: 131]
Sibling: 16  Var: stuff of type int [line: 132]
Sibling: 17  Var: ant is array of type char [line: 134]
.   Child: 0  Const is array "unwrinkled" of type char [line: 134]
Sibling: 18  Var: bat of type char [line: 135]
.   Child: 0  Const '''  of type char [line: 135]
Sibling: 19  Var: cat of type char [line: 136]
.   Child: 0  Const 't'  of type char [line: 136]
Sibling: 20  Var: dog of type char [line: 137]
.   Child: 0  Const '
'  of type char [line: 137]
Sibling: 21  Var: hog of type char [line: 138]
.   Child: 0  Const ' '  of type char [line: 138]
Number of warnings: 33
Number of errors: 0

==============
==============
./c- -P exp2.c-
ERROR(22): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(23): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(25): 'and' requires operands of type bool but lhs is of type int.
ERROR(25): 'and' requires operands of type bool but lhs is of type int.
ERROR(25): 'and' requires operands of type bool but rhs is of type int.
ERROR(25): 'and' requires operands of type bool but rhs is of type int.
ERROR(25): 'or' requires operands of type bool but lhs is of type int.
ERROR(25): 'or' requires operands of type bool but rhs is of type int.
ERROR(25): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(26): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(26): Unary 'not' requires an operand of type bool but was given type int.
WARNING(28): Variable 'z' may be uninitialized when used here.
ERROR(36): Symbol 'x' is not declared.
WARNING(36): Variable 'z' may be uninitialized when used here.
ERROR(37): Symbol 'x' is not declared.
ERROR(39): '<=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(39): '+' requires operands of type int but lhs is of type bool.
ERROR(39): '+' requires operands of type int but rhs is of type bool.
ERROR(40): '*' requires operands of type int but lhs is of type bool.
ERROR(40): '*' requires operands of type int but lhs is of type bool.
ERROR(40): '+' requires operands of type int but lhs is of type bool.
ERROR(40): '+' requires operands of type int but lhs is of type bool.
ERROR(40): '*' requires operands of type int but rhs is of type bool.
ERROR(40): Symbol 'x' is not declared.
ERROR(40): Symbol 'x' is not declared.
Number of warnings: 2
Number of errors: 23

==============
==============
./c- -P exp3.c-
ERROR(33): 'or' requires operands of type bool but rhs is of type int.
ERROR(34): 'or' requires operands of type bool but rhs is of type int.
WARNING(37): Variable 'z' may be uninitialized when used here.
ERROR(40): '<=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(40): '+' requires operands of type int but lhs is of type bool.
ERROR(40): '+' requires operands of type int but rhs is of type bool.
ERROR(45): Symbol 'x' is not declared.
WARNING(45): Variable 'z' may be uninitialized when used here.
ERROR(46): Symbol 'x' is not declared.
ERROR(48): '<=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(48): '+' requires operands of type int but lhs is of type bool.
ERROR(48): '+' requires operands of type int but rhs is of type bool.
ERROR(49): '*' requires operands of type int but lhs is of type bool.
ERROR(49): '*' requires operands of type int but lhs is of type bool.
ERROR(49): '+' requires operands of type int but lhs is of type bool.
ERROR(49): '+' requires operands of type int but lhs is of type bool.
ERROR(49): '*' requires operands of type int but rhs is of type bool.
ERROR(49): Symbol 'x' is not declared.
ERROR(49): Symbol 'x' is not declared.
Number of warnings: 2
Number of errors: 17

==============
==============
./c- -P exp4.c-
ERROR(24): 'and' requires operands of type bool but rhs is of type int.
ERROR(24): 'or' requires operands of type bool but rhs is of type int.
WARNING(30): Variable 'z' may be uninitialized when used here.
ERROR(33): '<=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(33): '+' requires operands of type int but lhs is of type bool.
ERROR(33): '+' requires operands of type int but rhs is of type bool.
ERROR(38): Symbol 'x' is not declared.
WARNING(38): Variable 'z' may be uninitialized when used here.
ERROR(39): Symbol 'x' is not declared.
ERROR(40): Symbol 'x' is not declared.
ERROR(43): Symbol 'x' is not declared.
ERROR(43): Symbol 'x' is not declared.
WARNING(48): Variable 'c' may be uninitialized when used here.
WARNING(49): Variable 'd' may be uninitialized when used here.
WARNING(57): Variable 'a' may be uninitialized when used here.
WARNING(57): Variable 'b' may be uninitialized when used here.
WARNING(57): Variable 'x' may be uninitialized when used here.
WARNING(57): Variable 'y' may be uninitialized when used here.
ERROR(66): Cannot index nonarray 'array'.
ERROR(66): Symbol 'array' is not declared.
ERROR(66): Symbol 'x' is not declared.
ERROR(66): Symbol 'x' is not declared.
Number of warnings: 8
Number of errors: 14

==============
==============
./c- -P exp.c-
Func: ident returns type int [line: 2]
.   Child: 0  Parm: x of type int [line: 2]
.   Child: 1  Compound [line: 2]
.   .   Child: 1  Return [line: 2]
.   .   .   Child: 0  Id: x of type int [line: 2]
Sibling: 1  Func: main returns type void [line: 4]
.   Child: 1  Compound [line: 5]
.   .   Child: 0  Var: x of type bool [line: 6]
.   .   Child: 1  Call: output of type void [line: 8]
.   .   .   Child: 0  Call: ident of type int [line: 8]
.   .   .   .   Child: 0  Const 111 of type int [line: 8]
.   .   Sibling: 1  Call: output of type void [line: 9]
.   .   .   Child: 0  Op: * of type int [line: 9]
.   .   .   .   Child: 0  Call: ident of type int [line: 9]
.   .   .   .   .   Child: 0  Const 111 of type int [line: 9]
.   .   .   .   Child: 1  Const 222 of type int [line: 9]
.   .   Sibling: 2  Call: output of type void [line: 10]
.   .   .   Child: 0  Op: * of type int [line: 10]
.   .   .   .   Child: 0  Const 222 of type int [line: 10]
.   .   .   .   Child: 1  Call: ident of type int [line: 10]
.   .   .   .   .   Child: 0  Const 111 of type int [line: 10]
.   .   Sibling: 3  Call: outnl of type void [line: 11]
.   .   Sibling: 4  Call: output of type void [line: 12]
.   .   .   Child: 0  Op: + of type int [line: 12]
.   .   .   .   Child: 0  Op: * of type int [line: 12]
.   .   .   .   .   Child: 0  Call: ident of type int [line: 12]
.   .   .   .   .   .   Child: 0  Const 111 of type int [line: 12]
.   .   .   .   .   Child: 1  Const 222 of type int [line: 12]
.   .   .   .   Child: 1  Const 333 of type int [line: 12]
.   .   Sibling: 5  Call: output of type void [line: 13]
.   .   .   Child: 0  Op: * of type int [line: 13]
.   .   .   .   Child: 0  Op: + of type int [line: 13]
.   .   .   .   .   Child: 0  Call: ident of type int [line: 13]
.   .   .   .   .   .   Child: 0  Const 111 of type int [line: 13]
.   .   .   .   .   Child: 1  Const 222 of type int [line: 13]
.   .   .   .   Child: 1  Const 333 of type int [line: 13]
.   .   Sibling: 6  Call: outnl of type void [line: 14]
.   .   Sibling: 7  Call: output of type void [line: 15]
.   .   .   Child: 0  Op: chsign of type int [line: 15]
.   .   .   .   Child: 0  Op: + of type int [line: 15]
.   .   .   .   .   Child: 0  Call: ident of type int [line: 15]
.   .   .   .   .   .   Child: 0  Const 111 of type int [line: 15]
.   .   .   .   .   Child: 1  Const 222 of type int [line: 15]
.   .   Sibling: 8  Call: output of type void [line: 16]
.   .   .   Child: 0  Op: chsign of type int [line: 16]
.   .   .   .   Child: 0  Op: chsign of type int [line: 16]
.   .   .   .   .   Child: 0  Op: + of type int [line: 16]
.   .   .   .   .   .   Child: 0  Call: ident of type int [line: 16]
.   .   .   .   .   .   .   Child: 0  Const 111 of type int [line: 16]
.   .   .   .   .   .   Child: 1  Const 222 of type int [line: 16]
.   .   Sibling: 9  Call: outnl of type void [line: 17]
.   .   Sibling: 10  Call: output of type void [line: 18]
.   .   .   Child: 0  Op: * of type int [line: 18]
.   .   .   .   Child: 0  Op: chsign of type int [line: 18]
.   .   .   .   .   Child: 0  Op: chsign of type int [line: 18]
.   .   .   .   .   .   Child: 0  Op: + of type int [line: 18]
.   .   .   .   .   .   .   Child: 0  Call: ident of type int [line: 18]
.   .   .   .   .   .   .   .   Child: 0  Const 111 of type int [line: 18]
.   .   .   .   .   .   .   Child: 1  Const 222 of type int [line: 18]
.   .   .   .   Child: 1  Const 333 of type int [line: 18]
.   .   Sibling: 11  Call: output of type void [line: 19]
.   .   .   Child: 0  Op: / of type int [line: 19]
.   .   .   .   Child: 0  Op: * of type int [line: 19]
.   .   .   .   .   Child: 0  Op: chsign of type int [line: 19]
.   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 19]
.   .   .   .   .   .   .   Child: 0  Op: + of type int [line: 19]
.   .   .   .   .   .   .   .   Child: 0  Call: ident of type int [line: 19]
.   .   .   .   .   .   .   .   .   Child: 0  Const 111 of type int [line: 19]
.   .   .   .   .   .   .   .   Child: 1  Const 222 of type int [line: 19]
.   .   .   .   .   Child: 1  Const 333 of type int [line: 19]
.   .   .   .   Child: 1  Const 444 of type int [line: 19]
.   .   Sibling: 12  Call: output of type void [line: 20]
.   .   .   Child: 0  Op: % of type int [line: 20]
.   .   .   .   Child: 0  Op: / of type int [line: 20]
.   .   .   .   .   Child: 0  Op: * of type int [line: 20]
.   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 20]
.   .   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 20]
.   .   .   .   .   .   .   .   Child: 0  Op: + of type int [line: 20]
.   .   .   .   .   .   .   .   .   Child: 0  Call: ident of type int [line: 20]
.   .   .   .   .   .   .   .   .   .   Child: 0  Const 111 of type int [line: 20]
.   .   .   .   .   .   .   .   .   Child: 1  Const 222 of type int [line: 20]
.   .   .   .   .   .   Child: 1  Const 333 of type int [line: 20]
.   .   .   .   .   Child: 1  Const 444 of type int [line: 20]
.   .   .   .   Child: 1  Const 42 of type int [line: 20]
.   .   Sibling: 13  Call: outnl of type void [line: 21]
.   .   Sibling: 14  Call: outputb of type void [line: 22]
.   .   .   Child: 0  Op: !> of type bool [line: 22]
.   .   .   .   Child: 0  Op: + of type int [line: 22]
.   .   .   .   .   Child: 0  Op: % of type int [line: 22]
.   .   .   .   .   .   Child: 0  Op: / of type int [line: 22]
.   .   .   .   .   .   .   Child: 0  Op: * of type int [line: 22]
.   .   .   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 22]
.   .   .   .   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 22]
.   .   .   .   .   .   .   .   .   .   Child: 0  Op: + of type int [line: 22]
.   .   .   .   .   .   .   .   .   .   .   Child: 0  Call: ident of type int [line: 22]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Const 111 of type int [line: 22]
.   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 222 of type int [line: 22]
.   .   .   .   .   .   .   .   Child: 1  Const 333 of type int [line: 22]
.   .   .   .   .   .   .   Child: 1  Const 444 of type int [line: 22]
.   .   .   .   .   .   Child: 1  Const 42 of type int [line: 22]
.   .   .   .   .   Child: 1  Const 555 of type int [line: 22]
.   .   .   .   Child: 1  Const 666 of type int [line: 22]
.   .   Sibling: 15  Call: outputb of type void [line: 23]
.   .   .   Child: 0  Op: !< of type bool [line: 23]
.   .   .   .   Child: 0  Op: + of type int [line: 23]
.   .   .   .   .   Child: 0  Op: % of type int [line: 23]
.   .   .   .   .   .   Child: 0  Op: / of type int [line: 23]
.   .   .   .   .   .   .   Child: 0  Op: * of type int [line: 23]
.   .   .   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 23]
.   .   .   .   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 23]
.   .   .   .   .   .   .   .   .   .   Child: 0  Op: + of type int [line: 23]
.   .   .   .   .   .   .   .   .   .   .   Child: 0  Call: ident of type int [line: 23]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Const 111 of type int [line: 23]
.   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 222 of type int [line: 23]
.   .   .   .   .   .   .   .   Child: 1  Const 333 of type int [line: 23]
.   .   .   .   .   .   .   Child: 1  Const 444 of type int [line: 23]
.   .   .   .   .   .   Child: 1  Const 42 of type int [line: 23]
.   .   .   .   .   Child: 1  Const 555 of type int [line: 23]
.   .   .   .   Child: 1  Const 666 of type int [line: 23]
.   .   Sibling: 16  Call: outnl of type void [line: 24]
.   .   Sibling: 17  Call: outputb of type void [line: 25]
.   .   .   Child: 0  Op: not of type bool [line: 25]
.   .   .   .   Child: 0  Op: !> of type bool [line: 25]
.   .   .   .   .   Child: 0  Op: + of type int [line: 25]
.   .   .   .   .   .   Child: 0  Op: % of type int [line: 25]
.   .   .   .   .   .   .   Child: 0  Op: / of type int [line: 25]
.   .   .   .   .   .   .   .   Child: 0  Op: * of type int [line: 25]
.   .   .   .   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 25]
.   .   .   .   .   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 25]
.   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: + of type int [line: 25]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Call: ident of type int [line: 25]
.   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Const 111 of type int [line: 25]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 222 of type int [line: 25]
.   .   .   .   .   .   .   .   .   Child: 1  Const 333 of type int [line: 25]
.   .   .   .   .   .   .   .   Child: 1  Const 444 of type int [line: 25]
.   .   .   .   .   .   .   Child: 1  Const 42 of type int [line: 25]
.   .   .   .   .   .   Child: 1  Const 555 of type int [line: 25]
.   .   .   .   .   Child: 1  Const 666 of type int [line: 25]
.   .   Sibling: 18  Call: outputb of type void [line: 26]
.   .   .   Child: 0  Op: not of type bool [line: 26]
.   .   .   .   Child: 0  Op: not of type bool [line: 26]
.   .   .   .   .   Child: 0  Op: !> of type bool [line: 26]
.   .   .   .   .   .   Child: 0  Op: + of type int [line: 26]
.   .   .   .   .   .   .   Child: 0  Op: % of type int [line: 26]
.   .   .   .   .   .   .   .   Child: 0  Op: / of type int [line: 26]
.   .   .   .   .   .   .   .   .   Child: 0  Op: * of type int [line: 26]
.   .   .   .   .   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 26]
.   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 26]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: + of type int [line: 26]
.   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Call: ident of type int [line: 26]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Const 111 of type int [line: 26]
.   .   .   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 222 of type int [line: 26]
.   .   .   .   .   .   .   .   .   .   Child: 1  Const 333 of type int [line: 26]
.   .   .   .   .   .   .   .   .   Child: 1  Const 444 of type int [line: 26]
.   .   .   .   .   .   .   .   Child: 1  Const 42 of type int [line: 26]
.   .   .   .   .   .   .   Child: 1  Const 555 of type int [line: 26]
.   .   .   .   .   .   Child: 1  Const 666 of type int [line: 26]
.   .   Sibling: 19  Call: outnl of type void [line: 27]
.   .   Sibling: 20  Call: outputb of type void [line: 28]
.   .   .   Child: 0  Op: and of type bool [line: 28]
.   .   .   .   Child: 0  Op: not of type bool [line: 28]
.   .   .   .   .   Child: 0  Op: not of type bool [line: 28]
.   .   .   .   .   .   Child: 0  Op: !> of type bool [line: 28]
.   .   .   .   .   .   .   Child: 0  Op: + of type int [line: 28]
.   .   .   .   .   .   .   .   Child: 0  Op: % of type int [line: 28]
.   .   .   .   .   .   .   .   .   Child: 0  Op: / of type int [line: 28]
.   .   .   .   .   .   .   .   .   .   Child: 0  Op: * of type int [line: 28]
.   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 28]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 28]
.   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: + of type int [line: 28]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Call: ident of type int [line: 28]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Const 111 of type int [line: 28]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 222 of type int [line: 28]
.   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 333 of type int [line: 28]
.   .   .   .   .   .   .   .   .   .   Child: 1  Const 444 of type int [line: 28]
.   .   .   .   .   .   .   .   .   Child: 1  Const 42 of type int [line: 28]
.   .   .   .   .   .   .   .   Child: 1  Const 555 of type int [line: 28]
.   .   .   .   .   .   .   Child: 1  Const 666 of type int [line: 28]
.   .   .   .   Child: 1  Op: < of type bool [line: 28]
.   .   .   .   .   Child: 0  Const 777 of type int [line: 28]
.   .   .   .   .   Child: 1  Const 888 of type int [line: 28]
.   .   Sibling: 21  Call: outputb of type void [line: 29]
.   .   .   Child: 0  Op: or of type bool [line: 29]
.   .   .   .   Child: 0  Op: and of type bool [line: 29]
.   .   .   .   .   Child: 0  Op: not of type bool [line: 29]
.   .   .   .   .   .   Child: 0  Op: not of type bool [line: 29]
.   .   .   .   .   .   .   Child: 0  Op: !> of type bool [line: 29]
.   .   .   .   .   .   .   .   Child: 0  Op: + of type int [line: 29]
.   .   .   .   .   .   .   .   .   Child: 0  Op: % of type int [line: 29]
.   .   .   .   .   .   .   .   .   .   Child: 0  Op: / of type int [line: 29]
.   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: * of type int [line: 29]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 29]
.   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 29]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: + of type int [line: 29]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Call: ident of type int [line: 29]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Const 111 of type int [line: 29]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 222 of type int [line: 29]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 333 of type int [line: 29]
.   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 444 of type int [line: 29]
.   .   .   .   .   .   .   .   .   .   Child: 1  Const 42 of type int [line: 29]
.   .   .   .   .   .   .   .   .   Child: 1  Const 555 of type int [line: 29]
.   .   .   .   .   .   .   .   Child: 1  Const 666 of type int [line: 29]
.   .   .   .   .   Child: 1  Op: < of type bool [line: 29]
.   .   .   .   .   .   Child: 0  Const 777 of type int [line: 29]
.   .   .   .   .   .   Child: 1  Const 888 of type int [line: 29]
.   .   .   .   Child: 1  Op: != of type bool [line: 29]
.   .   .   .   .   Child: 0  Const 999 of type int [line: 29]
.   .   .   .   .   Child: 1  Const 1000 of type int [line: 29]
.   .   Sibling: 22  Call: outnl of type void [line: 30]
.   .   Sibling: 23  Call: outputb of type void [line: 31]
.   .   .   Child: 0  Assign: <= of type bool [line: 31]
.   .   .   .   Child: 0  Id: x of type bool [line: 31]
.   .   .   .   Child: 1  Op: or of type bool [line: 31]
.   .   .   .   .   Child: 0  Op: and of type bool [line: 31]
.   .   .   .   .   .   Child: 0  Op: not of type bool [line: 31]
.   .   .   .   .   .   .   Child: 0  Op: not of type bool [line: 31]
.   .   .   .   .   .   .   .   Child: 0  Op: !> of type bool [line: 31]
.   .   .   .   .   .   .   .   .   Child: 0  Op: + of type int [line: 31]
.   .   .   .   .   .   .   .   .   .   Child: 0  Op: % of type int [line: 31]
.   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: / of type int [line: 31]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: * of type int [line: 31]
.   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 31]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 31]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: + of type int [line: 31]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Call: ident of type int [line: 31]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Const 111 of type int [line: 31]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 222 of type int [line: 31]
.   .   .   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 333 of type int [line: 31]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 444 of type int [line: 31]
.   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 42 of type int [line: 31]
.   .   .   .   .   .   .   .   .   .   Child: 1  Const 555 of type int [line: 31]
.   .   .   .   .   .   .   .   .   Child: 1  Const 666 of type int [line: 31]
.   .   .   .   .   .   Child: 1  Op: < of type bool [line: 31]
.   .   .   .   .   .   .   Child: 0  Const 777 of type int [line: 31]
.   .   .   .   .   .   .   Child: 1  Const 888 of type int [line: 31]
.   .   .   .   .   Child: 1  Op: != of type bool [line: 31]
.   .   .   .   .   .   Child: 0  Const 999 of type int [line: 31]
.   .   .   .   .   .   Child: 1  Const 1000 of type int [line: 31]
.   .   Sibling: 24  Call: outnl of type void [line: 32]
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -P expL.c-
WARNING(6): Variable 'x' may be uninitialized when used here.
Func: main returns type void [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 0  Var: x of type int [line: 4]
.   .   Child: 1  Op: > of type bool [line: 6]
.   .   .   Child: 0  Op: + of type int [line: 6]
.   .   .   .   Child: 0  Op: * of type int [line: 6]
.   .   .   .   .   Child: 0  Const 555 of type int [line: 6]
.   .   .   .   .   Child: 1  Const 666 of type int [line: 6]
.   .   .   .   Child: 1  Id: x of type int [line: 6]
.   .   .   Child: 1  Const 777 of type int [line: 6]
Number of warnings: 1
Number of errors: 0

==============
==============
./c- -P expR.c-
WARNING(6): Variable 'x' may be uninitialized when used here.
Func: main returns type void [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 0  Var: x of type int [line: 4]
.   .   Child: 1  Op: > of type bool [line: 6]
.   .   .   Child: 0  Const 555 of type int [line: 6]
.   .   .   Child: 1  Op: + of type int [line: 6]
.   .   .   .   Child: 0  Const 666 of type int [line: 6]
.   .   .   .   Child: 1  Op: * of type int [line: 6]
.   .   .   .   .   Child: 0  Id: x of type int [line: 6]
.   .   .   .   .   Child: 1  Const 777 of type int [line: 6]
Number of warnings: 1
Number of errors: 0

==============
==============
./c- -P for2.c-
ERROR(5): Cannot use array in position 1 in range of for statement.
ERROR(5): Symbol 'j' is not declared.
WARNING(5): Variable 'a' may be uninitialized when used here.
ERROR(6): Cannot use array in position 1 in range of for statement.
ERROR(8): Symbol 'j' is already declared at line 6.
WARNING(9): Variable 'i' may be uninitialized when used here.
Number of warnings: 2
Number of errors: 4

==============
==============
./c- -P fora.c-
Func: main returns type void [line: 1]
.   Child: 1  Compound [line: 2]
.   .   Child: 1  For [line: 3]
.   .   .   Child: 0  Var: i of type int [line: 3]
.   .   .   Child: 1  Range [line: 3]
.   .   .   .   Child: 0  Const 1 of type int [line: 3]
.   .   .   .   Child: 1  Const 11 of type int [line: 3]
.   .   .   Child: 2  Assign: <= of type int [line: 3]
.   .   .   .   Child: 0  Id: i of type int [line: 3]
.   .   .   .   Child: 1  Const 3 of type int [line: 3]
.   .   Sibling: 1  For [line: 5]
.   .   .   Child: 0  Var: j of type int [line: 5]
.   .   .   Child: 1  Range [line: 5]
.   .   .   .   Child: 0  Const 2 of type int [line: 5]
.   .   .   .   Child: 1  Const 22 of type int [line: 5]
.   .   .   .   Child: 2  Const 3 of type int [line: 5]
.   .   .   Child: 2  Assign: <= of type int [line: 5]
.   .   .   .   Child: 0  Id: j of type int [line: 5]
.   .   .   .   Child: 1  Const 7 of type int [line: 5]
.   .   Sibling: 2  For [line: 7]
.   .   .   Child: 0  Var: i of type int [line: 7]
.   .   .   Child: 1  Range [line: 7]
.   .   .   .   Child: 0  Id: i of type int [line: 7]
.   .   .   .   Child: 1  Id: i of type int [line: 7]
.   .   .   .   Child: 2  Id: i of type int [line: 7]
.   .   .   Child: 2  Const 666 of type int [line: 7]
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -P forb.c-
WARNING(7): Variable 'y' may be uninitialized when used here.
ERROR(8): Cannot use array in position 1 in range of for statement.
WARNING(8): Variable 'z' may be uninitialized when used here.
Number of warnings: 2
Number of errors: 1

==============
==============
./c- -P for.c-
WARNING(5): The variable 'ba' seems not to be used.
ERROR(12): Cannot index nonarray 'bb'.
ERROR(12): Symbol 'bb' is not declared.
ERROR(13): Cannot index nonarray 'bb'.
ERROR(13): Symbol 'bb' is not declared.
ERROR(14): Cannot index nonarray 'bb'.
ERROR(14): Symbol 'bb' is not declared.
ERROR(16): Cannot index nonarray 'cc'.
ERROR(16): Symbol 'cc' is not declared.
ERROR(17): Cannot index nonarray 'cc'.
ERROR(17): Symbol 'cc' is not declared.
ERROR(20): Cannot index nonarray 'a'.
ERROR(20): Symbol 'a' is not declared.
ERROR(23): Cannot index nonarray 'b'.
ERROR(23): Symbol 'b' is not declared.
ERROR(26): Cannot index nonarray 'c'.
ERROR(26): Symbol 'c' is not declared.
Number of warnings: 1
Number of errors: 16

==============
==============
./c- -P forerr.c-
ERROR(7): Cannot use array in position 2 in range of for statement.
WARNING(7): Variable 'aa' may be uninitialized when used here.
WARNING(7): Variable 'a' may be uninitialized when used here.
ERROR(8): Cannot use array in position 2 in range of for statement.
ERROR(8): Expecting type int in position 1 in range of for statement but got type bool.
ERROR(8): Expecting type int in position 2 in range of for statement but got type bool.
WARNING(8): Variable 'bb' may be uninitialized when used here.
WARNING(8): Variable 'b' may be uninitialized when used here.
ERROR(9): Cannot use array in position 1 in range of for statement.
ERROR(9): Cannot use array in position 2 in range of for statement.
ERROR(9): Cannot use array in position 3 in range of for statement.
ERROR(9): Expecting type int in position 1 in range of for statement but got type bool.
ERROR(9): Expecting type int in position 2 in range of for statement but got type bool.
ERROR(9): Expecting type int in position 3 in range of for statement but got type bool.
ERROR(10): Cannot use array in position 1 in range of for statement.
ERROR(10): Expecting type int in position 1 in range of for statement but got type char.
ERROR(10): Expecting type int in position 2 in range of for statement but got type char.
WARNING(10): Variable 'cc' may be uninitialized when used here.
WARNING(10): Variable 'c' may be uninitialized when used here.
ERROR(11): 'or' requires operands of type bool but lhs is of type int.
ERROR(11): 'or' requires operands of type bool but rhs is of type int.
Number of warnings: 6
Number of errors: 15

==============
==============
./c- -P forscope.c-
ERROR(5): Cannot use array in position 1 in range of for statement.
ERROR(6): Symbol 'x' is already declared at line 5.
ERROR(10): Cannot use array in position 1 in range of for statement.
WARNING(10): The variable 'x' seems not to be used.
ERROR(15): Cannot use array in position 1 in range of for statement.
WARNING(15): The variable 'x' seems not to be used.
ERROR(16): Symbol 'x' is already declared at line 15.
ERROR(22): Cannot use array in position 1 in range of for statement.
ERROR(28): Cannot use array in position 1 in range of for statement.
ERROR(29): Symbol 'x' is already declared at line 28.
ERROR(35): Cannot use array in position 1 in range of for statement.
ERROR(44): Cannot use array in position 1 in range of for statement.
Number of warnings: 2
Number of errors: 10

==============
==============
./c- -P funcscope.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
ERROR(5): Symbol 'x' is already declared at line 5.
WARNING(5): The function 'ant' seems not to be used.
ERROR(6): Symbol 'x' is already declared at line 5.
WARNING(10): The function 'bat' seems not to be used.
WARNING(10): The parameter 'x' seems not to be used.
WARNING(15): The function 'cat' seems not to be used.
WARNING(15): The parameter 'x' seems not to be used.
ERROR(16): Symbol 'x' is already declared at line 15.
WARNING(22): The function 'dog' seems not to be used.
WARNING(28): The function 'elk' seems not to be used.
ERROR(29): Symbol 'x' is already declared at line 28.
WARNING(35): The function 'fox' seems not to be used.
WARNING(45): The function 'gnu' seems not to be used.
Number of warnings: 9
Number of errors: 5

==============
==============
./c- -P gcd2.c-
Func: gcd returns type int [line: 4]
.   Child: 0  Parm: u of type int [line: 4]
.   Sibling: 1  Parm: v of type int [line: 4]
.   Child: 1  Compound [line: 5]
.   .   Child: 1  If [line: 6]
.   .   .   Child: 0  Op: = of type bool [line: 6]
.   .   .   .   Child: 0  Id: v of type int [line: 6]
.   .   .   .   Child: 1  Const 0 of type int [line: 6]
.   .   .   Child: 1  Return [line: 7]
.   .   .   .   Child: 0  Id: u of type int [line: 7]
.   .   .   Child: 2  Return [line: 9]
.   .   .   .   Child: 0  Call: gcd of type int [line: 9]
.   .   .   .   .   Child: 0  Id: v of type int [line: 9]
.   .   .   .   .   Sibling: 1  Op: - of type int [line: 9]
.   .   .   .   .   .   Child: 0  Id: u of type int [line: 9]
.   .   .   .   .   .   Child: 1  Op: * of type int [line: 9]
.   .   .   .   .   .   .   Child: 0  Op: / of type int [line: 9]
.   .   .   .   .   .   .   .   Child: 0  Id: u of type int [line: 9]
.   .   .   .   .   .   .   .   Child: 1  Id: v of type int [line: 9]
.   .   .   .   .   .   .   Child: 1  Id: v of type int [line: 9]
Sibling: 1  Func: main returns type void [line: 12]
.   Child: 1  Compound [line: 13]
.   .   Child: 1  Call: output of type void [line: 14]
.   .   .   Child: 0  Call: gcd of type int [line: 14]
.   .   .   .   Child: 0  Call: input of type int [line: 14]
.   .   .   .   Sibling: 1  Call: input of type int [line: 14]
.   .   Sibling: 1  Call: outnl of type void [line: 15]
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -P gcd.c-
Func: gcd returns type int [line: 4]
.   Child: 0  Parm: u of type int [line: 4]
.   Sibling: 1  Parm: v of type int [line: 4]
.   Child: 1  Compound [line: 5]
.   .   Child: 1  If [line: 6]
.   .   .   Child: 0  Op: = of type bool [line: 6]
.   .   .   .   Child: 0  Id: v of type int [line: 6]
.   .   .   .   Child: 1  Const 0 of type int [line: 6]
.   .   .   Child: 1  Return [line: 7]
.   .   .   .   Child: 0  Id: u of type int [line: 7]
.   .   .   Child: 2  Return [line: 9]
.   .   .   .   Child: 0  Call: gcd of type int [line: 9]
.   .   .   .   .   Child: 0  Id: v of type int [line: 9]
.   .   .   .   .   Sibling: 1  Op: - of type int [line: 9]
.   .   .   .   .   .   Child: 0  Id: u of type int [line: 9]
.   .   .   .   .   .   Child: 1  Op: * of type int [line: 9]
.   .   .   .   .   .   .   Child: 0  Op: / of type int [line: 9]
.   .   .   .   .   .   .   .   Child: 0  Id: u of type int [line: 9]
.   .   .   .   .   .   .   .   Child: 1  Id: v of type int [line: 9]
.   .   .   .   .   .   .   Child: 1  Id: v of type int [line: 9]
Sibling: 1  Func: main returns type void [line: 12]
.   Child: 1  Compound [line: 13]
.   .   Child: 0  Var: x of type int [line: 14]
.   .   Sibling: 1  Var: y of type int [line: 14]
.   .   Sibling: 2  Var: z of type int [line: 14]
.   .   Child: 1  Assign: <= of type int [line: 16]
.   .   .   Child: 0  Id: x of type int [line: 16]
.   .   .   Child: 1  Call: input of type int [line: 16]
.   .   Sibling: 1  Assign: <= of type int [line: 17]
.   .   .   Child: 0  Id: y of type int [line: 17]
.   .   .   Child: 1  Call: input of type int [line: 17]
.   .   Sibling: 2  Assign: <= of type int [line: 18]
.   .   .   Child: 0  Id: z of type int [line: 18]
.   .   .   Child: 1  Call: gcd of type int [line: 18]
.   .   .   .   Child: 0  Id: x of type int [line: 18]
.   .   .   .   Sibling: 1  Id: y of type int [line: 18]
.   .   Sibling: 3  Call: output of type void [line: 19]
.   .   .   Child: 0  Id: z of type int [line: 19]
.   .   Sibling: 4  Call: outnl of type void [line: 20]
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -P if2.c-
WARNING(1): Expecting to return type int but function 'main' has no return statement.
Func: main returns type int [line: 1]
.   Child: 1  Compound [line: 2]
.   .   Child: 1  If [line: 3]
.   .   .   Child: 0  Op: > of type bool [line: 3]
.   .   .   .   Child: 0  Const 1 of type int [line: 3]
.   .   .   .   Child: 1  Const 2 of type int [line: 3]
.   .   .   Child: 1  Const 3 of type int [line: 3]
.   .   Sibling: 1  If [line: 4]
.   .   .   Child: 0  Op: < of type bool [line: 4]
.   .   .   .   Child: 0  Const 21 of type int [line: 4]
.   .   .   .   Child: 1  Const 22 of type int [line: 4]
.   .   .   Child: 1  Const 23 of type int [line: 4]
.   .   .   Child: 2  Const 24 of type int [line: 4]
.   .   Sibling: 2  If [line: 5]
.   .   .   Child: 0  Op: = of type bool [line: 5]
.   .   .   .   Child: 0  Const 31 of type int [line: 5]
.   .   .   .   Child: 1  Const 32 of type int [line: 5]
.   .   .   Child: 1  If [line: 5]
.   .   .   .   Child: 0  Op: = of type bool [line: 5]
.   .   .   .   .   Child: 0  Const 33 of type int [line: 5]
.   .   .   .   .   Child: 1  Const 34 of type int [line: 5]
.   .   .   .   Child: 1  Const 35 of type int [line: 5]
.   .   .   .   Child: 2  Const 36 of type int [line: 5]
.   .   Sibling: 3  If [line: 6]
.   .   .   Child: 0  Op: = of type bool [line: 6]
.   .   .   .   Child: 0  Const 41 of type int [line: 6]
.   .   .   .   Child: 1  Const 42 of type int [line: 6]
.   .   .   Child: 1  If [line: 6]
.   .   .   .   Child: 0  Op: = of type bool [line: 6]
.   .   .   .   .   Child: 0  Const 43 of type int [line: 6]
.   .   .   .   .   Child: 1  Const 44 of type int [line: 6]
.   .   .   .   Child: 1  Const 45 of type int [line: 6]
.   .   .   .   Child: 2  Const 46 of type int [line: 6]
.   .   .   Child: 2  Const 47 of type int [line: 6]
.   .   Sibling: 4  If [line: 8]
.   .   .   Child: 0  Op: = of type bool [line: 8]
.   .   .   .   Child: 0  Const 51 of type int [line: 8]
.   .   .   .   Child: 1  Const 52 of type int [line: 8]
.   .   .   Child: 1  If [line: 9]
.   .   .   .   Child: 0  Op: = of type bool [line: 9]
.   .   .   .   .   Child: 0  Const 53 of type int [line: 9]
.   .   .   .   .   Child: 1  Const 54 of type int [line: 9]
.   .   .   .   Child: 1  Const 151 of type int [line: 9]
.   .   .   .   Child: 2  Const 152 of type int [line: 10]
.   .   .   Child: 2  If [line: 12]
.   .   .   .   Child: 0  Op: = of type bool [line: 12]
.   .   .   .   .   Child: 0  Const 56 of type int [line: 12]
.   .   .   .   .   Child: 1  Const 57 of type int [line: 12]
.   .   .   .   Child: 1  Const 58 of type int [line: 12]
.   .   .   .   Child: 2  Const 59 of type int [line: 13]
.   .   Sibling: 5  If [line: 15]
.   .   .   Child: 0  Op: = of type bool [line: 15]
.   .   .   .   Child: 0  Const 61 of type int [line: 15]
.   .   .   .   Child: 1  Const 1 of type int [line: 15]
.   .   .   Child: 1  Const 11 of type int [line: 15]
.   .   .   Child: 2  If [line: 16]
.   .   .   .   Child: 0  Op: = of type bool [line: 16]
.   .   .   .   .   Child: 0  Const 62 of type int [line: 16]
.   .   .   .   .   Child: 1  Const 1 of type int [line: 16]
.   .   .   .   Child: 1  Const 12 of type int [line: 16]
.   .   .   .   Child: 2  If [line: 17]
.   .   .   .   .   Child: 0  Op: = of type bool [line: 17]
.   .   .   .   .   .   Child: 0  Const 63 of type int [line: 17]
.   .   .   .   .   .   Child: 1  Const 1 of type int [line: 17]
.   .   .   .   .   Child: 1  Const 13 of type int [line: 17]
.   .   .   .   .   Child: 2  Const 14 of type int [line: 18]
Number of warnings: 1
Number of errors: 0

==============
==============
./c- -P if.c-
Func: main returns type void [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 0  Var: x of type int [line: 4]
.   .   Child: 1  Assign: <= of type int [line: 6]
.   .   .   Child: 0  Id: x of type int [line: 6]
.   .   .   Child: 1  Const 0 of type int [line: 6]
.   .   Sibling: 1  If [line: 8]
.   .   .   Child: 0  Const false of type bool [line: 8]
.   .   .   Child: 1  Assign: ++ of type int [line: 8]
.   .   .   .   Child: 0  Id: x of type int [line: 8]
.   .   Sibling: 2  If [line: 10]
.   .   .   Child: 0  Op: < of type bool [line: 10]
.   .   .   .   Child: 0  Id: x of type int [line: 10]
.   .   .   .   Child: 1  Const 10 of type int [line: 10]
.   .   .   Child: 1  Assign: ++ of type int [line: 10]
.   .   .   .   Child: 0  Id: x of type int [line: 10]
.   .   .   Child: 2  Assign: -- of type int [line: 11]
.   .   .   .   Child: 0  Id: x of type int [line: 11]
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -P ifevil.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(1): Expecting to return type int but function 'ant' has no return statement.
WARNING(1): The function 'ant' seems not to be used.
ERROR(5): Expecting Boolean test condition in if statement but got type int.
WARNING(5): Variable 'bat' may be uninitialized when used here.
WARNING(5): Variable 'hog' may be uninitialized when used here.
WARNING(6): Variable 'fox' may be uninitialized when used here.
ERROR(8): Expecting Boolean test condition in if statement but got type int.
ERROR(9): Expecting Boolean test condition in if statement but got type int.
ERROR(12): Expecting Boolean test condition in if statement but got type int.
ERROR(14): Expecting Boolean test condition in if statement but got type int.
ERROR(16): Expecting Boolean test condition in if statement but got type int.
ERROR(18): Expecting Boolean test condition in if statement but got type int.
ERROR(19): Expecting Boolean test condition in if statement but got type int.
Number of warnings: 5
Number of errors: 9

==============
==============
./c- -P ifNest.c-
WARNING(6): Variable 'x' may be uninitialized when used here.
WARNING(8): Variable 'y' may be uninitialized when used here.
WARNING(11): Variable 'z' may be uninitialized when used here.
Func: main returns type void [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 0  Var: x of type int [line: 4]
.   .   Sibling: 1  Var: y of type int [line: 4]
.   .   Sibling: 2  Var: z of type int [line: 4]
.   .   Child: 1  If [line: 6]
.   .   .   Child: 0  Op: !< of type bool [line: 6]
.   .   .   .   Child: 0  Id: x of type int [line: 6]
.   .   .   .   Child: 1  Const 0 of type int [line: 6]
.   .   .   Child: 1  If [line: 7]
.   .   .   .   Child: 0  Const true of type bool [line: 7]
.   .   .   .   Child: 1  Id: x of type int [line: 7]
.   .   .   .   Child: 2  Id: y of type int [line: 8]
.   .   Sibling: 1  Const 111 of type int [line: 9]
.   .   Sibling: 2  If [line: 10]
.   .   .   Child: 0  Op: !< of type bool [line: 10]
.   .   .   .   Child: 0  Id: y of type int [line: 10]
.   .   .   .   Child: 1  Const 0 of type int [line: 10]
.   .   .   Child: 1  Id: y of type int [line: 10]
.   .   .   Child: 2  If [line: 11]
.   .   .   .   Child: 0  Const true of type bool [line: 11]
.   .   .   .   Child: 1  Id: z of type int [line: 11]
.   .   Sibling: 3  Const 222 of type int [line: 12]
.   .   Sibling: 4  If [line: 13]
.   .   .   Child: 0  Op: !< of type bool [line: 13]
.   .   .   .   Child: 0  Id: y of type int [line: 13]
.   .   .   .   Child: 1  Const 0 of type int [line: 13]
.   .   .   Child: 1  Id: y of type int [line: 13]
.   .   .   Child: 2  If [line: 14]
.   .   .   .   Child: 0  Const true of type bool [line: 14]
.   .   .   .   Child: 1  Id: z of type int [line: 14]
.   .   .   .   Child: 2  Id: x of type int [line: 15]
.   .   Sibling: 5  Const 333 of type int [line: 16]
.   .   Sibling: 6  If [line: 17]
.   .   .   Child: 0  Op: !< of type bool [line: 17]
.   .   .   .   Child: 0  Id: x of type int [line: 17]
.   .   .   .   Child: 1  Const 0 of type int [line: 17]
.   .   .   Child: 1  If [line: 17]
.   .   .   .   Child: 0  Const true of type bool [line: 17]
.   .   .   .   Child: 1  Id: x of type int [line: 17]
.   .   .   .   Child: 2  Id: y of type int [line: 18]
.   .   .   Child: 2  Id: z of type int [line: 19]
Number of warnings: 3
Number of errors: 0

==============
==============
./c- -P init2.c-
WARNING(13): Variable 'b' may be uninitialized when used here.
Var: a is array of type int [line: 2]
Sibling: 1  Var: x of type int [line: 3]
.   Child: 0  Op: + of type int [line: 3]
.   .   Child: 0  Const 666 of type int [line: 3]
.   .   Child: 1  Op: * of type int [line: 3]
.   .   .   Child: 0  Const 777 of type int [line: 3]
.   .   .   Child: 1  Const 888 of type int [line: 3]
Sibling: 2  Func: main returns type void [line: 5]
.   Child: 1  Compound [line: 6]
.   .   Child: 0  Var: b is array of type int [line: 7]
.   .   Sibling: 1  Var: y of type int [line: 8]
.   .   .   Child: 0  Op: + of type int [line: 8]
.   .   .   .   Child: 0  Const 777 of type int [line: 8]
.   .   .   .   Child: 1  Op: * of type int [line: 8]
.   .   .   .   .   Child: 0  Const 666 of type int [line: 8]
.   .   .   .   .   Child: 1  Const 888 of type int [line: 8]
.   .   Sibling: 2  Var: c is array of type int [line: 9]
.   .   Sibling: 3  Var: z of type int [line: 10]
.   .   .   Child: 0  Op: + of type int [line: 10]
.   .   .   .   Child: 0  Const 888 of type int [line: 10]
.   .   .   .   Child: 1  Op: * of type int [line: 10]
.   .   .   .   .   Child: 0  Const 777 of type int [line: 10]
.   .   .   .   .   Child: 1  Const 666 of type int [line: 10]
.   .   Child: 1  Call: output of type void [line: 12]
.   .   .   Child: 0  Op: sizeof of type int [line: 12]
.   .   .   .   Child: 0  Id: a of type int [line: 12]
.   .   Sibling: 1  Call: output of type void [line: 13]
.   .   .   Child: 0  Op: sizeof of type int [line: 13]
.   .   .   .   Child: 0  Id: b of type int [line: 13]
.   .   Sibling: 2  Call: output of type void [line: 14]
.   .   .   Child: 0  Op: sizeof of type int [line: 14]
.   .   .   .   Child: 0  Id: c of type int [line: 14]
.   .   Sibling: 3  Call: outnl of type void [line: 15]
.   .   Sibling: 4  Call: output of type void [line: 17]
.   .   .   Child: 0  Id: x of type int [line: 17]
.   .   Sibling: 5  Call: output of type void [line: 18]
.   .   .   Child: 0  Id: y of type int [line: 18]
.   .   Sibling: 6  Call: output of type void [line: 19]
.   .   .   Child: 0  Id: z of type int [line: 19]
.   .   Sibling: 7  Call: outnl of type void [line: 20]
.   .   Sibling: 8  Assign: <= of type int [line: 22]
.   .   .   Child: 0  Id: z of type int [line: 22]
.   .   .   Child: 1  Const 999 of type int [line: 22]
Number of warnings: 1
Number of errors: 0

==============
==============
./c- -P init3.c-
Var: x of type int [line: 2]
.   Child: 0  Const 111 of type int [line: 2]
Sibling: 1  Func: main returns type void [line: 4]
.   Child: 1  Compound [line: 4]
.   .   Child: 0  Var: y of type int [line: 5]
.   .   .   Child: 0  Const 222 of type int [line: 5]
.   .   Sibling: 1  Var: z of type int [line: 6]
.   .   .   Child: 0  Const 333 of type int [line: 6]
.   .   Sibling: 2  Var: b of type bool [line: 7]
.   .   .   Child: 0  Const true of type bool [line: 7]
.   .   Sibling: 3  Var: c of type char [line: 8]
.   .   .   Child: 0  Const 'Z'  of type char [line: 8]
.   .   Child: 1  Call: output of type void [line: 10]
.   .   .   Child: 0  Id: x of type int [line: 10]
.   .   Sibling: 1  Call: output of type void [line: 11]
.   .   .   Child: 0  Id: y of type int [line: 11]
.   .   Sibling: 2  Call: output of type void [line: 12]
.   .   .   Child: 0  Id: z of type int [line: 12]
.   .   Sibling: 3  Call: outputb of type void [line: 13]
.   .   .   Child: 0  Id: b of type bool [line: 13]
.   .   Sibling: 4  Call: outputc of type void [line: 14]
.   .   .   Child: 0  Id: c of type char [line: 14]
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -P init4.c-
WARNING(1): Expecting to return type int but function 'main' has no return statement.
ERROR(4): Initializer for variable 'y' is not a constant expression.
WARNING(4): The variable 'y' seems not to be used.
ERROR(5): Initializer for variable 'roll' is not a constant expression.
WARNING(5): The variable 'roll' seems not to be used.
Number of warnings: 3
Number of errors: 2

==============
==============
./c- -P init5.c-
ERROR(2): Initializer for variable 's' is not a constant expression.
ERROR(2): Initializer for variable 't' of type int is of type char
ERROR(2): Initializer for variable 'u' of type int is of type char
ERROR(2): Symbol 's' is not declared.
WARNING(2): The variable 's' seems not to be used.
WARNING(2): The variable 't' seems not to be used.
WARNING(2): The variable 'u' seems not to be used.
ERROR(7): Initializer for variable 'b' requires both operands be arrays or not but variable is an array and rhs is not an array.
WARNING(7): The variable 'y' seems not to be used.
ERROR(9): Initializer for variable 'lenx' is not a constant expression.
WARNING(9): The variable 'k' seems not to be used.
WARNING(9): The variable 'lenx' seems not to be used.
WARNING(9): Variable 'x' may be uninitialized when used here.
WARNING(10): The variable 'ba' seems not to be used.
WARNING(10): The variable 'bb' seems not to be used.
WARNING(10): The variable 'bc' seems not to be used.
WARNING(11): The variable 'ca' seems not to be used.
WARNING(18): Variable 't' may be uninitialized when used here.
Number of warnings: 12
Number of errors: 6

==============
==============
./c- -P initbad2.c-
ERROR(1): Initializer for variable 'a' of type int is of type char
ERROR(2): Initializer for variable 'b' of type bool is of type int
ERROR(3): Initializer for variable 'c' of type char is of type bool
WARNING(4): The variable 's' seems not to be used.
ERROR(8): Initializer for variable 'aa' is not a constant expression.
WARNING(8): The variable 'aa' seems not to be used.
ERROR(9): Initializer for variable 'bb' is not a constant expression.
WARNING(9): The variable 'bb' seems not to be used.
ERROR(10): Initializer for variable 'cc' is not a constant expression.
WARNING(10): The variable 'cc' seems not to be used.
Number of warnings: 4
Number of errors: 6

==============
==============
./c- -P initbad.c-
ERROR(2): Initializer for variable 'a' requires both operands be arrays or not but variable is an array and rhs is not an array.
WARNING(2): The variable 'a' seems not to be used.
WARNING(3): The variable 'b' seems not to be used.
ERROR(4): Initializer for variable 'c' is not a constant expression.
WARNING(4): The variable 'c' seems not to be used.
WARNING(5): The variable 'd' seems not to be used.
ERROR(6): Initializer for variable 'x' of type int is of type char
ERROR(7): Initializer for variable 'y' of type int is of type char
ERROR(7): Initializer for variable 'y' requires both operands be arrays or not but variable is not an array and rhs is an array.
ERROR(8): Initializer for variable 'z' is not a constant expression.
ERROR(8): Initializer for variable 'z' of type int is of type void
ERROR(10): '<=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(11): '<=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(11): '<=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(12): '<=' requires operands of the same type but lhs is type int and rhs is type void.
Number of warnings: 4
Number of errors: 11

==============
==============
./c- -P init.c-
WARNING(3): The variable 'a' seems not to be used.
WARNING(4): The variable 'x' seems not to be used.
WARNING(8): The variable 'b' seems not to be used.
WARNING(9): The variable 'y' seems not to be used.
WARNING(10): The variable 'c' seems not to be used.
Var: a is array of type int [line: 3]
Sibling: 1  Var: x of type int [line: 4]
.   Child: 0  Const 666 of type int [line: 4]
Sibling: 2  Func: main returns type void [line: 6]
.   Child: 1  Compound [line: 7]
.   .   Child: 0  Var: b is array of type int [line: 8]
.   .   Sibling: 1  Var: y of type int [line: 9]
.   .   .   Child: 0  Const 777 of type int [line: 9]
.   .   Sibling: 2  Var: c is array of type int [line: 10]
.   .   Sibling: 3  Var: z of type int [line: 11]
.   .   .   Child: 0  Const 888 of type int [line: 11]
.   .   Child: 1  Assign: <= of type int [line: 13]
.   .   .   Child: 0  Id: z of type int [line: 13]
.   .   .   Child: 1  Const 999 of type int [line: 13]
Number of warnings: 5
Number of errors: 0

==============
==============
./c- -P initconst.c-
ERROR(3): Initializer for variable 'u' is not a constant expression.
WARNING(3): The variable 'u' seems not to be used.
ERROR(5): Initializer for variable 'y' is not a constant expression.
WARNING(5): The variable 'y' seems not to be used.
WARNING(6): The variable 'z' seems not to be used.
Number of warnings: 3
Number of errors: 2

==============
==============
./c- -P initused.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(1): The function 'ant' seems not to be used.
ERROR(2): Symbol 'z' is not declared.
ERROR(2): Symbol 'z' is not declared.
WARNING(5): The function 'bat' seems not to be used.
ERROR(6): Symbol 'z' is not declared.
ERROR(6): Symbol 'z' is not declared.
WARNING(9): The function 'cow' seems not to be used.
WARNING(11): Variable 'z' may be uninitialized when used here.
WARNING(14): The function 'dog' seems not to be used.
ERROR(16): 'z' is a simple variable and cannot be called.
ERROR(16): 'z' is a simple variable and cannot be called.
Number of warnings: 5
Number of errors: 7

==============
==============
./c- -P io.c-
ERROR(13): Symbol 'outputs' is not declared.
ERROR(49): Not expecting array in parameter 1 of call to 'output' declared on line -1.
WARNING(49): Variable 'xx' may be uninitialized when used here.
ERROR(50): Not expecting array in parameter 1 of call to 'outputb' declared on line -1.
WARNING(50): Variable 'bb' may be uninitialized when used here.
ERROR(51): Not expecting array in parameter 1 of call to 'outputc' declared on line -1.
WARNING(51): Variable 'cc' may be uninitialized when used here.
Number of warnings: 3
Number of errors: 4

==============
==============
./c- -P lhs.c-
WARNING(4): The variable 'dd' seems not to be used.
WARNING(9): Variable 'b' may be uninitialized when used here.
WARNING(10): Variable 'bb' may be uninitialized when used here.
WARNING(10): Variable 'c' may be uninitialized when used here.
WARNING(13): Variable 'f' may be uninitialized when used here.
Func: main returns type void [line: 1]
.   Child: 1  Compound [line: 2]
.   .   Child: 0  Var: a of type int [line: 3]
.   .   Sibling: 1  Var: b of type int [line: 3]
.   .   Sibling: 2  Var: c of type int [line: 3]
.   .   Sibling: 3  Var: d of type int [line: 3]
.   .   Sibling: 4  Var: e of type int [line: 3]
.   .   Sibling: 5  Var: f of type int [line: 3]
.   .   Sibling: 6  Var: aa is array of type int [line: 4]
.   .   Sibling: 7  Var: bb is array of type int [line: 4]
.   .   Sibling: 8  Var: cc is array of type int [line: 4]
.   .   Sibling: 9  Var: dd is array of type int [line: 4]
.   .   Sibling: 10  Var: ee is array of type int [line: 4]
.   .   Sibling: 11  Var: ff is array of type int [line: 4]
.   .   Child: 1  Assign: <= of type int [line: 9]
.   .   .   Child: 0  Op: [ of type int [line: 9]
.   .   .   .   Child: 0  Id: aa of type int [line: 9]
.   .   .   .   Child: 1  Id: a of type int [line: 9]
.   .   .   Child: 1  Id: b of type int [line: 9]
.   .   Sibling: 1  Assign: ++ of type int [line: 10]
.   .   .   Child: 0  Op: [ of type int [line: 10]
.   .   .   .   Child: 0  Id: bb of type int [line: 10]
.   .   .   .   Child: 1  Id: c of type int [line: 10]
.   .   Sibling: 2  Assign: <= of type int [line: 11]
.   .   .   Child: 0  Op: [ of type int [line: 11]
.   .   .   .   Child: 0  Id: cc of type int [line: 11]
.   .   .   .   Child: 1  Op: [ of type int [line: 11]
.   .   .   .   .   Child: 0  Id: aa of type int [line: 11]
.   .   .   .   .   Child: 1  Id: d of type int [line: 11]
.   .   .   Child: 1  Const 666 of type int [line: 11]
.   .   Sibling: 3  Assign: <= of type int [line: 12]
.   .   .   Child: 0  Op: [ of type int [line: 12]
.   .   .   .   Child: 0  Id: ee of type int [line: 12]
.   .   .   .   Child: 1  Op: [ of type int [line: 12]
.   .   .   .   .   Child: 0  Id: ff of type int [line: 12]
.   .   .   .   .   Child: 1  Const 3 of type int [line: 12]
.   .   .   Child: 1  Const 777 of type int [line: 12]
.   .   Sibling: 4  Assign: <= of type int [line: 13]
.   .   .   Child: 0  Id: e of type int [line: 13]
.   .   .   Child: 1  Id: f of type int [line: 13]
Number of warnings: 5
Number of errors: 0

==============
==============
./c- -P loops.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(4): Expecting to return type int but function 'dog' has no return statement.
WARNING(4): The function 'dog' seems not to be used.
WARNING(4): The parameter 'c' seems not to be used.
WARNING(4): The parameter 'd' seems not to be used.
WARNING(10): The variable 'y' seems not to be used.
ERROR(12): Symbol 'lyra' is already declared at line 11.
ERROR(16): Symbol 'asha' is not declared.
ERROR(16): Symbol 'bree' is not declared.
ERROR(16): Symbol 'cloe' is not declared.
WARNING(16): The variable 'lyra' seems not to be used.
ERROR(19): Symbol 'y' is not declared.
ERROR(20): Symbol 'y' is not declared.
WARNING(21): The variable 'y' seems not to be used.
WARNING(21): The variable 'z' seems not to be used.
Number of warnings: 8
Number of errors: 7

==============
==============
./c- -P loopscope2.c-
WARNING(3): The variable 'x' seems not to be used.
WARNING(6): The variable 'x' seems not to be used.
WARNING(10): The variable 'y' seems not to be used.
WARNING(11): The variable 'x' seems not to be used.
WARNING(14): The variable 'y' seems not to be used.
WARNING(15): The variable 'x' seems not to be used.
WARNING(18): The variable 'y' seems not to be used.
ERROR(19): Symbol 'y' is already declared at line 18.
WARNING(22): The variable 'y' seems not to be used.
WARNING(23): The variable 'y' seems not to be used.
WARNING(26): The variable 'y' seems not to be used.
WARNING(27): The variable 'y' seems not to be used.
Number of warnings: 11
Number of errors: 1

==============
==============
./c- -P loopscope.c-
ERROR(6): Symbol 'y' is already declared at line 5.
ERROR(11): Symbol 'y' is not declared.
Number of warnings: 0
Number of errors: 2

==============
==============
./c- -P matchunmatch.c-
WARNING(3): The variable 's' seems not to be used.
ERROR(6): Expecting Boolean test condition in if statement but got type int.
WARNING(6): Variable 'a' may be uninitialized when used here.
WARNING(6): Variable 'b' may be uninitialized when used here.
WARNING(6): Variable 't' may be uninitialized when used here.
ERROR(7): Expecting Boolean test condition in if statement but got type int.
WARNING(7): Variable 'u' may be uninitialized when used here.
ERROR(8): Expecting Boolean test condition in if statement but got type int.
WARNING(8): Variable 'c' may be uninitialized when used here.
WARNING(8): Variable 'd' may be uninitialized when used here.
WARNING(8): Variable 'v' may be uninitialized when used here.
ERROR(9): Expecting Boolean test condition in if statement but got type int.
ERROR(10): Expecting Boolean test condition in if statement but got type int.
WARNING(10): The variable 'z' seems not to be used.
ERROR(11): Expecting Boolean test condition in if statement but got type int.
WARNING(11): The variable 'z' seems not to be used.
Number of warnings: 10
Number of errors: 6

==============
==============
./c- -P minus.c-
Func: main returns type void [line: 1]
.   Child: 1  Compound [line: 2]
.   .   Child: 0  Var: x of type int [line: 3]
.   .   Child: 1  Assign: <= of type int [line: 5]
.   .   .   Child: 0  Id: x of type int [line: 5]
.   .   .   Child: 1  Const 333 of type int [line: 5]
.   .   Sibling: 1  Assign: <= of type int [line: 6]
.   .   .   Child: 0  Id: x of type int [line: 6]
.   .   .   Child: 1  Op: - of type int [line: 6]
.   .   .   .   Child: 0  Op: chsign of type int [line: 6]
.   .   .   .   .   Child: 0  Const 22 of type int [line: 6]
.   .   .   .   Child: 1  Op: chsign of type int [line: 6]
.   .   .   .   .   Child: 0  Id: x of type int [line: 6]
.   .   Sibling: 2  Assign: <= of type int [line: 7]
.   .   .   Child: 0  Id: x of type int [line: 7]
.   .   .   Child: 1  Op: + of type int [line: 7]
.   .   .   .   Child: 0  Const 4 of type int [line: 7]
.   .   .   .   Child: 1  Op: chsign of type int [line: 7]
.   .   .   .   .   Child: 0  Op: - of type int [line: 7]
.   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 7]
.   .   .   .   .   .   .   Child: 0  Id: x of type int [line: 7]
.   .   .   .   .   .   Child: 1  Op: chsign of type int [line: 7]
.   .   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 7]
.   .   .   .   .   .   .   .   Child: 0  Id: x of type int [line: 7]
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -P mixedControl2.c-
ERROR(4): Expecting Boolean test condition in if statement but got type int.
ERROR(5): Expecting Boolean test condition in while statement but got type int.
ERROR(6): Expecting Boolean test condition in if statement but got type int.
ERROR(7): Expecting Boolean test condition in while statement but got type int.
ERROR(11): Expecting Boolean test condition in if statement but got type int.
ERROR(12): Expecting Boolean test condition in while statement but got type int.
ERROR(14): Expecting Boolean test condition in while statement but got type int.
ERROR(16): Expecting Boolean test condition in if statement but got type int.
ERROR(17): Expecting Boolean test condition in while statement but got type int.
ERROR(18): Expecting Boolean test condition in while statement but got type int.
Number of warnings: 0
Number of errors: 10

==============
==============
./c- -P mixedControl3.c-
WARNING(4): The variable 'x' seems not to be used.
ERROR(6): Expecting Boolean test condition in if statement but got type int.
ERROR(8): Expecting Boolean test condition in if statement but got type int.
ERROR(13): Expecting Boolean test condition in if statement but got type int.
ERROR(18): Expecting Boolean test condition in if statement but got type int.
WARNING(19): The variable 'x' seems not to be used.
Number of warnings: 2
Number of errors: 4

==============
==============
./c- -P mixedControl.c-
WARNING(6): Variable 'x' may be uninitialized when used here.
WARNING(8): Variable 'y' may be uninitialized when used here.
WARNING(11): Variable 'z' may be uninitialized when used here.
Func: main returns type void [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 0  Var: x of type int [line: 4]
.   .   Sibling: 1  Var: y of type int [line: 4]
.   .   Sibling: 2  Var: z of type int [line: 4]
.   .   Child: 1  If [line: 6]
.   .   .   Child: 0  Op: !< of type bool [line: 6]
.   .   .   .   Child: 0  Id: x of type int [line: 6]
.   .   .   .   Child: 1  Const 0 of type int [line: 6]
.   .   .   Child: 1  While [line: 7]
.   .   .   .   Child: 0  Const true of type bool [line: 7]
.   .   .   .   Child: 1  Id: x of type int [line: 7]
.   .   .   Child: 2  Id: y of type int [line: 8]
.   .   Sibling: 1  Const 111 of type int [line: 9]
.   .   Sibling: 2  If [line: 10]
.   .   .   Child: 0  Op: !< of type bool [line: 10]
.   .   .   .   Child: 0  Id: y of type int [line: 10]
.   .   .   .   Child: 1  Const 0 of type int [line: 10]
.   .   .   Child: 1  Id: y of type int [line: 10]
.   .   .   Child: 2  While [line: 11]
.   .   .   .   Child: 0  Const true of type bool [line: 11]
.   .   .   .   Child: 1  Id: z of type int [line: 11]
.   .   Sibling: 3  Const 222 of type int [line: 12]
.   .   Sibling: 4  If [line: 13]
.   .   .   Child: 0  Op: !< of type bool [line: 13]
.   .   .   .   Child: 0  Id: y of type int [line: 13]
.   .   .   .   Child: 1  Const 0 of type int [line: 13]
.   .   .   Child: 1  Id: y of type int [line: 13]
.   .   Sibling: 5  While [line: 14]
.   .   .   Child: 0  Const true of type bool [line: 14]
.   .   .   Child: 1  If [line: 15]
.   .   .   .   Child: 0  Const true of type bool [line: 15]
.   .   .   .   Child: 1  Id: z of type int [line: 15]
.   .   .   .   Child: 2  Id: x of type int [line: 16]
.   .   Sibling: 6  Const 333 of type int [line: 17]
.   .   Sibling: 7  If [line: 18]
.   .   .   Child: 0  Op: !< of type bool [line: 18]
.   .   .   .   Child: 0  Id: x of type int [line: 18]
.   .   .   .   Child: 1  Const 0 of type int [line: 18]
.   .   .   Child: 1  While [line: 19]
.   .   .   .   Child: 0  Const true of type bool [line: 19]
.   .   .   .   Child: 1  If [line: 20]
.   .   .   .   .   Child: 0  Const true of type bool [line: 20]
.   .   .   .   .   Child: 1  Id: x of type int [line: 20]
.   .   .   .   .   Child: 2  Id: y of type int [line: 21]
.   .   .   Child: 2  Id: z of type int [line: 22]
.   .   Sibling: 8  Const 444 of type int [line: 23]
.   .   Sibling: 9  If [line: 24]
.   .   .   Child: 0  Op: !< of type bool [line: 24]
.   .   .   .   Child: 0  Id: x of type int [line: 24]
.   .   .   .   Child: 1  Const 0 of type int [line: 24]
.   .   .   Child: 1  Id: z of type int [line: 24]
.   .   .   Child: 2  If [line: 26]
.   .   .   .   Child: 0  Const true of type bool [line: 26]
.   .   .   .   Child: 1  While [line: 27]
.   .   .   .   .   Child: 0  Const true of type bool [line: 27]
.   .   .   .   .   Child: 1  If [line: 28]
.   .   .   .   .   .   Child: 0  Const true of type bool [line: 28]
.   .   .   .   .   .   Child: 1  Id: x of type int [line: 28]
.   .   .   .   .   .   Child: 2  Id: y of type int [line: 29]
.   .   .   .   Child: 2  Id: z of type int [line: 30]
Number of warnings: 3
Number of errors: 0

==============
==============
./c- -P nano.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(1): The parameter 'x' seems not to be used.
ERROR(3): Too many parameters passed for function 'main' declared on line 1.
Number of warnings: 1
Number of errors: 2

==============
==============
./c- -P nest.c-
Var: x of type int [line: 3]
Sibling: 1  Var: y of type int [line: 4]
Sibling: 2  Var: z of type int [line: 5]
Sibling: 3  Func: agamemnon returns type void [line: 7]
.   Child: 1  Compound [line: 8]
.   .   Child: 0  Var: a of type int [line: 9]
.   .   Sibling: 1  Var: b of type int [line: 10]
.   .   Sibling: 2  Var: x of type int [line: 11]
.   .   Child: 1  Assign: <= of type int [line: 13]
.   .   .   Child: 0  Id: a of type int [line: 13]
.   .   .   Child: 1  Const 666 of type int [line: 13]
.   .   Sibling: 1  Assign: <= of type int [line: 14]
.   .   .   Child: 0  Id: b of type int [line: 14]
.   .   .   Child: 1  Const 666 of type int [line: 14]
.   .   Sibling: 2  Assign: <= of type int [line: 15]
.   .   .   Child: 0  Id: x of type int [line: 15]
.   .   .   Child: 1  Const 666 of type int [line: 15]
.   .   Sibling: 3  Assign: <= of type int [line: 16]
.   .   .   Child: 0  Id: z of type int [line: 16]
.   .   .   Child: 1  Const 666 of type int [line: 16]
.   .   Sibling: 4  Call: output of type void [line: 18]
.   .   .   Child: 0  Id: a of type int [line: 18]
.   .   Sibling: 5  Call: output of type void [line: 19]
.   .   .   Child: 0  Id: b of type int [line: 19]
.   .   Sibling: 6  Call: output of type void [line: 20]
.   .   .   Child: 0  Id: x of type int [line: 20]
.   .   Sibling: 7  Call: output of type void [line: 21]
.   .   .   Child: 0  Id: y of type int [line: 21]
.   .   Sibling: 8  Call: output of type void [line: 22]
.   .   .   Child: 0  Id: z of type int [line: 22]
.   .   Sibling: 9  Call: outnl of type void [line: 23]
.   .   Sibling: 10  Assign: <= of type int [line: 24]
.   .   .   Child: 0  Id: a of type int [line: 24]
.   .   .   Child: 1  Const 1 of type int [line: 24]
.   .   Sibling: 11  Assign: <= of type int [line: 25]
.   .   .   Child: 0  Id: b of type int [line: 25]
.   .   .   Child: 1  Const 2 of type int [line: 25]
.   .   Sibling: 12  Assign: <= of type int [line: 26]
.   .   .   Child: 0  Id: x of type int [line: 26]
.   .   .   Child: 1  Const 3 of type int [line: 26]
.   .   Sibling: 13  Assign: <= of type int [line: 27]
.   .   .   Child: 0  Id: y of type int [line: 27]
.   .   .   Child: 1  Const 4 of type int [line: 27]
.   .   Sibling: 14  Assign: <= of type int [line: 28]
.   .   .   Child: 0  Id: z of type int [line: 28]
.   .   .   Child: 1  Const 5 of type int [line: 28]
Sibling: 4  Func: main returns type void [line: 31]
.   Child: 1  Compound [line: 32]
.   .   Child: 0  Var: a of type int [line: 33]
.   .   Sibling: 1  Var: b of type int [line: 34]
.   .   Sibling: 2  Var: z of type int [line: 35]
.   .   Child: 1  Assign: <= of type int [line: 37]
.   .   .   Child: 0  Id: a of type int [line: 37]
.   .   .   Child: 1  Const 6 of type int [line: 37]
.   .   Sibling: 1  Assign: <= of type int [line: 38]
.   .   .   Child: 0  Id: b of type int [line: 38]
.   .   .   Child: 1  Const 7 of type int [line: 38]
.   .   Sibling: 2  Assign: <= of type int [line: 39]
.   .   .   Child: 0  Id: x of type int [line: 39]
.   .   .   Child: 1  Const 8 of type int [line: 39]
.   .   Sibling: 3  Assign: <= of type int [line: 40]
.   .   .   Child: 0  Id: y of type int [line: 40]
.   .   .   Child: 1  Const 9 of type int [line: 40]
.   .   Sibling: 4  Assign: <= of type int [line: 41]
.   .   .   Child: 0  Id: z of type int [line: 41]
.   .   .   Child: 1  Const 10 of type int [line: 41]
.   .   Sibling: 5  Call: output of type void [line: 43]
.   .   .   Child: 0  Id: a of type int [line: 43]
.   .   Sibling: 6  Call: output of type void [line: 44]
.   .   .   Child: 0  Id: b of type int [line: 44]
.   .   Sibling: 7  Call: output of type void [line: 45]
.   .   .   Child: 0  Id: x of type int [line: 45]
.   .   Sibling: 8  Call: output of type void [line: 46]
.   .   .   Child: 0  Id: y of type int [line: 46]
.   .   Sibling: 9  Call: output of type void [line: 47]
.   .   .   Child: 0  Id: z of type int [line: 47]
.   .   Sibling: 10  Call: outnl of type void [line: 48]
.   .   Sibling: 11  Compound [line: 49]
.   .   .   Child: 0  Var: a of type int [line: 50]
.   .   .   Sibling: 1  Var: b of type int [line: 51]
.   .   .   Sibling: 2  Var: z of type int [line: 52]
.   .   .   Child: 1  Assign: <= of type int [line: 54]
.   .   .   .   Child: 0  Id: a of type int [line: 54]
.   .   .   .   Child: 1  Const 666 of type int [line: 54]
.   .   .   Sibling: 1  Assign: <= of type int [line: 55]
.   .   .   .   Child: 0  Id: b of type int [line: 55]
.   .   .   .   Child: 1  Const 666 of type int [line: 55]
.   .   .   Sibling: 2  Assign: <= of type int [line: 56]
.   .   .   .   Child: 0  Id: z of type int [line: 56]
.   .   .   .   Child: 1  Const 666 of type int [line: 56]
.   .   .   Sibling: 3  Call: output of type void [line: 58]
.   .   .   .   Child: 0  Id: a of type int [line: 58]
.   .   .   Sibling: 4  Call: output of type void [line: 59]
.   .   .   .   Child: 0  Id: b of type int [line: 59]
.   .   .   Sibling: 5  Call: output of type void [line: 60]
.   .   .   .   Child: 0  Id: x of type int [line: 60]
.   .   .   Sibling: 6  Call: output of type void [line: 61]
.   .   .   .   Child: 0  Id: y of type int [line: 61]
.   .   .   Sibling: 7  Call: output of type void [line: 62]
.   .   .   .   Child: 0  Id: z of type int [line: 62]
.   .   .   Sibling: 8  Call: outnl of type void [line: 63]
.   .   .   Sibling: 9  Assign: <= of type int [line: 65]
.   .   .   .   Child: 0  Id: a of type int [line: 65]
.   .   .   .   Child: 1  Const 11 of type int [line: 65]
.   .   .   Sibling: 10  Assign: <= of type int [line: 66]
.   .   .   .   Child: 0  Id: b of type int [line: 66]
.   .   .   .   Child: 1  Const 12 of type int [line: 66]
.   .   .   Sibling: 11  Assign: <= of type int [line: 67]
.   .   .   .   Child: 0  Id: x of type int [line: 67]
.   .   .   .   Child: 1  Const 13 of type int [line: 67]
.   .   .   Sibling: 12  Assign: <= of type int [line: 68]
.   .   .   .   Child: 0  Id: y of type int [line: 68]
.   .   .   .   Child: 1  Const 14 of type int [line: 68]
.   .   .   Sibling: 13  Assign: <= of type int [line: 69]
.   .   .   .   Child: 0  Id: z of type int [line: 69]
.   .   .   .   Child: 1  Const 15 of type int [line: 69]
.   .   .   Sibling: 14  Call: output of type void [line: 70]
.   .   .   .   Child: 0  Id: a of type int [line: 70]
.   .   .   Sibling: 15  Call: output of type void [line: 71]
.   .   .   .   Child: 0  Id: b of type int [line: 71]
.   .   .   Sibling: 16  Call: output of type void [line: 72]
.   .   .   .   Child: 0  Id: x of type int [line: 72]
.   .   .   Sibling: 17  Call: output of type void [line: 73]
.   .   .   .   Child: 0  Id: y of type int [line: 73]
.   .   .   Sibling: 18  Call: output of type void [line: 74]
.   .   .   .   Child: 0  Id: z of type int [line: 74]
.   .   .   Sibling: 19  Call: outnl of type void [line: 75]
.   .   .   Sibling: 20  Compound [line: 76]
.   .   .   .   Child: 1  Call: output of type void [line: 77]
.   .   .   .   .   Child: 0  Id: a of type int [line: 77]
.   .   .   .   Sibling: 1  Call: output of type void [line: 78]
.   .   .   .   .   Child: 0  Id: b of type int [line: 78]
.   .   .   .   Sibling: 2  Call: output of type void [line: 79]
.   .   .   .   .   Child: 0  Id: x of type int [line: 79]
.   .   .   .   Sibling: 3  Call: output of type void [line: 80]
.   .   .   .   .   Child: 0  Id: y of type int [line: 80]
.   .   .   .   Sibling: 4  Call: output of type void [line: 81]
.   .   .   .   .   Child: 0  Id: z of type int [line: 81]
.   .   .   .   Sibling: 5  Call: outnl of type void [line: 82]
.   .   .   .   Sibling: 6  Assign: <= of type int [line: 84]
.   .   .   .   .   Child: 0  Id: a of type int [line: 84]
.   .   .   .   .   Child: 1  Const 16 of type int [line: 84]
.   .   .   .   Sibling: 7  Assign: <= of type int [line: 85]
.   .   .   .   .   Child: 0  Id: b of type int [line: 85]
.   .   .   .   .   Child: 1  Const 17 of type int [line: 85]
.   .   .   .   Sibling: 8  Assign: <= of type int [line: 86]
.   .   .   .   .   Child: 0  Id: x of type int [line: 86]
.   .   .   .   .   Child: 1  Const 18 of type int [line: 86]
.   .   .   .   Sibling: 9  Assign: <= of type int [line: 87]
.   .   .   .   .   Child: 0  Id: y of type int [line: 87]
.   .   .   .   .   Child: 1  Const 19 of type int [line: 87]
.   .   .   .   Sibling: 10  Assign: <= of type int [line: 88]
.   .   .   .   .   Child: 0  Id: z of type int [line: 88]
.   .   .   .   .   Child: 1  Const 20 of type int [line: 88]
.   .   .   .   Sibling: 11  Call: output of type void [line: 89]
.   .   .   .   .   Child: 0  Id: a of type int [line: 89]
.   .   .   .   Sibling: 12  Call: output of type void [line: 90]
.   .   .   .   .   Child: 0  Id: b of type int [line: 90]
.   .   .   .   Sibling: 13  Call: output of type void [line: 91]
.   .   .   .   .   Child: 0  Id: x of type int [line: 91]
.   .   .   .   Sibling: 14  Call: output of type void [line: 92]
.   .   .   .   .   Child: 0  Id: y of type int [line: 92]
.   .   .   .   Sibling: 15  Call: output of type void [line: 93]
.   .   .   .   .   Child: 0  Id: z of type int [line: 93]
.   .   .   .   Sibling: 16  Call: outnl of type void [line: 94]
.   .   .   Sibling: 21  Call: output of type void [line: 97]
.   .   .   .   Child: 0  Id: a of type int [line: 97]
.   .   .   Sibling: 22  Call: output of type void [line: 98]
.   .   .   .   Child: 0  Id: b of type int [line: 98]
.   .   .   Sibling: 23  Call: output of type void [line: 99]
.   .   .   .   Child: 0  Id: x of type int [line: 99]
.   .   .   Sibling: 24  Call: output of type void [line: 100]
.   .   .   .   Child: 0  Id: y of type int [line: 100]
.   .   .   Sibling: 25  Call: output of type void [line: 101]
.   .   .   .   Child: 0  Id: z of type int [line: 101]
.   .   .   Sibling: 26  Call: outnl of type void [line: 102]
.   .   .   Sibling: 27  Call: agamemnon of type void [line: 104]
.   .   .   Sibling: 28  Call: output of type void [line: 106]
.   .   .   .   Child: 0  Id: a of type int [line: 106]
.   .   .   Sibling: 29  Call: output of type void [line: 107]
.   .   .   .   Child: 0  Id: b of type int [line: 107]
.   .   .   Sibling: 30  Call: output of type void [line: 108]
.   .   .   .   Child: 0  Id: x of type int [line: 108]
.   .   .   Sibling: 31  Call: output of type void [line: 109]
.   .   .   .   Child: 0  Id: y of type int [line: 109]
.   .   .   Sibling: 32  Call: output of type void [line: 110]
.   .   .   .   Child: 0  Id: z of type int [line: 110]
.   .   .   Sibling: 33  Call: outnl of type void [line: 111]
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -P nested.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(1): The function 'fred' seems not to be used.
WARNING(3): The variable 'i' seems not to be used.
WARNING(4): The variable 'i' seems not to be used.
WARNING(6): The variable 'i' seems not to be used.
WARNING(8): The variable 'i' seems not to be used.
WARNING(12): The function 'cat' seems not to be used.
WARNING(12): The parameter 'i' seems not to be used.
WARNING(14): The variable 'i' seems not to be used.
WARNING(18): The function 'errorZ' seems not to be used.
WARNING(18): The parameter 'i' seems not to be used.
ERROR(19): Symbol 'i' is already declared at line 18.
WARNING(21): The variable 'i' seems not to be used.
WARNING(24): The variable 'i' seems not to be used.
WARNING(28): The variable 'i' seems not to be used.
ERROR(30): Symbol 'i' is already declared at line 28.
Number of warnings: 13
Number of errors: 3

==============
==============
./c- -P nestedfors.c-
WARNING(7): The variable 'j' seems not to be used.
Func: main returns type void [line: 1]
.   Child: 1  Compound [line: 2]
.   .   Child: 0  Var: n of type int [line: 3]
.   .   Child: 1  Assign: <= of type int [line: 5]
.   .   .   Child: 0  Id: n of type int [line: 5]
.   .   .   Child: 1  Const 0 of type int [line: 5]
.   .   Sibling: 1  For [line: 6]
.   .   .   Child: 0  Var: i of type int [line: 6]
.   .   .   Child: 1  Range [line: 6]
.   .   .   .   Child: 0  Const 1 of type int [line: 6]
.   .   .   .   Child: 1  Const 10 of type int [line: 6]
.   .   .   Child: 2  Compound [line: 6]
.   .   .   .   Child: 1  For [line: 7]
.   .   .   .   .   Child: 0  Var: j of type int [line: 7]
.   .   .   .   .   Child: 1  Range [line: 7]
.   .   .   .   .   .   Child: 0  Const 1 of type int [line: 7]
.   .   .   .   .   .   Child: 1  Id: i of type int [line: 7]
.   .   .   .   .   Child: 2  Assign: ++ of type int [line: 7]
.   .   .   .   .   .   Child: 0  Id: n of type int [line: 7]
.   .   .   .   Sibling: 1  Call: output of type void [line: 8]
.   .   .   .   .   Child: 0  Id: i of type int [line: 8]
.   .   .   .   Sibling: 2  Call: output of type void [line: 9]
.   .   .   .   .   Child: 0  Id: n of type int [line: 9]
.   .   .   .   Sibling: 3  Call: outnl of type void [line: 10]
Number of warnings: 1
Number of errors: 0

==============
==============
./c- -P notused.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(1): The variable 'g' seems not to be used.
WARNING(8): Expecting to return type int but function 'main' has no return statement.
WARNING(8): The parameter 'u' seems not to be used.
WARNING(8): The parameter 'z' seems not to be used.
WARNING(10): The variable 'w' seems not to be used.
WARNING(12): The variable 'y' seems not to be used.
WARNING(20): Expecting to return type int but function 'elk' has no return statement.
WARNING(20): The function 'elk' seems not to be used.
ERROR(21): Cannot use function 'dog' as a variable.
ERROR(22): Symbol 'klingon' is not declared.
ERROR(23): Symbol 'klingon' is not declared.
ERROR(23): Symbol 'romulon' is not declared.
Number of warnings: 8
Number of errors: 5

==============
==============
./c- -P oparray.c-
WARNING(9): The variable 'ya' seems not to be used.
WARNING(9): The variable 'y' seems not to be used.
ERROR(11): Cannot index nonarray 'main'.
ERROR(11): Cannot use function 'main' as a variable.
WARNING(13): Variable 'xa' may be uninitialized when used here.
WARNING(14): Variable 'ca' may be uninitialized when used here.
WARNING(15): Variable 'ba' may be uninitialized when used here.
ERROR(16): '<=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(17): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(18): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(20): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
WARNING(20): Variable 'x' may be uninitialized when used here.
ERROR(21): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
WARNING(21): Variable 'c' may be uninitialized when used here.
ERROR(22): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
WARNING(22): Variable 'b' may be uninitialized when used here.
ERROR(23): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(23): '<=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(24): '<=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(24): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(26): '<=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(27): '<=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(28): '<=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(29): '<=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(29): '<=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(30): '<=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(30): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(39): '>' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(40): '>' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(42): The operation '?' does not work with arrays.
ERROR(45): The operation 'sizeof' only works with arrays.
ERROR(46): Cannot index nonarray 'x'.
ERROR(47): Cannot index nonarray 'x'.
ERROR(47): The operation 'sizeof' only works with arrays.
ERROR(49): The operation 'sizeof' only works with arrays.
Number of warnings: 8
Number of errors: 27

==============
==============
./c- -P ops.c-
Var: y is array of type int [line: 4]
Sibling: 1  Var: x of type bool [line: 5]
Sibling: 2  Func: main returns type void [line: 7]
.   Child: 1  Compound [line: 8]
.   .   Child: 0  Var: a of type int [line: 9]
.   .   Sibling: 1  Var: b of type int [line: 10]
.   .   Sibling: 2  Var: c of type int [line: 11]
.   .   Sibling: 3  Var: z of type bool [line: 12]
.   .   Child: 1  Assign: <= of type int [line: 14]
.   .   .   Child: 0  Op: [ of type int [line: 14]
.   .   .   .   Child: 0  Id: y of type int [line: 14]
.   .   .   .   Child: 1  Const 0 of type int [line: 14]
.   .   .   Child: 1  Const 50 of type int [line: 14]
.   .   Sibling: 1  Assign: <= of type int [line: 15]
.   .   .   Child: 0  Op: [ of type int [line: 15]
.   .   .   .   Child: 0  Id: y of type int [line: 15]
.   .   .   .   Child: 1  Const 5 of type int [line: 15]
.   .   .   Child: 1  Const 1 of type int [line: 15]
.   .   Sibling: 2  Assign: <= of type int [line: 16]
.   .   .   Child: 0  Op: [ of type int [line: 16]
.   .   .   .   Child: 0  Id: y of type int [line: 16]
.   .   .   .   Child: 1  Const 8 of type int [line: 16]
.   .   .   Child: 1  Const 2 of type int [line: 16]
.   .   Sibling: 3  Assign: <= of type int [line: 18]
.   .   .   Child: 0  Id: a of type int [line: 18]
.   .   .   Child: 1  Const 50 of type int [line: 18]
.   .   Sibling: 4  Assign: <= of type int [line: 19]
.   .   .   Child: 0  Id: b of type int [line: 19]
.   .   .   Child: 1  Const 1 of type int [line: 19]
.   .   Sibling: 5  Assign: <= of type int [line: 20]
.   .   .   Child: 0  Id: c of type int [line: 20]
.   .   .   Child: 1  Const 8 of type int [line: 20]
.   .   Sibling: 6  Assign: <= of type bool [line: 22]
.   .   .   Child: 0  Id: x of type bool [line: 22]
.   .   .   Child: 1  Const false of type bool [line: 22]
.   .   Sibling: 7  Assign: <= of type bool [line: 23]
.   .   .   Child: 0  Id: z of type bool [line: 23]
.   .   .   Child: 1  Const true of type bool [line: 23]
.   .   Sibling: 8  Call: outputb of type void [line: 25]
.   .   .   Child: 0  Op: !> of type bool [line: 25]
.   .   .   .   Child: 0  Id: a of type int [line: 25]
.   .   .   .   Child: 1  Const 1 of type int [line: 25]
.   .   Sibling: 9  Call: outputb of type void [line: 26]
.   .   .   Child: 0  Op: !> of type bool [line: 26]
.   .   .   .   Child: 0  Id: b of type int [line: 26]
.   .   .   .   Child: 1  Const 50 of type int [line: 26]
.   .   Sibling: 10  Call: outputb of type void [line: 27]
.   .   .   Child: 0  Op: !> of type bool [line: 27]
.   .   .   .   Child: 0  Const 50 of type int [line: 27]
.   .   .   .   Child: 1  Const 50 of type int [line: 27]
.   .   Sibling: 11  Call: outnl of type void [line: 28]
.   .   Sibling: 12  Call: outputb of type void [line: 30]
.   .   .   Child: 0  Op: < of type bool [line: 30]
.   .   .   .   Child: 0  Const 50 of type int [line: 30]
.   .   .   .   Child: 1  Const 1 of type int [line: 30]
.   .   Sibling: 13  Call: outputb of type void [line: 31]
.   .   .   Child: 0  Op: < of type bool [line: 31]
.   .   .   .   Child: 0  Id: b of type int [line: 31]
.   .   .   .   Child: 1  Id: a of type int [line: 31]
.   .   Sibling: 14  Call: outputb of type void [line: 32]
.   .   .   Child: 0  Op: < of type bool [line: 32]
.   .   .   .   Child: 0  Id: a of type int [line: 32]
.   .   .   .   Child: 1  Id: a of type int [line: 32]
.   .   Sibling: 15  Call: outnl of type void [line: 33]
.   .   Sibling: 16  Call: outputb of type void [line: 35]
.   .   .   Child: 0  Op: > of type bool [line: 35]
.   .   .   .   Child: 0  Const 50 of type int [line: 35]
.   .   .   .   Child: 1  Const 1 of type int [line: 35]
.   .   Sibling: 17  Call: outputb of type void [line: 36]
.   .   .   Child: 0  Op: > of type bool [line: 36]
.   .   .   .   Child: 0  Const 1 of type int [line: 36]
.   .   .   .   Child: 1  Const 50 of type int [line: 36]
.   .   Sibling: 18  Call: outputb of type void [line: 37]
.   .   .   Child: 0  Op: > of type bool [line: 37]
.   .   .   .   Child: 0  Const 50 of type int [line: 37]
.   .   .   .   Child: 1  Const 50 of type int [line: 37]
.   .   Sibling: 19  Call: outnl of type void [line: 38]
.   .   Sibling: 20  Call: outputb of type void [line: 40]
.   .   .   Child: 0  Op: !< of type bool [line: 40]
.   .   .   .   Child: 0  Const 50 of type int [line: 40]
.   .   .   .   Child: 1  Const 1 of type int [line: 40]
.   .   Sibling: 21  Call: outputb of type void [line: 41]
.   .   .   Child: 0  Op: !< of type bool [line: 41]
.   .   .   .   Child: 0  Const 1 of type int [line: 41]
.   .   .   .   Child: 1  Const 50 of type int [line: 41]
.   .   Sibling: 22  Call: outputb of type void [line: 42]
.   .   .   Child: 0  Op: !< of type bool [line: 42]
.   .   .   .   Child: 0  Const 50 of type int [line: 42]
.   .   .   .   Child: 1  Const 50 of type int [line: 42]
.   .   Sibling: 23  Call: outnl of type void [line: 43]
.   .   Sibling: 24  Call: outputb of type void [line: 45]
.   .   .   Child: 0  Op: = of type bool [line: 45]
.   .   .   .   Child: 0  Op: [ of type int [line: 45]
.   .   .   .   .   Child: 0  Id: y of type int [line: 45]
.   .   .   .   .   Child: 1  Const 0 of type int [line: 45]
.   .   .   .   Child: 1  Id: b of type int [line: 45]
.   .   Sibling: 25  Call: outputb of type void [line: 46]
.   .   .   Child: 0  Op: = of type bool [line: 46]
.   .   .   .   Child: 0  Id: a of type int [line: 46]
.   .   .   .   Child: 1  Id: b of type int [line: 46]
.   .   Sibling: 26  Call: outputb of type void [line: 47]
.   .   .   Child: 0  Op: = of type bool [line: 47]
.   .   .   .   Child: 0  Id: b of type int [line: 47]
.   .   .   .   Child: 1  Id: b of type int [line: 47]
.   .   Sibling: 27  Call: outnl of type void [line: 48]
.   .   Sibling: 28  Call: outputb of type void [line: 50]
.   .   .   Child: 0  Op: != of type bool [line: 50]
.   .   .   .   Child: 0  Op: [ of type int [line: 50]
.   .   .   .   .   Child: 0  Id: y of type int [line: 50]
.   .   .   .   .   Child: 1  Const 0 of type int [line: 50]
.   .   .   .   Child: 1  Id: a of type int [line: 50]
.   .   Sibling: 29  Call: outputb of type void [line: 51]
.   .   .   Child: 0  Op: != of type bool [line: 51]
.   .   .   .   Child: 0  Op: [ of type int [line: 51]
.   .   .   .   .   Child: 0  Id: y of type int [line: 51]
.   .   .   .   .   Child: 1  Const 0 of type int [line: 51]
.   .   .   .   Child: 1  Id: b of type int [line: 51]
.   .   Sibling: 30  Call: outputb of type void [line: 52]
.   .   .   Child: 0  Op: != of type bool [line: 52]
.   .   .   .   Child: 0  Id: a of type int [line: 52]
.   .   .   .   Child: 1  Id: b of type int [line: 52]
.   .   Sibling: 31  Call: outputb of type void [line: 53]
.   .   .   Child: 0  Op: != of type bool [line: 53]
.   .   .   .   Child: 0  Id: b of type int [line: 53]
.   .   .   .   Child: 1  Id: b of type int [line: 53]
.   .   Sibling: 32  Call: outnl of type void [line: 54]
.   .   Sibling: 33  Call: outputb of type void [line: 56]
.   .   .   Child: 0  Op: and of type bool [line: 56]
.   .   .   .   Child: 0  Const true of type bool [line: 56]
.   .   .   .   Child: 1  Const true of type bool [line: 56]
.   .   Sibling: 34  Call: outputb of type void [line: 57]
.   .   .   Child: 0  Op: and of type bool [line: 57]
.   .   .   .   Child: 0  Const true of type bool [line: 57]
.   .   .   .   Child: 1  Const false of type bool [line: 57]
.   .   Sibling: 35  Call: outputb of type void [line: 58]
.   .   .   Child: 0  Op: and of type bool [line: 58]
.   .   .   .   Child: 0  Const false of type bool [line: 58]
.   .   .   .   Child: 1  Const true of type bool [line: 58]
.   .   Sibling: 36  Call: outputb of type void [line: 59]
.   .   .   Child: 0  Op: and of type bool [line: 59]
.   .   .   .   Child: 0  Const false of type bool [line: 59]
.   .   .   .   Child: 1  Const false of type bool [line: 59]
.   .   Sibling: 37  Call: outnl of type void [line: 60]
.   .   Sibling: 38  Call: outputb of type void [line: 62]
.   .   .   Child: 0  Op: or of type bool [line: 62]
.   .   .   .   Child: 0  Const true of type bool [line: 62]
.   .   .   .   Child: 1  Const true of type bool [line: 62]
.   .   Sibling: 39  Call: outputb of type void [line: 63]
.   .   .   Child: 0  Op: or of type bool [line: 63]
.   .   .   .   Child: 0  Id: z of type bool [line: 63]
.   .   .   .   Child: 1  Const false of type bool [line: 63]
.   .   Sibling: 40  Call: outputb of type void [line: 64]
.   .   .   Child: 0  Op: or of type bool [line: 64]
.   .   .   .   Child: 0  Const false of type bool [line: 64]
.   .   .   .   Child: 1  Const true of type bool [line: 64]
.   .   Sibling: 41  Call: outputb of type void [line: 65]
.   .   .   Child: 0  Op: or of type bool [line: 65]
.   .   .   .   Child: 0  Const false of type bool [line: 65]
.   .   .   .   Child: 1  Const false of type bool [line: 65]
.   .   Sibling: 42  Call: outnl of type void [line: 66]
.   .   Sibling: 43  Call: outputb of type void [line: 68]
.   .   .   Child: 0  Op: not of type bool [line: 68]
.   .   .   .   Child: 0  Const true of type bool [line: 68]
.   .   Sibling: 44  Call: outputb of type void [line: 69]
.   .   .   Child: 0  Op: not of type bool [line: 69]
.   .   .   .   Child: 0  Const false of type bool [line: 69]
.   .   Sibling: 45  Call: outputb of type void [line: 70]
.   .   .   Child: 0  Op: not of type bool [line: 70]
.   .   .   .   Child: 0  Id: x of type bool [line: 70]
.   .   Sibling: 46  Call: outputb of type void [line: 71]
.   .   .   Child: 0  Op: not of type bool [line: 71]
.   .   .   .   Child: 0  Op: not of type bool [line: 71]
.   .   .   .   .   Child: 0  Op: not of type bool [line: 71]
.   .   .   .   .   .   Child: 0  Id: x of type bool [line: 71]
.   .   Sibling: 47  Call: outnl of type void [line: 72]
.   .   Sibling: 48  Call: output of type void [line: 74]
.   .   .   Child: 0  Op: + of type int [line: 74]
.   .   .   .   Child: 0  Const 5 of type int [line: 74]
.   .   .   .   Child: 1  Const 50 of type int [line: 74]
.   .   Sibling: 49  Call: output of type void [line: 75]
.   .   .   Child: 0  Op: + of type int [line: 75]
.   .   .   .   Child: 0  Op: [ of type int [line: 75]
.   .   .   .   .   Child: 0  Id: y of type int [line: 75]
.   .   .   .   .   Child: 1  Id: c of type int [line: 75]
.   .   .   .   Child: 1  Const 50 of type int [line: 75]
.   .   Sibling: 50  Call: outnl of type void [line: 76]
.   .   Sibling: 51  Call: output of type void [line: 78]
.   .   .   Child: 0  Op: - of type int [line: 78]
.   .   .   .   Child: 0  Const 5 of type int [line: 78]
.   .   .   .   Child: 1  Const 50 of type int [line: 78]
.   .   Sibling: 52  Call: output of type void [line: 79]
.   .   .   Child: 0  Op: - of type int [line: 79]
.   .   .   .   Child: 0  Op: - of type int [line: 79]
.   .   .   .   .   Child: 0  Const 30 of type int [line: 79]
.   .   .   .   .   Child: 1  Const 5 of type int [line: 79]
.   .   .   .   Child: 1  Const 50 of type int [line: 79]
.   .   Sibling: 53  Call: outnl of type void [line: 80]
.   .   Sibling: 54  Assign: <= of type int [line: 82]
.   .   .   Child: 0  Id: a of type int [line: 82]
.   .   .   Child: 1  Const 50 of type int [line: 82]
.   .   Sibling: 55  Call: output of type void [line: 83]
.   .   .   Child: 0  Op: chsign of type int [line: 83]
.   .   .   .   Child: 0  Id: a of type int [line: 83]
.   .   Sibling: 56  Call: output of type void [line: 84]
.   .   .   Child: 0  Op: chsign of type int [line: 84]
.   .   .   .   Child: 0  Op: chsign of type int [line: 84]
.   .   .   .   .   Child: 0  Id: a of type int [line: 84]
.   .   Sibling: 57  Call: output of type void [line: 85]
.   .   .   Child: 0  Op: chsign of type int [line: 85]
.   .   .   .   Child: 0  Id: a of type int [line: 85]
.   .   Sibling: 58  Call: output of type void [line: 86]
.   .   .   Child: 0  Op: chsign of type int [line: 86]
.   .   .   .   Child: 0  Const 0 of type int [line: 86]
.   .   Sibling: 59  Call: output of type void [line: 87]
.   .   .   Child: 0  Op: chsign of type int [line: 87]
.   .   .   .   Child: 0  Const 1 of type int [line: 87]
.   .   Sibling: 60  Call: outnl of type void [line: 88]
.   .   Sibling: 61  Call: output of type void [line: 90]
.   .   .   Child: 0  Op: * of type int [line: 90]
.   .   .   .   Child: 0  Op: * of type int [line: 90]
.   .   .   .   .   Child: 0  Op: * of type int [line: 90]
.   .   .   .   .   .   Child: 0  Op: * of type int [line: 90]
.   .   .   .   .   .   .   Child: 0  Const 2 of type int [line: 90]
.   .   .   .   .   .   .   Child: 1  Const 3 of type int [line: 90]
.   .   .   .   .   .   Child: 1  Const 5 of type int [line: 90]
.   .   .   .   .   Child: 1  Const 7 of type int [line: 90]
.   .   .   .   Child: 1  Const 11 of type int [line: 90]
.   .   Sibling: 62  Call: output of type void [line: 91]
.   .   .   Child: 0  Op: * of type int [line: 91]
.   .   .   .   Child: 0  Const 50 of type int [line: 91]
.   .   .   .   Child: 1  Op: [ of type int [line: 91]
.   .   .   .   .   Child: 0  Id: y of type int [line: 91]
.   .   .   .   .   Child: 1  Const 8 of type int [line: 91]
.   .   Sibling: 63  Call: output of type void [line: 92]
.   .   .   Child: 0  Op: * of type int [line: 92]
.   .   .   .   Child: 0  Op: [ of type int [line: 92]
.   .   .   .   .   Child: 0  Id: y of type int [line: 92]
.   .   .   .   .   Child: 1  Const 8 of type int [line: 92]
.   .   .   .   Child: 1  Const 50 of type int [line: 92]
.   .   Sibling: 64  Call: outnl of type void [line: 93]
.   .   Sibling: 65  Call: output of type void [line: 95]
.   .   .   Child: 0  Op: / of type int [line: 95]
.   .   .   .   Child: 0  Const 50 of type int [line: 95]
.   .   .   .   Child: 1  Op: [ of type int [line: 95]
.   .   .   .   .   Child: 0  Id: y of type int [line: 95]
.   .   .   .   .   Child: 1  Const 8 of type int [line: 95]
.   .   Sibling: 66  Call: output of type void [line: 96]
.   .   .   Child: 0  Op: / of type int [line: 96]
.   .   .   .   Child: 0  Op: [ of type int [line: 96]
.   .   .   .   .   Child: 0  Id: y of type int [line: 96]
.   .   .   .   .   Child: 1  Const 8 of type int [line: 96]
.   .   .   .   Child: 1  Const 50 of type int [line: 96]
.   .   Sibling: 67  Call: output of type void [line: 97]
.   .   .   Child: 0  Op: / of type int [line: 97]
.   .   .   .   Child: 0  Op: [ of type int [line: 97]
.   .   .   .   .   Child: 0  Id: y of type int [line: 97]
.   .   .   .   .   Child: 1  Const 8 of type int [line: 97]
.   .   .   .   Child: 1  Id: b of type int [line: 97]
.   .   Sibling: 68  Call: output of type void [line: 98]
.   .   .   Child: 0  Op: / of type int [line: 98]
.   .   .   .   Child: 0  Op: / of type int [line: 98]
.   .   .   .   .   Child: 0  Const 210 of type int [line: 98]
.   .   .   .   .   Child: 1  Const 7 of type int [line: 98]
.   .   .   .   Child: 1  Const 3 of type int [line: 98]
.   .   Sibling: 69  Call: outnl of type void [line: 99]
.   .   Sibling: 70  Call: output of type void [line: 102]
.   .   .   Child: 0  Op: % of type int [line: 102]
.   .   .   .   Child: 0  Const 211 of type int [line: 102]
.   .   .   .   Child: 1  Const 7 of type int [line: 102]
.   .   Sibling: 71  Call: output of type void [line: 103]
.   .   .   Child: 0  Op: % of type int [line: 103]
.   .   .   .   Child: 0  Const 211 of type int [line: 103]
.   .   .   .   Child: 1  Const 6 of type int [line: 103]
.   .   Sibling: 72  Call: output of type void [line: 104]
.   .   .   Child: 0  Op: % of type int [line: 104]
.   .   .   .   Child: 0  Const 211 of type int [line: 104]
.   .   .   .   Child: 1  Const 5 of type int [line: 104]
.   .   Sibling: 73  Call: output of type void [line: 105]
.   .   .   Child: 0  Op: % of type int [line: 105]
.   .   .   .   Child: 0  Const 211 of type int [line: 105]
.   .   .   .   Child: 1  Const 4 of type int [line: 105]
.   .   Sibling: 74  Call: output of type void [line: 106]
.   .   .   Child: 0  Op: - of type int [line: 106]
.   .   .   .   Child: 0  Const 211 of type int [line: 106]
.   .   .   .   Child: 1  Op: * of type int [line: 106]
.   .   .   .   .   Child: 0  Op: / of type int [line: 106]
.   .   .   .   .   .   Child: 0  Const 211 of type int [line: 106]
.   .   .   .   .   .   Child: 1  Const 4 of type int [line: 106]
.   .   .   .   .   Child: 1  Const 4 of type int [line: 106]
.   .   Sibling: 75  Call: output of type void [line: 107]
.   .   .   Child: 0  Op: % of type int [line: 107]
.   .   .   .   Child: 0  Op: % of type int [line: 107]
.   .   .   .   .   Child: 0  Const 211 of type int [line: 107]
.   .   .   .   .   Child: 1  Const 100 of type int [line: 107]
.   .   .   .   Child: 1  Const 3 of type int [line: 107]
.   .   Sibling: 76  Call: outnl of type void [line: 108]
.   .   Sibling: 77  Call: output of type void [line: 110]
.   .   .   Child: 0  Assign: <= of type int [line: 110]
.   .   .   .   Child: 0  Id: a of type int [line: 110]
.   .   .   .   Child: 1  Assign: <= of type int [line: 110]
.   .   .   .   .   Child: 0  Id: b of type int [line: 110]
.   .   .   .   .   Child: 1  Assign: <= of type int [line: 110]
.   .   .   .   .   .   Child: 0  Id: c of type int [line: 110]
.   .   .   .   .   .   Child: 1  Const 43 of type int [line: 110]
.   .   Sibling: 78  Call: output of type void [line: 111]
.   .   .   Child: 0  Id: a of type int [line: 111]
.   .   Sibling: 79  Assign: <= of type int [line: 112]
.   .   .   Child: 0  Id: a of type int [line: 112]
.   .   .   Child: 1  Op: * of type int [line: 112]
.   .   .   .   Child: 0  Assign: <= of type int [line: 112]
.   .   .   .   .   Child: 0  Id: b of type int [line: 112]
.   .   .   .   .   Child: 1  Const 3 of type int [line: 112]
.   .   .   .   Child: 1  Assign: <= of type int [line: 112]
.   .   .   .   .   Child: 0  Id: c of type int [line: 112]
.   .   .   .   .   Child: 1  Const 4 of type int [line: 112]
.   .   Sibling: 80  Call: output of type void [line: 113]
.   .   .   Child: 0  Id: a of type int [line: 113]
.   .   Sibling: 81  Call: outnl of type void [line: 114]
.   .   Sibling: 82  Assign: <= of type int [line: 116]
.   .   .   Child: 0  Id: a of type int [line: 116]
.   .   .   Child: 1  Const 44 of type int [line: 116]
.   .   Sibling: 83  Assign: <= of type int [line: 117]
.   .   .   Child: 0  Id: b of type int [line: 117]
.   .   .   Child: 1  Const 2 of type int [line: 117]
.   .   Sibling: 84  Call: output of type void [line: 118]
.   .   .   Child: 0  Assign: += of type int [line: 118]
.   .   .   .   Child: 0  Id: a of type int [line: 118]
.   .   .   .   Child: 1  Id: b of type int [line: 118]
.   .   Sibling: 85  Call: output of type void [line: 119]
.   .   .   Child: 0  Assign: -= of type int [line: 119]
.   .   .   .   Child: 0  Id: a of type int [line: 119]
.   .   .   .   Child: 1  Id: b of type int [line: 119]
.   .   Sibling: 86  Call: output of type void [line: 120]
.   .   .   Child: 0  Assign: -= of type int [line: 120]
.   .   .   .   Child: 0  Id: a of type int [line: 120]
.   .   .   .   Child: 1  Id: a of type int [line: 120]
.   .   Sibling: 87  Call: output of type void [line: 121]
.   .   .   Child: 0  Assign: += of type int [line: 121]
.   .   .   .   Child: 0  Id: a of type int [line: 121]
.   .   .   .   Child: 1  Assign: += of type int [line: 121]
.   .   .   .   .   Child: 0  Id: b of type int [line: 121]
.   .   .   .   .   Child: 1  Const 10 of type int [line: 121]
.   .   Sibling: 88  Call: outnl of type void [line: 122]
.   .   Sibling: 89  Assign: <= of type int [line: 124]
.   .   .   Child: 0  Id: a of type int [line: 124]
.   .   .   Child: 1  Const 44 of type int [line: 124]
.   .   Sibling: 90  Assign: <= of type int [line: 125]
.   .   .   Child: 0  Id: b of type int [line: 125]
.   .   .   Child: 1  Const 2 of type int [line: 125]
.   .   Sibling: 91  Call: output of type void [line: 126]
.   .   .   Child: 0  Assign: *= of type int [line: 126]
.   .   .   .   Child: 0  Id: a of type int [line: 126]
.   .   .   .   Child: 1  Id: b of type int [line: 126]
.   .   Sibling: 92  Call: output of type void [line: 127]
.   .   .   Child: 0  Assign: /= of type int [line: 127]
.   .   .   .   Child: 0  Id: a of type int [line: 127]
.   .   .   .   Child: 1  Id: b of type int [line: 127]
.   .   Sibling: 93  Call: output of type void [line: 128]
.   .   .   Child: 0  Assign: /= of type int [line: 128]
.   .   .   .   Child: 0  Id: a of type int [line: 128]
.   .   .   .   Child: 1  Assign: /= of type int [line: 128]
.   .   .   .   .   Child: 0  Id: a of type int [line: 128]
.   .   .   .   .   Child: 1  Const 2 of type int [line: 128]
.   .   Sibling: 94  Call: output of type void [line: 129]
.   .   .   Child: 0  Assign: *= of type int [line: 129]
.   .   .   .   Child: 0  Id: a of type int [line: 129]
.   .   .   .   Child: 1  Assign: *= of type int [line: 129]
.   .   .   .   .   Child: 0  Id: b of type int [line: 129]
.   .   .   .   .   Child: 1  Const 10 of type int [line: 129]
.   .   Sibling: 95  Call: outnl of type void [line: 130]
.   .   Sibling: 96  Assign: <= of type int [line: 132]
.   .   .   Child: 0  Id: a of type int [line: 132]
.   .   .   Child: 1  Const 44 of type int [line: 132]
.   .   Sibling: 97  Assign: <= of type int [line: 133]
.   .   .   Child: 0  Id: b of type int [line: 133]
.   .   .   Child: 1  Const 2 of type int [line: 133]
.   .   Sibling: 98  Call: output of type void [line: 134]
.   .   .   Child: 0  Assign: ++ of type int [line: 134]
.   .   .   .   Child: 0  Id: a of type int [line: 134]
.   .   Sibling: 99  Call: output of type void [line: 135]
.   .   .   Child: 0  Assign: -- of type int [line: 135]
.   .   .   .   Child: 0  Id: b of type int [line: 135]
.   .   Sibling: 100  Call: outnl of type void [line: 136]
.   .   Sibling: 101  Call: output of type void [line: 138]
.   .   .   Child: 0  Op: - of type int [line: 138]
.   .   .   .   Child: 0  Op: - of type int [line: 138]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 138]
.   .   .   .   .   Child: 1  Const 4 of type int [line: 138]
.   .   .   .   Child: 1  Const 5 of type int [line: 138]
.   .   Sibling: 102  Call: output of type void [line: 139]
.   .   .   Child: 0  Op: / of type int [line: 139]
.   .   .   .   Child: 0  Op: / of type int [line: 139]
.   .   .   .   .   Child: 0  Const 211 of type int [line: 139]
.   .   .   .   .   Child: 1  Const 17 of type int [line: 139]
.   .   .   .   Child: 1  Const 5 of type int [line: 139]
.   .   Sibling: 103  Call: output of type void [line: 140]
.   .   .   Child: 0  Op: / of type int [line: 140]
.   .   .   .   Child: 0  Const 211 of type int [line: 140]
.   .   .   .   Child: 1  Op: / of type int [line: 140]
.   .   .   .   .   Child: 0  Const 17 of type int [line: 140]
.   .   .   .   .   Child: 1  Const 5 of type int [line: 140]
.   .   Sibling: 104  Call: outnl of type void [line: 141]
.   .   Sibling: 105  Call: outputb of type void [line: 143]
.   .   .   Child: 0  Op: and of type bool [line: 143]
.   .   .   .   Child: 0  Op: or of type bool [line: 143]
.   .   .   .   .   Child: 0  Const true of type bool [line: 143]
.   .   .   .   .   Child: 1  Const false of type bool [line: 143]
.   .   .   .   Child: 1  Const false of type bool [line: 143]
.   .   Sibling: 106  Call: outputb of type void [line: 144]
.   .   .   Child: 0  Op: or of type bool [line: 144]
.   .   .   .   Child: 0  Const true of type bool [line: 144]
.   .   .   .   Child: 1  Op: and of type bool [line: 144]
.   .   .   .   .   Child: 0  Const false of type bool [line: 144]
.   .   .   .   .   Child: 1  Const false of type bool [line: 144]
.   .   Sibling: 107  Call: outputb of type void [line: 145]
.   .   .   Child: 0  Op: or of type bool [line: 145]
.   .   .   .   Child: 0  Const true of type bool [line: 145]
.   .   .   .   Child: 1  Op: and of type bool [line: 145]
.   .   .   .   .   Child: 0  Const false of type bool [line: 145]
.   .   .   .   .   Child: 1  Const false of type bool [line: 145]
.   .   Sibling: 108  Call: outnl of type void [line: 146]
.   .   Sibling: 109  Call: outputb of type void [line: 148]
.   .   .   Child: 0  Op: < of type bool [line: 148]
.   .   .   .   Child: 0  Op: ? of type int [line: 148]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 148]
.   .   .   .   Child: 1  Const 3 of type int [line: 148]
.   .   Sibling: 110  Call: outputb of type void [line: 149]
.   .   .   Child: 0  Op: < of type bool [line: 149]
.   .   .   .   Child: 0  Op: ? of type int [line: 149]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 149]
.   .   .   .   Child: 1  Const 3 of type int [line: 149]
.   .   Sibling: 111  Call: outputb of type void [line: 150]
.   .   .   Child: 0  Op: < of type bool [line: 150]
.   .   .   .   Child: 0  Op: ? of type int [line: 150]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 150]
.   .   .   .   Child: 1  Const 3 of type int [line: 150]
.   .   Sibling: 112  Call: outputb of type void [line: 151]
.   .   .   Child: 0  Op: < of type bool [line: 151]
.   .   .   .   Child: 0  Op: ? of type int [line: 151]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 151]
.   .   .   .   Child: 1  Const 3 of type int [line: 151]
.   .   Sibling: 113  Call: outputb of type void [line: 152]
.   .   .   Child: 0  Op: < of type bool [line: 152]
.   .   .   .   Child: 0  Op: ? of type int [line: 152]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 152]
.   .   .   .   Child: 1  Const 3 of type int [line: 152]
.   .   Sibling: 114  Call: outputb of type void [line: 153]
.   .   .   Child: 0  Op: < of type bool [line: 153]
.   .   .   .   Child: 0  Op: ? of type int [line: 153]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 153]
.   .   .   .   Child: 1  Const 3 of type int [line: 153]
.   .   Sibling: 115  Call: outputb of type void [line: 154]
.   .   .   Child: 0  Op: < of type bool [line: 154]
.   .   .   .   Child: 0  Op: ? of type int [line: 154]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 154]
.   .   .   .   Child: 1  Const 3 of type int [line: 154]
.   .   Sibling: 116  Call: outputb of type void [line: 155]
.   .   .   Child: 0  Op: < of type bool [line: 155]
.   .   .   .   Child: 0  Op: ? of type int [line: 155]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 155]
.   .   .   .   Child: 1  Const 3 of type int [line: 155]
.   .   Sibling: 117  Call: outputb of type void [line: 156]
.   .   .   Child: 0  Op: < of type bool [line: 156]
.   .   .   .   Child: 0  Op: ? of type int [line: 156]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 156]
.   .   .   .   Child: 1  Const 3 of type int [line: 156]
.   .   Sibling: 118  Call: outputb of type void [line: 157]
.   .   .   Child: 0  Op: < of type bool [line: 157]
.   .   .   .   Child: 0  Op: ? of type int [line: 157]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 157]
.   .   .   .   Child: 1  Const 3 of type int [line: 157]
.   .   Sibling: 119  Call: outputb of type void [line: 158]
.   .   .   Child: 0  Op: < of type bool [line: 158]
.   .   .   .   Child: 0  Op: ? of type int [line: 158]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 158]
.   .   .   .   Child: 1  Const 3 of type int [line: 158]
.   .   Sibling: 120  Call: outputb of type void [line: 159]
.   .   .   Child: 0  Op: < of type bool [line: 159]
.   .   .   .   Child: 0  Op: ? of type int [line: 159]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 159]
.   .   .   .   Child: 1  Const 3 of type int [line: 159]
.   .   Sibling: 121  Call: outputb of type void [line: 160]
.   .   .   Child: 0  Op: = of type bool [line: 160]
.   .   .   .   Child: 0  Op: ? of type int [line: 160]
.   .   .   .   .   Child: 0  Const 1 of type int [line: 160]
.   .   .   .   Child: 1  Const 0 of type int [line: 160]
.   .   Sibling: 122  Call: outnl of type void [line: 161]
.   .   Sibling: 123  Call: outputb of type void [line: 163]
.   .   .   Child: 0  Op: > of type bool [line: 163]
.   .   .   .   Child: 0  Op: ? of type int [line: 163]
.   .   .   .   .   Child: 0  Const 10000 of type int [line: 163]
.   .   .   .   Child: 1  Const 0 of type int [line: 163]
.   .   Sibling: 124  Call: outputb of type void [line: 164]
.   .   .   Child: 0  Op: > of type bool [line: 164]
.   .   .   .   Child: 0  Op: ? of type int [line: 164]
.   .   .   .   .   Child: 0  Const 10000 of type int [line: 164]
.   .   .   .   Child: 1  Const 0 of type int [line: 164]
.   .   Sibling: 125  Call: outnl of type void [line: 165]
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -P optype.c-
WARNING(7): Variable 'a' may be uninitialized when used here.
ERROR(8): '<' requires operands of the same type but lhs is type int and rhs is type bool.
WARNING(8): Variable 'b' may be uninitialized when used here.
ERROR(9): '<' requires operands of the same type but lhs is type int and rhs is type char.
WARNING(9): Variable 'c' may be uninitialized when used here.
ERROR(10): '<' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(12): '<' requires operands of the same type but lhs is type bool and rhs is type char.
ERROR(13): '<' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(14): '<' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(17): Symbol 'x' is not declared.
ERROR(18): Symbol 'x' is not declared.
ERROR(19): Symbol 'x' is not declared.
Number of warnings: 3
Number of errors: 9

==============
==============
./c- -P overlapArray.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(2): The parameter 'p' seems not to be used.
WARNING(4): The variable 'a' seems not to be used.
WARNING(6): The variable 'b' seems not to be used.
WARNING(9): The variable 'c' seems not to be used.
WARNING(13): The variable 'b' seems not to be used.
WARNING(16): The variable 'c' seems not to be used.
Number of warnings: 6
Number of errors: 1

==============
==============
./c- -P overlap.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(2): The variable 'g' seems not to be used.
WARNING(4): The parameter 'p' seems not to be used.
WARNING(6): The variable 'a' seems not to be used.
WARNING(8): The variable 'b' seems not to be used.
WARNING(11): The variable 'c' seems not to be used.
WARNING(15): The variable 'b' seems not to be used.
WARNING(18): The variable 'c' seems not to be used.
WARNING(23): The variable 'h' seems not to be used.
Number of warnings: 8
Number of errors: 1

==============
==============
./c- -P overlapStatic.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(2): The variable 'g' seems not to be used.
WARNING(4): The parameter 'p' seems not to be used.
WARNING(6): The variable 'a' seems not to be used.
WARNING(8): The variable 'b' seems not to be used.
WARNING(11): The variable 'c' seems not to be used.
WARNING(15): The variable 'b' seems not to be used.
WARNING(18): The variable 'c' seems not to be used.
WARNING(23): The variable 'h' seems not to be used.
Number of warnings: 8
Number of errors: 1

==============
==============
./c- -P param.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(3): Expecting to return type int but function 'Athos' has no return statement.
ERROR(4): Too many parameters passed for function 'DArtagnan' declared on line 1.
ERROR(5): '+' requires operands of type int but lhs is of type bool.
ERROR(5): Too many parameters passed for function 'DArtagnan' declared on line 1.
WARNING(9): Expecting to return type char but function 'Aramis' has no return statement.
ERROR(10): Not expecting array in parameter 2 of call to 'Athos' declared on line 3.
ERROR(10): Too few parameters passed for function 'Athos' declared on line 3.
ERROR(12): 'and' requires operands of type bool but lhs is of type int.
ERROR(12): 'and' requires operands of type bool but rhs is of type int.
ERROR(12): Too many parameters passed for function 'Athos' declared on line 3.
WARNING(16): The parameter 'aa' seems not to be used.
WARNING(16): The parameter 'bb' seems not to be used.
WARNING(16): The parameter 'cc' seems not to be used.
WARNING(21): Variable 'a' may be uninitialized when used here.
WARNING(21): Variable 'b' may be uninitialized when used here.
WARNING(21): Variable 'c' may be uninitialized when used here.
ERROR(23): Too few parameters passed for function 'Athos' declared on line 3.
ERROR(24): Too many parameters passed for function 'Athos' declared on line 3.
ERROR(25): Expecting type char in parameter 3 of call to 'Athos' declared on line 3 but got type int.
ERROR(25): Expecting type int in parameter 1 of call to 'Athos' declared on line 3 but got type void.
ERROR(25): Symbol 'thx1138' is not declared.
Number of warnings: 8
Number of errors: 14

==============
==============
./c- -P paramerr2.c-
ERROR(3): Too many parameters passed for function 'cow' declared on line 3.
WARNING(4): The parameter 'boar' seems not to be used.
ERROR(10): 'and' requires operands of type bool but lhs is of type int.
ERROR(10): 'and' requires operands of type bool but rhs is of type int.
ERROR(10): '+' requires operands of type int but lhs is of type bool.
ERROR(10): '+' requires operands of type int but rhs is of type bool.
ERROR(10): Too many parameters passed for function 'cow' declared on line 3.
ERROR(11): '+' requires operands of type int but rhs is of type bool.
ERROR(11): Too few parameters passed for function 'dog' declared on line 4.
ERROR(12): '*' requires operands of type int but rhs is of type bool.
ERROR(12): '+' requires operands of type int but rhs is of type bool.
ERROR(13): '-' requires operands of type int but rhs is of type bool.
ERROR(13): '*' requires operands of type int but rhs is of type bool.
ERROR(13): '+' requires operands of type int but rhs is of type bool.
ERROR(13): Too many parameters passed for function 'dog' declared on line 4.
ERROR(14): '+' requires operands of type int but rhs is of type bool.
ERROR(14): Symbol 'elk' is not declared.
Number of warnings: 1
Number of errors: 16

==============
==============
./c- -P paramerr3.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(4): Expecting to return type int but function 'Athos' has no return statement.
ERROR(5): Too many parameters passed for function 'DArtagnan' declared on line 2.
ERROR(6): '+' requires operands of type int but lhs is of type bool.
ERROR(6): Too many parameters passed for function 'DArtagnan' declared on line 2.
WARNING(10): Expecting to return type char but function 'Aramis' has no return statement.
ERROR(11): Not expecting array in parameter 2 of call to 'Athos' declared on line 4.
ERROR(11): Too few parameters passed for function 'Athos' declared on line 4.
ERROR(13): 'and' requires operands of type bool but lhs is of type int.
ERROR(13): 'and' requires operands of type bool but rhs is of type int.
ERROR(13): Too many parameters passed for function 'Athos' declared on line 4.
WARNING(17): The parameter 'aa' seems not to be used.
WARNING(17): The parameter 'bb' seems not to be used.
WARNING(17): The parameter 'cc' seems not to be used.
WARNING(22): Variable 'a' may be uninitialized when used here.
WARNING(22): Variable 'b' may be uninitialized when used here.
WARNING(22): Variable 'c' may be uninitialized when used here.
ERROR(24): Too few parameters passed for function 'Athos' declared on line 4.
ERROR(25): Too many parameters passed for function 'Athos' declared on line 4.
ERROR(26): Expecting type char in parameter 3 of call to 'Athos' declared on line 4 but got type int.
ERROR(26): Expecting type int in parameter 1 of call to 'Athos' declared on line 4 but got type void.
ERROR(26): Symbol 'thx1138' is not declared.
Number of warnings: 8
Number of errors: 14

==============
==============
./c- -P paramerr.c-
WARNING(15): Expecting to return type int but function 'antno' has no return statement.
WARNING(16): Expecting to return type bool but function 'bearno' has no return statement.
WARNING(17): Expecting to return type char but function 'catno' has no return statement.
WARNING(19): The parameter 'aardvark' seems not to be used.
WARNING(19): The parameter 'baboon' seems not to be used.
WARNING(19): The parameter 'cow' seems not to be used.
WARNING(22): The parameter 'asp' seems not to be used.
WARNING(22): The parameter 'bull' seems not to be used.
WARNING(22): The parameter 'crow' seems not to be used.
WARNING(30): Variable 'a' may be uninitialized when used here.
WARNING(30): Variable 'b' may be uninitialized when used here.
WARNING(30): Variable 'c' may be uninitialized when used here.
ERROR(31): Expecting array in parameter 1 of call to 'elk' declared on line 22.
ERROR(31): Expecting array in parameter 2 of call to 'elk' declared on line 22.
ERROR(31): Expecting array in parameter 3 of call to 'elk' declared on line 22.
ERROR(32): Symbol 'fox' is not declared.
ERROR(34): Not expecting array in parameter 1 of call to 'dog' declared on line 19.
ERROR(34): Not expecting array in parameter 2 of call to 'dog' declared on line 19.
ERROR(34): Not expecting array in parameter 3 of call to 'dog' declared on line 19.
WARNING(34): Variable 'aa' may be uninitialized when used here.
WARNING(34): Variable 'bb' may be uninitialized when used here.
WARNING(34): Variable 'cc' may be uninitialized when used here.
ERROR(36): Symbol 'fox' is not declared.
ERROR(40): Expecting array in parameter 1 of call to 'elk' declared on line 22.
ERROR(40): Expecting array in parameter 2 of call to 'elk' declared on line 22.
ERROR(40): Expecting array in parameter 3 of call to 'elk' declared on line 22.
ERROR(41): Symbol 'fox' is not declared.
ERROR(43): Expecting type bool in parameter 2 of call to 'dog' declared on line 19 but got type int.
ERROR(43): Expecting type char in parameter 3 of call to 'dog' declared on line 19 but got type int.
ERROR(43): '-' requires operands of type int but lhs is of type bool.
ERROR(43): '+' requires operands of type int but rhs is of type bool.
ERROR(43): '-' requires operands of type int but rhs is of type char.
ERROR(43): '*' requires operands of type int but rhs is of type char.
ERROR(44): Expecting array in parameter 1 of call to 'elk' declared on line 22.
ERROR(44): Expecting array in parameter 2 of call to 'elk' declared on line 22.
ERROR(44): Expecting array in parameter 3 of call to 'elk' declared on line 22.
ERROR(44): Expecting type bool in parameter 2 of call to 'elk' declared on line 22 but got type int.
ERROR(44): Expecting type char in parameter 3 of call to 'elk' declared on line 22 but got type int.
ERROR(44): '-' requires operands of type int but lhs is of type bool.
ERROR(44): '+' requires operands of type int but rhs is of type bool.
ERROR(44): '-' requires operands of type int but rhs is of type char.
ERROR(44): '*' requires operands of type int but rhs is of type char.
ERROR(46): '+' requires operands of type int but rhs is of type bool.
ERROR(46): Symbol 'emu' is not declared.
ERROR(46): Symbol 'parrot' is not declared.
ERROR(46): Symbol 'x' is not declared.
ERROR(46): Symbol 'x' is not declared.
ERROR(47): '*' requires operands of type int but rhs is of type bool.
ERROR(47): '+' requires operands of type int but rhs is of type bool.
ERROR(47): Symbol 'emu' is not declared.
ERROR(47): Symbol 'emu' is not declared.
ERROR(47): Symbol 'parrot' is not declared.
ERROR(47): Symbol 'x' is not declared.
ERROR(47): Symbol 'x' is not declared.
ERROR(47): Symbol 'x' is not declared.
Number of warnings: 15
Number of errors: 40

==============
==============
./c- -P part2.c-
WARNING(1): The function 'ant' seems not to be used.
ERROR(4): Cannot use array as test condition in if statement.
ERROR(4): Expecting Boolean test condition in if statement but got type int.
WARNING(4): Variable 'z' may be uninitialized when used here.
ERROR(5): Cannot return an array.
WARNING(8): The function 'bat' seems not to be used.
ERROR(10): Function 'bat' at line 8 is expecting no return value, but return has a value.
WARNING(13): The function 'cat' seems not to be used.
ERROR(15): Function 'cat' at line 13 is expecting to return type int but return has no value.
ERROR(20): Symbol 'x' is already declared at line 18.
ERROR(26): Symbol 'dog' is already declared at line 18.
WARNING(26): Expecting to return type char but function 'dog' has no return statement.
WARNING(28): The parameter 'z' seems not to be used.
ERROR(34): Initializer for variable 'c' of type char is of type int
ERROR(35): Initializer for variable 'd' is not a constant expression.
ERROR(35): Initializer for variable 'd' of type char is of type int
ERROR(35): '+' requires operands of type int but lhs is of type char.
WARNING(35): The variable 'd' seems not to be used.
ERROR(38): Cannot have a break statement outside of loop.
ERROR(39): Expecting Boolean test condition in while statement but got type int.
ERROR(40): Expecting Boolean test condition in if statement but got type int.
ERROR(42): Symbol 'zebu' is not declared.
ERROR(44): Too few parameters passed for function 'dog' declared on line 18.
ERROR(45): Expecting type int in parameter 1 of call to 'dog' declared on line 18 but got type char.
ERROR(45): Too few parameters passed for function 'dog' declared on line 18.
ERROR(46): Expecting type int in parameter 1 of call to 'dog' declared on line 18 but got type char.
ERROR(46): Expecting type int in parameter 2 of call to 'dog' declared on line 18 but got type char.
ERROR(47): Expecting type int in parameter 1 of call to 'dog' declared on line 18 but got type char.
ERROR(47): Expecting type int in parameter 2 of call to 'dog' declared on line 18 but got type char.
ERROR(47): '+' requires operands of type int but lhs is of type char.
ERROR(47): Too many parameters passed for function 'dog' declared on line 18.
ERROR(47): Unary 'chsign' requires an operand of type int but was given type bool.
ERROR(49): Not expecting array in parameter 1 of call to 'dog' declared on line 18.
ERROR(49): Too few parameters passed for function 'dog' declared on line 18.
WARNING(49): Variable 'z' may be uninitialized when used here.
ERROR(50): Expecting array in parameter 1 of call to 'elk' declared on line 28.
ERROR(50): Expecting type bool in parameter 1 of call to 'elk' declared on line 28 but got type int.
ERROR(51): Expecting array in parameter 1 of call to 'elk' declared on line 28.
ERROR(51): Expecting type bool in parameter 1 of call to 'elk' declared on line 28 but got type void.
ERROR(51): Expecting type int in parameter 1 of call to 'dog' declared on line 18 but got type bool.
Number of warnings: 8
Number of errors: 32

==============
==============
./c- -P precassoc.c-
Var: w of type int [line: 2]
Sibling: 1  Func: dog returns type int [line: 4]
.   Child: 0  Parm: x of type int [line: 4]
.   Child: 1  Compound [line: 4]
.   .   Child: 0  Var: y of type int [line: 5]
.   .   Sibling: 1  Var: z of type int [line: 5]
.   .   Child: 1  Assign: <= of type int [line: 7]
.   .   .   Child: 0  Id: y of type int [line: 7]
.   .   .   Child: 1  Op: + of type int [line: 7]
.   .   .   .   Child: 0  Op: * of type int [line: 7]
.   .   .   .   .   Child: 0  Id: x of type int [line: 7]
.   .   .   .   .   Child: 1  Const 111 of type int [line: 7]
.   .   .   .   Child: 1  Const 222 of type int [line: 7]
.   .   Sibling: 1  Assign: <= of type int [line: 9]
.   .   .   Child: 0  Id: z of type int [line: 9]
.   .   .   Child: 1  Op: + of type int [line: 9]
.   .   .   .   Child: 0  Id: y of type int [line: 9]
.   .   .   .   Child: 1  Op: * of type int [line: 9]
.   .   .   .   .   Child: 0  Const 333 of type int [line: 9]
.   .   .   .   .   Child: 1  Op: + of type int [line: 9]
.   .   .   .   .   .   Child: 0  Const 444 of type int [line: 9]
.   .   .   .   .   .   Child: 1  Const 555 of type int [line: 9]
.   .   Sibling: 2  Assign: <= of type int [line: 11]
.   .   .   Child: 0  Id: w of type int [line: 11]
.   .   .   Child: 1  Op: * of type int [line: 11]
.   .   .   .   Child: 0  Op: + of type int [line: 11]
.   .   .   .   .   Child: 0  Const 111 of type int [line: 11]
.   .   .   .   .   Child: 1  Const 222 of type int [line: 11]
.   .   .   .   Child: 1  Op: + of type int [line: 11]
.   .   .   .   .   Child: 0  Const 333 of type int [line: 11]
.   .   .   .   .   Child: 1  Const 444 of type int [line: 11]
.   .   Sibling: 3  Assign: <= of type int [line: 13]
.   .   .   Child: 0  Id: w of type int [line: 13]
.   .   .   Child: 1  Op: * of type int [line: 13]
.   .   .   .   Child: 0  Call: dog of type int [line: 13]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 13]
.   .   .   .   Child: 1  Call: dog of type int [line: 13]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 13]
.   .   Sibling: 4  Return [line: 15]
.   .   .   Child: 0  Id: z of type int [line: 15]
Sibling: 2  Func: main returns type void [line: 18]
.   Child: 1  Compound [line: 18]
.   .   Child: 1  Call: dog of type int [line: 19]
.   .   .   Child: 0  Const 666 of type int [line: 19]
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -P randomRoll.c-
Func: main returns type void [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 0  Var: i of type int [line: 4]
.   .   Sibling: 1  Var: sum of type int [line: 4]
.   .   Child: 1  Assign: <= of type int [line: 6]
.   .   .   Child: 0  Id: i of type int [line: 6]
.   .   .   Child: 1  Assign: <= of type int [line: 6]
.   .   .   .   Child: 0  Id: sum of type int [line: 6]
.   .   .   .   Child: 1  Const 0 of type int [line: 6]
.   .   Sibling: 1  While [line: 7]
.   .   .   Child: 0  Op: < of type bool [line: 7]
.   .   .   .   Child: 0  Id: i of type int [line: 7]
.   .   .   .   Child: 1  Const 1000 of type int [line: 7]
.   .   .   Child: 1  Compound [line: 7]
.   .   .   .   Child: 1  Assign: += of type int [line: 8]
.   .   .   .   .   Child: 0  Id: sum of type int [line: 8]
.   .   .   .   .   Child: 1  Op: ? of type int [line: 8]
.   .   .   .   .   .   Child: 0  Const 6 of type int [line: 8]
.   .   .   .   Sibling: 1  Assign: ++ of type int [line: 9]
.   .   .   .   .   Child: 0  Id: i of type int [line: 9]
.   .   Sibling: 2  Call: outputb of type void [line: 11]
.   .   .   Child: 0  Const true of type bool [line: 11]
.   .   Sibling: 3  Call: outputb of type void [line: 13]
.   .   .   Child: 0  Op: and of type bool [line: 13]
.   .   .   .   Child: 0  Op: < of type bool [line: 13]
.   .   .   .   .   Child: 0  Const 2300 of type int [line: 13]
.   .   .   .   .   Child: 1  Id: sum of type int [line: 13]
.   .   .   .   Child: 1  Op: < of type bool [line: 13]
.   .   .   .   .   Child: 0  Id: sum of type int [line: 13]
.   .   .   .   .   Child: 1  Const 2700 of type int [line: 13]
.   .   Sibling: 4  Call: outnl of type void [line: 14]
.   .   Sibling: 5  Call: outputb of type void [line: 16]
.   .   .   Child: 0  Op: < of type bool [line: 16]
.   .   .   .   Child: 0  Op: ? of type int [line: 16]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 16]
.   .   .   .   Child: 1  Const 3 of type int [line: 16]
.   .   Sibling: 6  Call: outnl of type void [line: 17]
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -P rangeifwhile.c-
ERROR(6): Cannot use array as test condition in if statement.
WARNING(6): Variable 'b' may be uninitialized when used here.
ERROR(7): Expecting Boolean test condition in if statement but got type int.
ERROR(9): Cannot use array as test condition in while statement.
ERROR(10): Expecting Boolean test condition in while statement but got type char.
ERROR(12): Cannot use array in position 1 in range of for statement.
ERROR(12): Cannot use array in position 2 in range of for statement.
ERROR(12): Cannot use array in position 3 in range of for statement.
WARNING(12): The variable 'x' seems not to be used.
WARNING(12): Variable 'a' may be uninitialized when used here.
ERROR(13): Cannot use function 'main' as a variable.
ERROR(13): Expecting type int in position 1 in range of for statement but got type bool.
ERROR(13): Expecting type int in position 2 in range of for statement but got type char.
ERROR(13): Symbol 'x' is not declared.
Number of warnings: 3
Number of errors: 11

==============
==============
./c- -P redefined.c-
WARNING(1): The variable 'g' seems not to be used.
ERROR(5): Symbol 'x' is already declared at line 5.
WARNING(5): The variable 'x' seems not to be used.
ERROR(6): Symbol 'x' is already declared at line 5.
ERROR(6): Symbol 'x' is already declared at line 5.
ERROR(7): Symbol 'x' is already declared at line 5.
ERROR(7): Symbol 'x' is already declared at line 5.
ERROR(9): Symbol 'y' is already declared at line 9.
WARNING(9): The variable 'y' seems not to be used.
WARNING(11): The variable 'main' seems not to be used.
ERROR(12): Symbol 'main' is already declared at line 11.
ERROR(13): Symbol 'main' is already declared at line 11.
WARNING(15): The variable 'g' seems not to be used.
ERROR(18): Symbol 'a' is already declared at line 18.
ERROR(18): Symbol 'b' is already declared at line 18.
ERROR(18): Symbol 'c' is already declared at line 18.
ERROR(18): Symbol 'main' is already declared at line 3.
WARNING(18): The parameter 'a' seems not to be used.
WARNING(18): The parameter 'b' seems not to be used.
WARNING(18): The parameter 'c' seems not to be used.
ERROR(19): Symbol 'a' is already declared at line 18.
ERROR(19): Symbol 'b' is already declared at line 18.
ERROR(19): Symbol 'c' is already declared at line 18.
WARNING(20): The variable 'g' seems not to be used.
WARNING(22): The variable 'g' seems not to be used.
WARNING(23): The variable 'a' seems not to be used.
WARNING(23): The variable 'b' seems not to be used.
WARNING(23): The variable 'c' seems not to be used.
ERROR(24): Symbol 'a' is already declared at line 23.
ERROR(24): Symbol 'b' is already declared at line 23.
ERROR(24): Symbol 'c' is already declared at line 23.
WARNING(26): The variable 'a' seems not to be used.
WARNING(26): The variable 'b' seems not to be used.
WARNING(26): The variable 'c' seems not to be used.
WARNING(27): The variable 'g' seems not to be used.
WARNING(27): The variable 'main' seems not to be used.
WARNING(32): The function 'cat' seems not to be used.
WARNING(32): The parameter 'cat' seems not to be used.
WARNING(32): The parameter 'g' seems not to be used.
ERROR(33): Symbol 'cat' is already declared at line 32.
ERROR(36): Symbol 'cat' is already declared at line 32.
ERROR(36): Symbol 'g' is already declared at line 1.
Number of warnings: 21
Number of errors: 21

==============
==============
./c- -P returnbad.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
ERROR(1): Function 'ruby' at line 1 is expecting to return type int but returns type bool.
WARNING(1): The function 'ruby' seems not to be used.
ERROR(2): Function 'weiss' at line 2 is expecting to return type int but return has no value.
WARNING(2): The function 'weiss' seems not to be used.
WARNING(3): Expecting to return type int but function 'blake' has no return statement.
WARNING(3): The function 'blake' seems not to be used.
ERROR(4): Function 'yang' at line 4 is expecting no return value, but return has a value.
WARNING(4): The function 'yang' seems not to be used.
ERROR(5): Cannot return an array.
WARNING(5): The function 'rwby' seems not to be used.
Number of warnings: 6
Number of errors: 5

==============
==============
./c- -P return.c-
WARNING(2): Expecting to return type int but function 'bender' has no return statement.
WARNING(21): Expecting to return type char but function 'zapp' has no return statement.
WARNING(30): Expecting to return type bool but function 'hermes' has no return statement.
WARNING(34): Expecting to return type int but function 'main' has no return statement.
Func: bender returns type int [line: 2]
.   Child: 1  Compound [line: 3]
Sibling: 1  Func: fry returns type int [line: 6]
.   Child: 1  Compound [line: 7]
.   .   Child: 1  Return [line: 8]
.   .   .   Child: 0  Const 114 of type int [line: 8]
Sibling: 2  Func: leela returns type void [line: 11]
.   Child: 1  Compound [line: 12]
.   .   Child: 1  Call: outputc of type void [line: 13]
.   .   .   Child: 0  Const 'L'  of type char [line: 13]
Sibling: 3  Func: zoidberg returns type char [line: 16]
.   Child: 1  Compound [line: 17]
.   .   Child: 1  Return [line: 18]
.   .   .   Child: 0  Const 'z'  of type char [line: 18]
Sibling: 4  Func: zapp returns type char [line: 21]
.   Child: 1  Compound [line: 22]
Sibling: 5  Func: amy returns type bool [line: 25]
.   Child: 1  Compound [line: 26]
.   .   Child: 1  Return [line: 27]
.   .   .   Child: 0  Const true of type bool [line: 27]
Sibling: 6  Func: hermes returns type bool [line: 30]
.   Child: 1  Compound [line: 31]
Sibling: 7  Func: main returns type int [line: 34]
.   Child: 1  Compound [line: 35]
.   .   Child: 1  Call: leela of type void [line: 36]
.   .   Sibling: 1  Call: outnl of type void [line: 37]
.   .   Sibling: 2  Call: output of type void [line: 39]
.   .   .   Child: 0  Call: bender of type int [line: 39]
.   .   Sibling: 3  Call: output of type void [line: 40]
.   .   .   Child: 0  Call: fry of type int [line: 40]
.   .   Sibling: 4  Call: outnl of type void [line: 41]
.   .   Sibling: 5  Call: outputc of type void [line: 43]
.   .   .   Child: 0  Call: zoidberg of type char [line: 43]
.   .   Sibling: 6  Call: outputb of type void [line: 44]
.   .   .   Child: 0  Op: = of type bool [line: 44]
.   .   .   .   Child: 0  Call: zapp of type char [line: 44]
.   .   .   .   Child: 1  Const ' '  of type char [line: 44]
.   .   Sibling: 7  Call: outnl of type void [line: 45]
.   .   Sibling: 8  Call: outputb of type void [line: 47]
.   .   .   Child: 0  Call: amy of type bool [line: 47]
.   .   Sibling: 9  Call: outputb of type void [line: 48]
.   .   .   Child: 0  Call: hermes of type bool [line: 48]
.   .   Sibling: 10  Call: outnl of type void [line: 49]
Number of warnings: 4
Number of errors: 0

==============
==============
./c- -P scope.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(3): Expecting to return type int but function 'ant' has no return statement.
ERROR(7): Symbol 'bat' is not declared.
ERROR(8): 'or' requires operands of type bool but lhs is of type int.
ERROR(8): 'or' requires operands of type bool but rhs is of type int.
WARNING(8): Variable 'a' may be uninitialized when used here.
ERROR(14): Symbol 'b' is not declared.
WARNING(15): Variable 'c' may be uninitialized when used here.
WARNING(19): The variable 'IWouldNotEatItWithAGoat' seems not to be used.
ERROR(25): Symbol 'b' is not declared.
ERROR(26): Symbol 'c' is not declared.
ERROR(30): Symbol 'b' is not declared.
ERROR(31): Symbol 'c' is not declared.
WARNING(37): Expecting to return type int but function 'bat' has no return statement.
WARNING(37): The function 'bat' seems not to be used.
WARNING(40): The variable 'bat' seems not to be used.
ERROR(41): Symbol 'x' is not declared.
WARNING(44): Variable 'z' may be uninitialized when used here.
ERROR(45): Symbol 'p' is not declared.
ERROR(46): Symbol 'q' is not declared.
ERROR(46): Symbol 'r' is not declared.
ERROR(47): Symbol 's' is not declared.
ERROR(47): Symbol 't' is not declared.
ERROR(47): Too many parameters passed for function 'ant' declared on line 3.
ERROR(48): Symbol 'cow' is not declared.
ERROR(48): Symbol 'u' is not declared.
ERROR(48): Symbol 'v' is not declared.
ERROR(49): Symbol 'abraxsis' is not declared.
ERROR(50): Symbol 'a' is not declared.
ERROR(55): Symbol 'g' is already declared at line 2.
ERROR(57): Symbol 'g' is already declared at line 2.
ERROR(59): Symbol 'x' is not declared.
ERROR(62): Symbol 'g' is already declared at line 2.
ERROR(63): Symbol 'ant' is already declared at line 3.
Number of warnings: 8
Number of errors: 26

==============
==============
./c- -P simple.c-
ERROR(3): Symbol 'x' is not declared.
ERROR(4): Symbol 'y' is not declared.
ERROR(5): Symbol 'z' is not declared.
Number of warnings: 0
Number of errors: 3

==============
==============
./c- -P small.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(3): The variable 'a' seems not to be used.
WARNING(10): The variable 'c' seems not to be used.
ERROR(21): Cannot index nonarray 'aardvark'.
ERROR(21): Symbol 'aardvark' is not declared.
WARNING(21): Variable 'in' may be uninitialized when used here.
ERROR(23): Cannot index nonarray 'in'.
WARNING(24): Variable 'zz' may be uninitialized when used here.
ERROR(28): Function 'max' at line 7 is expecting to return type int but return has no value.
Number of warnings: 4
Number of errors: 5

==============
==============
./c- -P static.c-
Func: main returns type void [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 0  Var: x of type int [line: 4]
.   .   .   Child: 0  Const 111 of type int [line: 4]
.   .   Child: 1  Call: output of type void [line: 6]
.   .   .   Child: 0  Id: x of type int [line: 6]
.   .   Sibling: 1  Assign: <= of type int [line: 7]
.   .   .   Child: 0  Id: x of type int [line: 7]
.   .   .   Child: 1  Const 222 of type int [line: 7]
.   .   Sibling: 2  Call: output of type void [line: 8]
.   .   .   Child: 0  Id: x of type int [line: 8]
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -P strange.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
ERROR(2): Symbol 'main' is already declared at line 1.
WARNING(2): Expecting to return type int but function 'main' has no return statement.
ERROR(3): Symbol 'main' is already declared at line 1.
ERROR(9): 'main' is a simple variable and cannot be called.
ERROR(18): 'main' is a simple variable and cannot be called.
ERROR(21): Expecting Boolean test condition in if statement but got type int.
ERROR(23): Expecting Boolean test condition in if statement but got type int.
Number of warnings: 1
Number of errors: 7

==============
==============
./c- -P stress.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(1): The function 'fred' seems not to be used.
WARNING(1): The parameter 'Archimedes' seems not to be used.
WARNING(5): Variable 'z' may be uninitialized when used here.
ERROR(8): Cannot index nonarray 'x'.
ERROR(8): Symbol 'x' is not declared.
WARNING(12): The variable 'z' seems not to be used.
ERROR(14): Symbol 'j' is already declared at line 14.
WARNING(14): The variable 'j' seems not to be used.
WARNING(17): The function 'LadyCampanula' seems not to be used.
Number of warnings: 6
Number of errors: 4

==============
==============
./c- -P testExample.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(1): The variable 'zev' seems not to be used.
WARNING(2): The variable 'y' seems not to be used.
WARNING(4): The function 'ant' seems not to be used.
ERROR(17): Symbol 'fred' is not declared.
WARNING(30): The variable 'z' seems not to be used.
WARNING(36): The function 'max' seems not to be used.
Number of warnings: 5
Number of errors: 2

==============
==============
./c- -P tinybad.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(2): The variable 'bat' seems not to be used.
WARNING(4): The parameter 'corgi' seems not to be used.
ERROR(7): Symbol 'aspergillus' is not declared.
ERROR(7): Symbol 'tiger' is not declared.
ERROR(8): '<=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(9): Cannot use function 'dog' as a variable.
ERROR(10): Cannot use function 'dog' as a variable.
ERROR(11): Array 'ant' should be indexed by type int but got type char.
ERROR(11): Array 'ant' should be indexed by type int but got type char.
ERROR(12): Cannot use function 'dog' as a variable.
ERROR(12): Symbol 'cow' is not declared.
ERROR(14): Function 'dog' at line 4 is expecting to return type int but returns type char.
Number of warnings: 2
Number of errors: 11

==============
==============
./c- -P tiny.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(1): The variable 'gromit' seems not to be used.
WARNING(1): The variable 'walace' seems not to be used.
WARNING(2): The variable 'preston' seems not to be used.
WARNING(4): The parameter 'corgi' seems not to be used.
ERROR(7): Symbol 'aspergillus' is not declared.
ERROR(7): Symbol 'fungus' is not declared.
ERROR(8): '<=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(9): Cannot use function 'dog' as a variable.
ERROR(10): Cannot use function 'dog' as a variable.
ERROR(13): Function 'dog' at line 4 is expecting to return type int but returns type char.
Number of warnings: 4
Number of errors: 7

==============
==============
./c- -P tinygood.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(4): The function 'dog' seems not to be used.
WARNING(4): The parameter 'corgi' seems not to be used.
Number of warnings: 2
Number of errors: 1

==============
==============
./c- -P tinyscope.c-
WARNING(3): The function 'dog' seems not to be used.
WARNING(7): Variable 'a' may be uninitialized when used here.
Var: a of type int [line: 1]
Sibling: 1  Func: dog returns type void [line: 3]
.   Child: 0  Parm: a of type char [line: 3]
.   Child: 1  Compound [line: 3]
.   .   Child: 1  Id: a of type char [line: 4]
.   .   Sibling: 1  Compound [line: 5]
.   .   .   Child: 0  Var: a of type int [line: 6]
.   .   .   Child: 1  Id: a of type int [line: 7]
.   .   Sibling: 2  Id: a of type char [line: 9]
.   .   Sibling: 3  Compound [line: 10]
.   .   .   Child: 0  Var: a of type char [line: 11]
.   .   .   Child: 1  Id: a of type char [line: 12]
.   .   Sibling: 4  Id: a of type char [line: 14]
Sibling: 2  Func: main returns type void [line: 17]
.   Child: 1  Compound [line: 17]
.   .   Child: 1  Id: a of type int [line: 18]
Number of warnings: 2
Number of errors: 0

==============
==============
./c- -P tinyType.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(2): The variable 'x' seems not to be used.
WARNING(2): The variable 'y' seems not to be used.
WARNING(4): The parameter 'x' seems not to be used.
ERROR(5): Symbol 'bender' is already declared at line 4.
ERROR(9): Symbol 'x' is already declared at line 7.
ERROR(10): Symbol 'x' is already declared at line 7.
ERROR(10): Symbol 'y' is already declared at line 9.
ERROR(12): Symbol 'z' is not declared.
ERROR(13): '<=' requires operands of the same type but lhs is type bool and rhs is type int.
WARNING(15): Variable 'z' may be uninitialized when used here.
ERROR(17): Symbol 'z' is not declared.
ERROR(17): Symbol 'z' is not declared.
ERROR(18): Cannot use function 'main' as a variable.
ERROR(19): Cannot index nonarray 'x'.
ERROR(20): Array 'y' should be indexed by type int but got type char.
ERROR(21): Array index is the unindexed array 'y'.
ERROR(23): Array 'y' should be indexed by type int but got type bool.
ERROR(24): Cannot use function 'main' as a variable.
ERROR(25): Array 'main' should be indexed by type int but got type char.
ERROR(25): Cannot index nonarray 'main'.
ERROR(25): Cannot use function 'main' as a variable.
ERROR(26): 'and' requires operands of type bool but lhs is of type int.
ERROR(26): 'and' requires operands of type bool but rhs is of type char.
ERROR(29): The operation 'sizeof' only works with arrays.
ERROR(30): The operation 'sizeof' only works with arrays.
ERROR(30): Too few parameters passed for function 'main' declared on line 7.
ERROR(31): Unary '?' requires an operand of type int but was given type bool.
ERROR(31): Unary '?' requires an operand of type int but was given type char.
ERROR(33): 'and' requires operands of type bool but lhs is of type int.
ERROR(33): Symbol 'fred' is not declared.
ERROR(33): Too few parameters passed for function 'main' declared on line 7.
ERROR(34): '+' requires operands of type int but lhs is of type bool.
ERROR(34): '+' requires operands of type int but rhs is of type bool.
ERROR(35): '*' requires operands of type int but rhs is of type void.
ERROR(35): Too few parameters passed for function 'bender' declared on line 4.
ERROR(36): '<=' requires operands of the same type but lhs is type int and rhs is type void.
ERROR(36): Too few parameters passed for function 'bender' declared on line 4.
ERROR(37): '<=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(37): Too few parameters passed for function 'main' declared on line 7.
ERROR(38): Too few parameters passed for function 'bender' declared on line 4.
ERROR(38): Too few parameters passed for function 'bender' declared on line 4.
ERROR(39): Too few parameters passed for function 'bender' declared on line 4.
ERROR(39): Too few parameters passed for function 'bender' declared on line 4.
ERROR(40): '-' requires operands of type int but lhs is of type void.
ERROR(40): '-' requires operands of type int but rhs is of type void.
ERROR(40): Too few parameters passed for function 'bender' declared on line 4.
ERROR(40): Too few parameters passed for function 'bender' declared on line 4.
ERROR(41): Expecting type int in parameter 1 of call to 'bender' declared on line 4 but got type void.
ERROR(42): Array 'y' should be indexed by type int but got type void.
ERROR(44): '<' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(48): Function 'main' at line 7 is expecting to return type int but return has no value.
ERROR(49): Function 'main' at line 7 is expecting to return type int but returns type bool.
ERROR(50): Function 'main' at line 7 is expecting to return type int but returns type char.
ERROR(51): Function 'main' at line 7 is expecting to return type int but returns type void.
ERROR(51): Too few parameters passed for function 'bender' declared on line 4.
Number of warnings: 4
Number of errors: 52

==============
==============
./c- -P types3.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(3): The variable 'lund' seems not to be used.
ERROR(5): Symbol 'lund' is already declared at line 3.
WARNING(5): The parameter 'a' seems not to be used.
ERROR(9): Symbol 'a' is already declared at line 9.
WARNING(9): Expecting to return type int but function 'fred' has no return statement.
ERROR(11): Symbol 'a' is already declared at line 9.
ERROR(12): 'a' is a simple variable and cannot be called.
ERROR(13): Cannot use function 'fred' as a variable.
ERROR(16): Symbol 'fred' is already declared at line 9.
WARNING(18): The function 'linda' seems not to be used.
WARNING(18): The parameter 'linda' seems not to be used.
ERROR(20): Symbol 'linda' is already declared at line 18.
WARNING(23): The variable 'galadriel' seems not to be used.
WARNING(24): The parameter 'eowyn' seems not to be used.
ERROR(26): Cannot use function 'arwen' as a variable.
Number of warnings: 7
Number of errors: 9

==============
==============
./c- -P types.c-
ERROR(8): Symbol 'c' is already declared at line 8.
WARNING(8): The variable 'c' seems not to be used.
ERROR(9): Symbol 'i' is already declared at line 4.
WARNING(10): The variable 'pumpkin' seems not to be used.
WARNING(12): Variable 'i' may be uninitialized when used here.
ERROR(13): '+' requires operands of type int but rhs is of type bool.
WARNING(13): Variable 'b' may be uninitialized when used here.
ERROR(14): '+' requires operands of type int but lhs is of type bool.
ERROR(15): '+' requires operands of type int but lhs is of type bool.
ERROR(15): '+' requires operands of type int but rhs is of type bool.
ERROR(17): 'and' requires operands of type bool but lhs is of type int.
ERROR(17): 'and' requires operands of type bool but rhs is of type int.
ERROR(18): 'and' requires operands of type bool but lhs is of type int.
ERROR(19): 'and' requires operands of type bool but rhs is of type int.
ERROR(23): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(24): '<=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(28): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(29): '=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(33): '!=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(34): '!=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(37): The operation '+' does not work with arrays.
WARNING(37): Variable 'ia' may be uninitialized when used here.
ERROR(38): '+' requires operands of type int but rhs is of type bool.
ERROR(38): The operation '+' does not work with arrays.
WARNING(38): Variable 'ba' may be uninitialized when used here.
ERROR(39): '+' requires operands of type int but lhs is of type bool.
ERROR(39): The operation '+' does not work with arrays.
ERROR(40): '+' requires operands of type int but lhs is of type bool.
ERROR(40): '+' requires operands of type int but rhs is of type bool.
ERROR(40): The operation '+' does not work with arrays.
ERROR(42): 'and' requires operands of type bool but lhs is of type int.
ERROR(42): 'and' requires operands of type bool but rhs is of type int.
ERROR(42): The operation 'and' does not work with arrays.
ERROR(43): 'and' requires operands of type bool but lhs is of type int.
ERROR(43): The operation 'and' does not work with arrays.
ERROR(44): 'and' requires operands of type bool but rhs is of type int.
ERROR(44): The operation 'and' does not work with arrays.
ERROR(45): The operation 'and' does not work with arrays.
ERROR(48): '<=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(49): '<=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(53): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(54): '=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(57): '+' requires operands of type int but lhs is of type bool.
ERROR(58): '+' requires operands of type int but rhs is of type bool.
ERROR(59): '+' requires operands of type int but rhs is of type bool.
ERROR(61): 'or' requires operands of type bool but lhs is of type int.
ERROR(62): 'or' requires operands of type bool but rhs is of type int.
ERROR(63): 'or' requires operands of type bool but rhs is of type int.
ERROR(66): Unary 'not' requires an operand of type bool but was given type int.
ERROR(67): The operation 'not' does not work with arrays.
ERROR(68): The operation 'not' does not work with arrays.
ERROR(68): Unary 'not' requires an operand of type bool but was given type int.
ERROR(70): Unary 'chsign' requires an operand of type int but was given type bool.
ERROR(72): The operation 'chsign' does not work with arrays.
ERROR(72): Unary 'chsign' requires an operand of type int but was given type bool.
ERROR(73): The operation 'chsign' does not work with arrays.
ERROR(76): '>' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(77): '>' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(78): '>' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(79): '>' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(79): '>' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(82): Expecting Boolean test condition in if statement but got type int.
ERROR(85): Cannot use array as test condition in if statement.
ERROR(88): Cannot use array as test condition in if statement.
ERROR(88): Expecting Boolean test condition in if statement but got type int.
ERROR(94): Expecting Boolean test condition in if statement but got type int.
ERROR(97): Expecting Boolean test condition in while statement but got type int.
ERROR(98): Cannot use array as test condition in while statement.
ERROR(99): Cannot use array as test condition in while statement.
ERROR(99): Expecting Boolean test condition in while statement but got type int.
ERROR(101): Expecting Boolean test condition in while statement but got type int.
ERROR(103): 'b' is a simple variable and cannot be called.
ERROR(104): Cannot index nonarray 'b'.
ERROR(105): Cannot index nonarray 'x'.
ERROR(105): Symbol 'x' is not declared.
ERROR(106): Cannot index nonarray 'main'.
ERROR(106): Cannot use function 'main' as a variable.
ERROR(107): Cannot index nonarray 'main'.
ERROR(107): Cannot use function 'main' as a variable.
ERROR(108): Array 'ba' should be indexed by type int but got type bool.
ERROR(108): Array index is the unindexed array 'ba'.
ERROR(109): Array 'ba' should be indexed by type int but got type char.
ERROR(110): Cannot use function 'main' as a variable.
ERROR(111): The operation '+' does not work with arrays.
ERROR(112): Symbol 'a' is not declared.
ERROR(113): The operation 'sizeof' only works with arrays.
ERROR(114): Unary 'chsign' requires an operand of type int but was given type bool.
ERROR(116): Cannot return an array.
ERROR(116): Function 'main' at line 2 is expecting to return type int but returns type bool.
Number of warnings: 6
Number of errors: 83

==============
==============
./c- -P undeclared.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(1): The parameter 'x' seems not to be used.
ERROR(3): Symbol 'i' is not declared.
ERROR(3): Symbol 'z' is not declared.
ERROR(4): Symbol 'i' is not declared.
ERROR(4): Symbol 'z' is not declared.
ERROR(5): Symbol 'i' is not declared.
ERROR(5): Symbol 'i' is not declared.
ERROR(6): Symbol 'j' is not declared.
ERROR(7): Symbol 'l' is not declared.
ERROR(8): Symbol 'm' is not declared.
ERROR(9): Symbol 'k' is not declared.
Number of warnings: 1
Number of errors: 11

==============
==============
./c- -P undefined.c-
ERROR(4): Symbol 'y' is not declared.
ERROR(5): Symbol 'x' is not declared.
ERROR(6): Symbol 'x' is not declared.
ERROR(6): Symbol 'y' is not declared.
ERROR(7): Symbol 'x' is not declared.
ERROR(7): Symbol 'y' is not declared.
ERROR(8): Symbol 'x' is not declared.
ERROR(8): Symbol 'y' is not declared.
ERROR(9): Symbol 'array' is not declared.
ERROR(9): Symbol 'x' is not declared.
WARNING(12): The function 'cat' seems not to be used.
ERROR(14): Symbol 'dog' is not declared.
ERROR(15): Symbol 'dog' is not declared.
ERROR(16): Symbol 'dog' is not declared.
ERROR(16): Symbol 'dog' is not declared.
ERROR(16): Symbol 'dog' is not declared.
ERROR(18): Symbol 'mouse' is not declared.
ERROR(25): Symbol 'mouse' is not declared.
ERROR(27): Symbol 'mouse' is not declared.
ERROR(29): Symbol 'mouse' is not declared.
ERROR(31): Symbol 'mouse' is not declared.
WARNING(34): Expecting to return type int but function 'dog' has no return statement.
WARNING(34): The function 'dog' seems not to be used.
ERROR(36): Symbol 'mouse' is not declared.
ERROR(36): Symbol 'mouse' is not declared.
ERROR(37): Symbol 'mouse' is not declared.
ERROR(37): Symbol 'mouse' is not declared.
ERROR(38): Symbol 'mouse' is not declared.
ERROR(38): Symbol 'mouse' is not declared.
ERROR(39): Symbol 'mouse' is not declared.
ERROR(39): Symbol 'mouse' is not declared.
ERROR(41): Symbol 'mouse' is not declared.
ERROR(42): Symbol 'mouse' is not declared.
Number of warnings: 3
Number of errors: 30

==============
==============
./c- -P uninit2.c-
WARNING(6): Variable 'b' may be uninitialized when used here.
WARNING(8): Variable 'aa' may be uninitialized when used here.
WARNING(9): Variable 'bb' may be uninitialized when used here.
WARNING(9): Variable 'cc' may be uninitialized when used here.
WARNING(12): Variable 'dd' may be uninitialized when used here.
Func: main returns type void [line: 1]
.   Child: 1  Compound [line: 2]
.   .   Child: 0  Var: a of type int [line: 3]
.   .   Sibling: 1  Var: b of type int [line: 3]
.   .   Sibling: 2  Var: c of type int [line: 3]
.   .   Sibling: 3  Var: d of type int [line: 3]
.   .   Sibling: 4  Var: aa is array of type int [line: 4]
.   .   Sibling: 5  Var: bb is array of type int [line: 4]
.   .   Sibling: 6  Var: cc is array of type int [line: 4]
.   .   Sibling: 7  Var: dd is array of type int [line: 4]
.   .   Sibling: 8  Var: ee is array of type int [line: 4]
.   .   Child: 1  Assign: <= of type int [line: 6]
.   .   .   Child: 0  Id: a of type int [line: 6]
.   .   .   Child: 1  Id: b of type int [line: 6]
.   .   Sibling: 1  Assign: <= of type int [line: 7]
.   .   .   Child: 0  Id: a of type int [line: 7]
.   .   .   Child: 1  Id: b of type int [line: 7]
.   .   Sibling: 2  Assign: <= of type int [line: 8]
.   .   .   Child: 0  Id: a of type int [line: 8]
.   .   .   Child: 1  Op: [ of type int [line: 8]
.   .   .   .   Child: 0  Id: aa of type int [line: 8]
.   .   .   .   Child: 1  Const 3 of type int [line: 8]
.   .   Sibling: 3  Assign: <= of type int [line: 9]
.   .   .   Child: 0  Id: a of type int [line: 9]
.   .   .   Child: 1  Op: [ of type int [line: 9]
.   .   .   .   Child: 0  Id: bb of type int [line: 9]
.   .   .   .   Child: 1  Op: [ of type int [line: 9]
.   .   .   .   .   Child: 0  Id: cc of type int [line: 9]
.   .   .   .   .   Child: 1  Const 3 of type int [line: 9]
.   .   Sibling: 4  Assign: <= of type int [line: 10]
.   .   .   Child: 0  Op: [ of type int [line: 10]
.   .   .   .   Child: 0  Id: cc of type int [line: 10]
.   .   .   .   Child: 1  Id: c of type int [line: 10]
.   .   .   Child: 1  Id: a of type int [line: 10]
.   .   Sibling: 5  Assign: <= of type int [line: 11]
.   .   .   Child: 0  Op: [ of type int [line: 11]
.   .   .   .   Child: 0  Id: cc of type int [line: 11]
.   .   .   .   Child: 1  Op: + of type int [line: 11]
.   .   .   .   .   Child: 0  Id: c of type int [line: 11]
.   .   .   .   .   Child: 1  Id: d of type int [line: 11]
.   .   .   Child: 1  Id: a of type int [line: 11]
.   .   Sibling: 6  Op: [ of type int [line: 12]
.   .   .   Child: 0  Id: cc of type int [line: 12]
.   .   .   Child: 1  Op: [ of type int [line: 12]
.   .   .   .   Child: 0  Id: dd of type int [line: 12]
.   .   .   .   Child: 1  Const 3 of type int [line: 12]
.   .   Sibling: 7  Assign: <= of type int [line: 13]
.   .   .   Child: 0  Op: [ of type int [line: 13]
.   .   .   .   Child: 0  Id: cc of type int [line: 13]
.   .   .   .   Child: 1  Op: [ of type int [line: 13]
.   .   .   .   .   Child: 0  Id: ee of type int [line: 13]
.   .   .   .   .   Child: 1  Const 3 of type int [line: 13]
.   .   .   Child: 1  Const 284 of type int [line: 13]
Number of warnings: 5
Number of errors: 0

==============
==============
./c- -P uninit.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(1): The parameter 'x' seems not to be used.
ERROR(3): Symbol 'z' is already declared at line 3.
ERROR(3): Symbol 'z' is already declared at line 3.
WARNING(5): Variable 'i' may be uninitialized when used here.
WARNING(7): Variable 'g' may be uninitialized when used here.
WARNING(8): Variable 'h' may be uninitialized when used here.
WARNING(9): Variable 'j' may be uninitialized when used here.
WARNING(10): Variable 'k' may be uninitialized when used here.
WARNING(11): Variable 'l' may be uninitialized when used here.
WARNING(12): Variable 'm' may be uninitialized when used here.
ERROR(13): Symbol 'dog' is not declared.
ERROR(14): Cannot use function 'main' as a variable.
Number of warnings: 8
Number of errors: 5

==============
==============
./c- -P uninitialized.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(3): Expecting to return type int but function 'main' has no return statement.
WARNING(5): The variable 'x' seems not to be used.
WARNING(11): Variable 'y' may be uninitialized when used here.
WARNING(13): Variable 'a' may be uninitialized when used here.
WARNING(13): Variable 'v' may be uninitialized when used here.
WARNING(16): Variable 'r' may be uninitialized when used here.
Number of warnings: 6
Number of errors: 1

==============
==============
./c- -P unused.c-
WARNING(1): The variable 'g' seems not to be used.
WARNING(2): The function 'dog' seems not to be used.
WARNING(2): The parameter 'x' seems not to be used.
Var: g of type int [line: 1]
Sibling: 1  Var: ug of type int [line: 1]
Sibling: 2  Func: dog returns type void [line: 2]
.   Child: 0  Parm: x of type int [line: 2]
.   Child: 1  Compound [line: 2]
Sibling: 3  Func: udog returns type void [line: 3]
.   Child: 1  Compound [line: 3]
Sibling: 4  Func: main returns type void [line: 5]
.   Child: 1  Compound [line: 5]
.   .   Child: 1  Assign: <= of type int [line: 6]
.   .   .   Child: 0  Id: ug of type int [line: 6]
.   .   .   Child: 1  Const 3 of type int [line: 6]
.   .   Sibling: 1  Call: udog of type void [line: 7]
Number of warnings: 3
Number of errors: 0

==============
==============
./c- -P varAssign.c-
Var: gx of type int [line: 2]
Sibling: 1  Var: gy is array of type int [line: 2]
Sibling: 2  Func: esperanza returns type void [line: 3]
.   Child: 0  Parm: px of type int [line: 3]
.   Sibling: 1  Parm: py is array of type int [line: 3]
.   Child: 1  Compound [line: 4]
.   .   Child: 0  Var: x of type int [line: 5]
.   .   Sibling: 1  Var: y is array of type int [line: 5]
.   .   Sibling: 2  Var: sx of type int [line: 6]
.   .   Sibling: 3  Var: sy is array of type int [line: 6]
.   .   Child: 1  Assign: <= of type int [line: 7]
.   .   .   Child: 0  Id: gx of type int [line: 7]
.   .   .   Child: 1  Const 444 of type int [line: 7]
.   .   Sibling: 1  Assign: <= of type int [line: 8]
.   .   .   Child: 0  Id: x of type int [line: 8]
.   .   .   Child: 1  Const 555 of type int [line: 8]
.   .   Sibling: 2  Assign: <= of type int [line: 9]
.   .   .   Child: 0  Id: sx of type int [line: 9]
.   .   .   Child: 1  Const 666 of type int [line: 9]
.   .   Sibling: 3  Assign: <= of type int [line: 12]
.   .   .   Child: 0  Op: [ of type int [line: 12]
.   .   .   .   Child: 0  Id: gy of type int [line: 12]
.   .   .   .   Child: 1  Const 9 of type int [line: 12]
.   .   .   Child: 1  Const 222 of type int [line: 12]
.   .   Sibling: 4  Call: output of type void [line: 13]
.   .   .   Child: 0  Op: [ of type int [line: 13]
.   .   .   .   Child: 0  Id: gy of type int [line: 13]
.   .   .   .   Child: 1  Const 9 of type int [line: 13]
.   .   Sibling: 5  Assign: <= of type int [line: 14]
.   .   .   Child: 0  Id: gx of type int [line: 14]
.   .   .   Child: 1  Id: gx of type int [line: 14]
.   .   Sibling: 6  Call: output of type void [line: 15]
.   .   .   Child: 0  Id: gx of type int [line: 15]
.   .   Sibling: 7  Assign: <= of type int [line: 16]
.   .   .   Child: 0  Op: [ of type int [line: 16]
.   .   .   .   Child: 0  Id: gy of type int [line: 16]
.   .   .   .   Child: 1  Const 8 of type int [line: 16]
.   .   .   Child: 1  Op: [ of type int [line: 16]
.   .   .   .   Child: 0  Id: gy of type int [line: 16]
.   .   .   .   Child: 1  Const 9 of type int [line: 16]
.   .   Sibling: 8  Call: output of type void [line: 17]
.   .   .   Child: 0  Op: [ of type int [line: 17]
.   .   .   .   Child: 0  Id: gy of type int [line: 17]
.   .   .   .   Child: 1  Const 8 of type int [line: 17]
.   .   Sibling: 9  Call: outnl of type void [line: 18]
.   .   Sibling: 10  Assign: <= of type int [line: 21]
.   .   .   Child: 0  Op: [ of type int [line: 21]
.   .   .   .   Child: 0  Id: y of type int [line: 21]
.   .   .   .   Child: 1  Const 9 of type int [line: 21]
.   .   .   Child: 1  Const 333 of type int [line: 21]
.   .   Sibling: 11  Call: output of type void [line: 22]
.   .   .   Child: 0  Op: [ of type int [line: 22]
.   .   .   .   Child: 0  Id: y of type int [line: 22]
.   .   .   .   Child: 1  Const 9 of type int [line: 22]
.   .   Sibling: 12  Assign: <= of type int [line: 23]
.   .   .   Child: 0  Id: x of type int [line: 23]
.   .   .   Child: 1  Id: x of type int [line: 23]
.   .   Sibling: 13  Call: output of type void [line: 24]
.   .   .   Child: 0  Id: x of type int [line: 24]
.   .   Sibling: 14  Assign: <= of type int [line: 25]
.   .   .   Child: 0  Op: [ of type int [line: 25]
.   .   .   .   Child: 0  Id: y of type int [line: 25]
.   .   .   .   Child: 1  Const 7 of type int [line: 25]
.   .   .   Child: 1  Op: sizeof of type int [line: 25]
.   .   .   .   Child: 0  Id: y of type int [line: 25]
.   .   Sibling: 15  Call: output of type void [line: 26]
.   .   .   Child: 0  Op: [ of type int [line: 26]
.   .   .   .   Child: 0  Id: y of type int [line: 26]
.   .   .   .   Child: 1  Const 7 of type int [line: 26]
.   .   Sibling: 16  Call: outnl of type void [line: 27]
.   .   Sibling: 17  Assign: <= of type int [line: 30]
.   .   .   Child: 0  Id: px of type int [line: 30]
.   .   .   Child: 1  Id: px of type int [line: 30]
.   .   Sibling: 18  Call: output of type void [line: 31]
.   .   .   Child: 0  Id: px of type int [line: 31]
.   .   Sibling: 19  Assign: <= of type int [line: 32]
.   .   .   Child: 0  Id: px of type int [line: 32]
.   .   .   Child: 1  Const 101 of type int [line: 32]
.   .   Sibling: 20  Assign: <= of type int [line: 33]
.   .   .   Child: 0  Op: [ of type int [line: 33]
.   .   .   .   Child: 0  Id: py of type int [line: 33]
.   .   .   .   Child: 1  Const 8 of type int [line: 33]
.   .   .   Child: 1  Op: [ of type int [line: 33]
.   .   .   .   Child: 0  Id: py of type int [line: 33]
.   .   .   .   Child: 1  Const 9 of type int [line: 33]
.   .   Sibling: 21  Call: output of type void [line: 34]
.   .   .   Child: 0  Op: [ of type int [line: 34]
.   .   .   .   Child: 0  Id: py of type int [line: 34]
.   .   .   .   Child: 1  Const 8 of type int [line: 34]
.   .   Sibling: 22  Assign: <= of type int [line: 35]
.   .   .   Child: 0  Op: [ of type int [line: 35]
.   .   .   .   Child: 0  Id: py of type int [line: 35]
.   .   .   .   Child: 1  Const 8 of type int [line: 35]
.   .   .   Child: 1  Const 102 of type int [line: 35]
.   .   Sibling: 23  Assign: <= of type int [line: 36]
.   .   .   Child: 0  Op: [ of type int [line: 36]
.   .   .   .   Child: 0  Id: py of type int [line: 36]
.   .   .   .   Child: 1  Const 7 of type int [line: 36]
.   .   .   Child: 1  Op: sizeof of type int [line: 36]
.   .   .   .   Child: 0  Id: py of type int [line: 36]
.   .   Sibling: 24  Call: output of type void [line: 37]
.   .   .   Child: 0  Op: [ of type int [line: 37]
.   .   .   .   Child: 0  Id: py of type int [line: 37]
.   .   .   .   Child: 1  Const 7 of type int [line: 37]
.   .   Sibling: 25  Call: outnl of type void [line: 38]
.   .   Sibling: 26  Assign: <= of type int [line: 41]
.   .   .   Child: 0  Op: [ of type int [line: 41]
.   .   .   .   Child: 0  Id: sy of type int [line: 41]
.   .   .   .   Child: 1  Const 9 of type int [line: 41]
.   .   .   Child: 1  Const 444 of type int [line: 41]
.   .   Sibling: 27  Call: output of type void [line: 42]
.   .   .   Child: 0  Op: [ of type int [line: 42]
.   .   .   .   Child: 0  Id: sy of type int [line: 42]
.   .   .   .   Child: 1  Const 9 of type int [line: 42]
.   .   Sibling: 28  Assign: <= of type int [line: 43]
.   .   .   Child: 0  Id: sx of type int [line: 43]
.   .   .   Child: 1  Id: sx of type int [line: 43]
.   .   Sibling: 29  Call: output of type void [line: 44]
.   .   .   Child: 0  Id: sx of type int [line: 44]
.   .   Sibling: 30  Assign: <= of type int [line: 45]
.   .   .   Child: 0  Op: [ of type int [line: 45]
.   .   .   .   Child: 0  Id: sy of type int [line: 45]
.   .   .   .   Child: 1  Const 7 of type int [line: 45]
.   .   .   Child: 1  Op: sizeof of type int [line: 45]
.   .   .   .   Child: 0  Id: sy of type int [line: 45]
.   .   Sibling: 31  Call: output of type void [line: 46]
.   .   .   Child: 0  Op: [ of type int [line: 46]
.   .   .   .   Child: 0  Id: sy of type int [line: 46]
.   .   .   .   Child: 1  Const 7 of type int [line: 46]
.   .   Sibling: 32  Call: outnl of type void [line: 47]
Sibling: 3  Func: main returns type void [line: 51]
.   Child: 1  Compound [line: 52]
.   .   Child: 0  Var: zx of type int [line: 53]
.   .   Sibling: 1  Var: zy is array of type int [line: 53]
.   .   Child: 1  Assign: <= of type int [line: 56]
.   .   .   Child: 0  Id: zx of type int [line: 56]
.   .   .   Child: 1  Const 999 of type int [line: 56]
.   .   Sibling: 1  Assign: <= of type int [line: 57]
.   .   .   Child: 0  Op: [ of type int [line: 57]
.   .   .   .   Child: 0  Id: zy of type int [line: 57]
.   .   .   .   Child: 1  Const 9 of type int [line: 57]
.   .   .   Child: 1  Const 111 of type int [line: 57]
.   .   Sibling: 2  Call: output of type void [line: 58]
.   .   .   Child: 0  Id: zx of type int [line: 58]
.   .   Sibling: 3  Call: output of type void [line: 59]
.   .   .   Child: 0  Op: [ of type int [line: 59]
.   .   .   .   Child: 0  Id: zy of type int [line: 59]
.   .   .   .   Child: 1  Const 9 of type int [line: 59]
.   .   Sibling: 4  Call: outnl of type void [line: 60]
.   .   Sibling: 5  Call: esperanza of type void [line: 62]
.   .   .   Child: 0  Id: zx of type int [line: 62]
.   .   .   Sibling: 1  Id: zy of type int [line: 62]
.   .   Sibling: 6  Call: output of type void [line: 65]
.   .   .   Child: 0  Id: zx of type int [line: 65]
.   .   Sibling: 7  Call: output of type void [line: 66]
.   .   .   Child: 0  Op: [ of type int [line: 66]
.   .   .   .   Child: 0  Id: zy of type int [line: 66]
.   .   .   .   Child: 1  Const 9 of type int [line: 66]
.   .   Sibling: 8  Call: outnl of type void [line: 67]
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -P var.c-
ERROR(LINKER): A function named 'main' with no parameters must be defined.
WARNING(12): Variable 'x' may be uninitialized when used here.
WARNING(13): Variable 'y' may be uninitialized when used here.
Number of warnings: 2
Number of errors: 1

==============
==============
./c- -P varPair.c-
Var: gx of type int [line: 2]
Sibling: 1  Var: gy is array of type int [line: 2]
Sibling: 2  Func: fred returns type void [line: 3]
.   Child: 0  Parm: px of type int [line: 3]
.   Sibling: 1  Parm: py is array of type int [line: 3]
.   Child: 1  Compound [line: 4]
.   .   Child: 0  Var: x of type int [line: 5]
.   .   Sibling: 1  Var: y is array of type int [line: 5]
.   .   Sibling: 2  Var: sx of type int [line: 6]
.   .   Sibling: 3  Var: sy is array of type int [line: 6]
.   .   Child: 1  Assign: <= of type int [line: 8]
.   .   .   Child: 0  Id: gx of type int [line: 8]
.   .   .   Child: 1  Const 111 of type int [line: 8]
.   .   Sibling: 1  Assign: <= of type int [line: 9]
.   .   .   Child: 0  Id: gx of type int [line: 9]
.   .   .   Child: 1  Id: gx of type int [line: 9]
.   .   Sibling: 2  Call: output of type void [line: 10]
.   .   .   Child: 0  Id: gx of type int [line: 10]
.   .   Sibling: 3  Assign: <= of type int [line: 11]
.   .   .   Child: 0  Op: [ of type int [line: 11]
.   .   .   .   Child: 0  Id: gy of type int [line: 11]
.   .   .   .   Child: 1  Const 9 of type int [line: 11]
.   .   .   Child: 1  Const 222 of type int [line: 11]
.   .   Sibling: 4  Assign: <= of type int [line: 12]
.   .   .   Child: 0  Op: [ of type int [line: 12]
.   .   .   .   Child: 0  Id: gy of type int [line: 12]
.   .   .   .   Child: 1  Const 9 of type int [line: 12]
.   .   .   Child: 1  Op: [ of type int [line: 12]
.   .   .   .   Child: 0  Id: gy of type int [line: 12]
.   .   .   .   Child: 1  Const 9 of type int [line: 12]
.   .   Sibling: 5  Call: output of type void [line: 13]
.   .   .   Child: 0  Op: [ of type int [line: 13]
.   .   .   .   Child: 0  Id: gy of type int [line: 13]
.   .   .   .   Child: 1  Const 9 of type int [line: 13]
.   .   Sibling: 6  Call: outnl of type void [line: 14]
.   .   Sibling: 7  Assign: <= of type int [line: 16]
.   .   .   Child: 0  Id: x of type int [line: 16]
.   .   .   Child: 1  Const 333 of type int [line: 16]
.   .   Sibling: 8  Assign: <= of type int [line: 17]
.   .   .   Child: 0  Id: x of type int [line: 17]
.   .   .   Child: 1  Id: x of type int [line: 17]
.   .   Sibling: 9  Call: output of type void [line: 18]
.   .   .   Child: 0  Id: x of type int [line: 18]
.   .   Sibling: 10  Assign: <= of type int [line: 19]
.   .   .   Child: 0  Op: [ of type int [line: 19]
.   .   .   .   Child: 0  Id: y of type int [line: 19]
.   .   .   .   Child: 1  Const 9 of type int [line: 19]
.   .   .   Child: 1  Const 444 of type int [line: 19]
.   .   Sibling: 11  Assign: <= of type int [line: 20]
.   .   .   Child: 0  Op: [ of type int [line: 20]
.   .   .   .   Child: 0  Id: y of type int [line: 20]
.   .   .   .   Child: 1  Const 9 of type int [line: 20]
.   .   .   Child: 1  Op: [ of type int [line: 20]
.   .   .   .   Child: 0  Id: y of type int [line: 20]
.   .   .   .   Child: 1  Const 9 of type int [line: 20]
.   .   Sibling: 12  Call: output of type void [line: 21]
.   .   .   Child: 0  Op: [ of type int [line: 21]
.   .   .   .   Child: 0  Id: y of type int [line: 21]
.   .   .   .   Child: 1  Const 9 of type int [line: 21]
.   .   Sibling: 13  Call: outnl of type void [line: 22]
.   .   Sibling: 14  Assign: <= of type int [line: 24]
.   .   .   Child: 0  Id: px of type int [line: 24]
.   .   .   Child: 1  Const 555 of type int [line: 24]
.   .   Sibling: 15  Assign: <= of type int [line: 25]
.   .   .   Child: 0  Id: px of type int [line: 25]
.   .   .   Child: 1  Id: px of type int [line: 25]
.   .   Sibling: 16  Call: output of type void [line: 26]
.   .   .   Child: 0  Id: px of type int [line: 26]
.   .   Sibling: 17  Assign: <= of type int [line: 27]
.   .   .   Child: 0  Op: [ of type int [line: 27]
.   .   .   .   Child: 0  Id: py of type int [line: 27]
.   .   .   .   Child: 1  Const 9 of type int [line: 27]
.   .   .   Child: 1  Const 666 of type int [line: 27]
.   .   Sibling: 18  Assign: <= of type int [line: 28]
.   .   .   Child: 0  Op: [ of type int [line: 28]
.   .   .   .   Child: 0  Id: py of type int [line: 28]
.   .   .   .   Child: 1  Const 9 of type int [line: 28]
.   .   .   Child: 1  Op: [ of type int [line: 28]
.   .   .   .   Child: 0  Id: py of type int [line: 28]
.   .   .   .   Child: 1  Const 9 of type int [line: 28]
.   .   Sibling: 19  Call: output of type void [line: 29]
.   .   .   Child: 0  Op: [ of type int [line: 29]
.   .   .   .   Child: 0  Id: py of type int [line: 29]
.   .   .   .   Child: 1  Const 9 of type int [line: 29]
.   .   Sibling: 20  Call: outnl of type void [line: 30]
.   .   Sibling: 21  Assign: <= of type int [line: 32]
.   .   .   Child: 0  Id: sx of type int [line: 32]
.   .   .   Child: 1  Const 777 of type int [line: 32]
.   .   Sibling: 22  Assign: <= of type int [line: 33]
.   .   .   Child: 0  Id: sx of type int [line: 33]
.   .   .   Child: 1  Id: sx of type int [line: 33]
.   .   Sibling: 23  Call: output of type void [line: 34]
.   .   .   Child: 0  Id: sx of type int [line: 34]
.   .   Sibling: 24  Assign: <= of type int [line: 35]
.   .   .   Child: 0  Op: [ of type int [line: 35]
.   .   .   .   Child: 0  Id: sy of type int [line: 35]
.   .   .   .   Child: 1  Const 9 of type int [line: 35]
.   .   .   Child: 1  Const 888 of type int [line: 35]
.   .   Sibling: 25  Assign: <= of type int [line: 36]
.   .   .   Child: 0  Op: [ of type int [line: 36]
.   .   .   .   Child: 0  Id: sy of type int [line: 36]
.   .   .   .   Child: 1  Const 9 of type int [line: 36]
.   .   .   Child: 1  Op: [ of type int [line: 36]
.   .   .   .   Child: 0  Id: sy of type int [line: 36]
.   .   .   .   Child: 1  Const 9 of type int [line: 36]
.   .   Sibling: 26  Call: output of type void [line: 37]
.   .   .   Child: 0  Op: [ of type int [line: 37]
.   .   .   .   Child: 0  Id: sy of type int [line: 37]
.   .   .   .   Child: 1  Const 9 of type int [line: 37]
.   .   Sibling: 27  Call: outnl of type void [line: 38]
Sibling: 3  Func: main returns type void [line: 41]
.   Child: 1  Compound [line: 41]
.   .   Child: 0  Var: lx of type int [line: 42]
.   .   Sibling: 1  Var: ly is array of type int [line: 42]
.   .   Child: 1  Assign: <= of type int [line: 44]
.   .   .   Child: 0  Id: lx of type int [line: 44]
.   .   .   Child: 1  Assign: <= of type int [line: 44]
.   .   .   .   Child: 0  Op: [ of type int [line: 44]
.   .   .   .   .   Child: 0  Id: ly of type int [line: 44]
.   .   .   .   .   Child: 1  Const 0 of type int [line: 44]
.   .   .   .   Child: 1  Const 111 of type int [line: 44]
.   .   Sibling: 1  Call: fred of type void [line: 45]
.   .   .   Child: 0  Id: gx of type int [line: 45]
.   .   .   Sibling: 1  Id: gy of type int [line: 45]
.   .   Sibling: 2  Call: fred of type void [line: 46]
.   .   .   Child: 0  Id: lx of type int [line: 46]
.   .   .   Sibling: 1  Id: ly of type int [line: 46]
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -P while.c-
Func: main returns type void [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 0  Var: x of type int [line: 4]
.   .   Child: 1  Assign: <= of type int [line: 5]
.   .   .   Child: 0  Id: x of type int [line: 5]
.   .   .   Child: 1  Const 0 of type int [line: 5]
.   .   Sibling: 1  While [line: 7]
.   .   .   Child: 0  Op: > of type bool [line: 7]
.   .   .   .   Child: 0  Id: x of type int [line: 7]
.   .   .   .   Child: 1  Const 10 of type int [line: 7]
.   .   .   Child: 1  Assign: ++ of type int [line: 7]
.   .   .   .   Child: 0  Id: x of type int [line: 7]
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -P whileif.c-
ERROR(13): '<=' requires operands of the same type but lhs is type bool and rhs is type int.
Number of warnings: 0
Number of errors: 1

* End of testing
Kill all remaining c- processes
=================================================
Output Comparison
** Congratulations!  Your output matches the expected output exactly!
