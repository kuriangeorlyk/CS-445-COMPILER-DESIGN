=================================================
Output of Building User Code
Exploding tar files
20230323004441-geor5198-CS445-S23-A2.tar
parser.l
parser.y
TokenTree.cpp
TokenTree.h
ourgetopt.h
ourgetopt.c
makefile
Undossing tarred files assumes all files are ascii and not binary
undosing parser.l
undosing parser.y
undosing TokenTree.cpp
undosing TokenTree.h
undosing ourgetopt.h
undosing ourgetopt.c
undosing makefile
Extracting test files
array.c-
call.c-
cover.c-
exp.c-
fact.c-
factor.c-
gcd.c-
if.c-
ifs.c-
init.c-
loops.c-
matchunmatch.c-
oware21.c-
precassoc.c-
scope.c-
simple.c-
small.c-
testExample.c-
tiny.c-
whileif.c-
remove Tmp dir contents
Now start the build process

find makefile (lowercase)
makefile
A makefile is here and you compiler will be built with it
make the program
Alter compiler with special development tool set including g++ 4.9
parser.y: warning: 17 shift/reduce conflicts [-Wconflicts-sr]
parser.y: warning: 9 reduce/reduce conflicts [-Wconflicts-rr]
Output from build is 5 lines long
Output from build will be trimmed to 1000 lines if it is too long.
bison -v -t -d parser.y
flex parser.l
g++    -c -o lex.yy.o lex.yy.c
g++    -c -o parser.tab.o parser.tab.c
g++ lex.yy.o parser.tab.o TokenTree.cpp ourgetopt.c  -o c-
was a program called c- built?
c- is here and you compiler will now be tested
-rwx--x--x. 1 rs-cs-heckendo domain_users 124840 Mar 23 00:48 c-

END OF BUILD
=================================================
Complete Output of Testing
Run Tests
Limited to 5 seconds total run time and 3000 lines of output

* ================================================ *
|      Tests for CS445 Assignment 2                |
|       Comparison with Expected Output            |
|            Building a parser                     |
|                                                  |
* ================================================ *

/home/rs-cs-heckendo/TestWorld
-rwxrwxrwx jp/jp           365 2022-05-30 12:25 array.c-
-rwxrwxrwx jp/jp          1515 2022-05-30 12:25 call.c-
-rwxrwxrwx jp/jp          1003 2022-05-30 12:25 cover.c-
-rwxrwxrwx jp/jp           303 2022-05-30 12:25 exp.c-
-rwxrwxrwx jp/jp           240 2022-05-30 12:25 fact.c-
-rwxrwxrwx jp/jp           485 2022-05-30 12:25 factor.c-
-rwxrwxrwx jp/jp           153 2022-05-30 12:25 gcd.c-
-rwxrwxrwx jp/jp           398 2022-05-30 12:25 if.c-
-rwxrwxrwx jp/jp           289 2022-05-30 12:25 ifs.c-
-rwxrwxrwx jp/jp           577 2022-05-30 12:25 init.c-
-rwxrwxrwx jp/jp           411 2022-05-30 12:25 loops.c-
-rwxrwxrwx jp/jp           398 2022-05-30 12:25 matchunmatch.c-
-rwxrwxrwx jp/jp         11532 2022-05-30 12:25 oware21.c-
-rwxrwxrwx jp/jp           272 2022-05-30 12:25 precassoc.c-
-rwxrwxrwx jp/jp           240 2022-05-30 12:25 scope.c-
-rwxrwxrwx jp/jp            81 2022-05-30 12:25 simple.c-
-rwxrwxrwx jp/jp           473 2022-05-30 12:25 small.c-
-rwxrwxrwx jp/jp          1208 2022-05-30 12:25 testExample.c-
-rwxrwxrwx jp/jp           116 2022-05-30 12:25 tiny.c-
-rwxrwxrwx jp/jp          1654 2022-05-30 12:25 whileif.c-

==============
==============
Test input redirection
./c- gcd.c- (should produce no tree)

==============
==============
./c- -p array.c-
Var: w of array of type int [line: 2]
Sibling: 1 Func: dog returns type int [line: 4]
.   Child: 0 Parm: x of type int [line: 4]
.   Child: 1 Compound [line: 4]
.   .   Child: 0 Var: y of array of type int [line: 5]
.   .   Sibling: 1 Var: z of type int [line: 5]
.   .   Child: 1 Assign: <=  [line: 7]
.   .   .   Child: 0 Op: [ [line: 7]
.   .   .   .   Child: 0 Id: y  [line: 7]
.   .   .   .   Child: 1 Const 11 [line: 7]
.   .   .   Child: 1 Op: + [line: 7]
.   .   .   .   Child: 0 Op: * [line: 7]
.   .   .   .   .   Child: 0 Id: x  [line: 7]
.   .   .   .   .   Child: 1 Const 111 [line: 7]
.   .   .   .   Child: 1 Const 222 [line: 7]
.   .   Sibling: 1 Assign: <=  [line: 8]
.   .   .   Child: 0 Id: z  [line: 8]
.   .   .   Child: 1 Op: [ [line: 8]
.   .   .   .   Child: 0 Id: y  [line: 8]
.   .   .   .   Child: 1 Const 11 [line: 8]
.   .   Sibling: 2 Assign: <=  [line: 9]
.   .   .   Child: 0 Op: [ [line: 9]
.   .   .   .   Child: 0 Id: w  [line: 9]
.   .   .   .   Child: 1 Const 13 [line: 9]
.   .   .   Child: 1 Op: * [line: 9]
.   .   .   .   Child: 0 Op: * [line: 9]
.   .   .   .   .   Child: 0 Op: * [line: 9]
.   .   .   .   .   .   Child: 0 Op: chsign [line: 9]
.   .   .   .   .   .   .   Child: 0 Op: [ [line: 9]
.   .   .   .   .   .   .   .   Child: 0 Id: w  [line: 9]
.   .   .   .   .   .   .   .   Child: 1 Const 15 [line: 9]
.   .   .   .   .   .   Child: 1 Id: x  [line: 9]
.   .   .   .   .   Child: 1 Op: [ [line: 9]
.   .   .   .   .   .   Child: 0 Id: y  [line: 9]
.   .   .   .   .   .   Child: 1 Const 17 [line: 9]
.   .   .   .   Child: 1 Id: z  [line: 9]
.   .   Sibling: 3 Return [line: 11]
.   .   .   Child: 0 Op: * [line: 11]
.   .   .   .   Child: 0 Id: z  [line: 11]
.   .   .   .   Child: 1 Op: [ [line: 11]
.   .   .   .   .   Child: 0 Id: y  [line: 11]
.   .   .   .   .   Child: 1 Const 11 [line: 11]
Sibling: 2 Func: cat returns type void [line: 14]
.   Child: 0 Parm: x of array of type int [line: 14]
.   Sibling: 1 Parm: z of type int [line: 14]
.   Child: 1 Compound [line: 14]
.   .   Child: 1 Assign: <=  [line: 15]
.   .   .   Child: 0 Op: [ [line: 15]
.   .   .   .   Child: 0 Id: x  [line: 15]
.   .   .   .   Child: 1 Const 10 [line: 15]
.   .   .   Child: 1 Const 333 [line: 15]
.   .   Sibling: 1 Assign: <=  [line: 16]
.   .   .   Child: 0 Op: [ [line: 16]
.   .   .   .   Child: 0 Id: w  [line: 16]
.   .   .   .   Child: 1 Const 11 [line: 16]
.   .   .   Child: 1 Const 444 [line: 16]
.   .   Sibling: 2 For [line: 17]
.   .   .   Child: 0 Var: i of type int [line: 17]
.   .   .   Child: 1 Range [line: 17]
.   .   .   .   Child: 0 Const 1 [line: 17]
.   .   .   .   Child: 1 Op: - [line: 17]
.   .   .   .   .   Child: 0 Op: sizeof [line: 17]
.   .   .   .   .   .   Child: 0 Id: x  [line: 17]
.   .   .   .   .   Child: 1 Const 1 [line: 17]
.   .   .   Child: 2 Assign: +=  [line: 18]
.   .   .   .   Child: 0 Op: [ [line: 18]
.   .   .   .   .   Child: 0 Id: w  [line: 18]
.   .   .   .   .   Child: 1 Op: [ [line: 18]
.   .   .   .   .   .   Child: 0 Id: x  [line: 18]
.   .   .   .   .   .   Child: 1 Id: i  [line: 18]
.   .   .   .   Child: 1 Op: * [line: 18]
.   .   .   .   .   Child: 0 Op: [ [line: 18]
.   .   .   .   .   .   Child: 0 Id: w  [line: 18]
.   .   .   .   .   .   Child: 1 Op: [ [line: 18]
.   .   .   .   .   .   .   Child: 0 Id: x  [line: 18]
.   .   .   .   .   .   .   Child: 1 Op: - [line: 18]
.   .   .   .   .   .   .   .   Child: 0 Id: i  [line: 18]
.   .   .   .   .   .   .   .   Child: 1 Const 1 [line: 18]
.   .   .   .   .   Child: 1 Id: z  [line: 18]
Sibling: 3 Func: main returns type void [line: 21]
.   Child: 1 Compound [line: 21]
.   .   Child: 0 Var: y of array of type int [line: 22]
.   .   Child: 1 Call: cat  [line: 24]
.   .   .   Child: 0 Id: y  [line: 24]
.   .   .   Sibling: 1 Const 12 [line: 24]
.   .   Sibling: 1 Call: dog  [line: 25]
.   .   .   Child: 0 Const 666 [line: 25]

==============
==============
./c- -p call.c-
Func: showInt returns type int [line: 2]
.   Child: 0 Parm: x of type int [line: 2]
.   Child: 1 Compound [line: 3]
.   .   Child: 1 Call: output  [line: 4]
.   .   .   Child: 0 Id: x  [line: 4]
.   .   Sibling: 1 Call: outnl  [line: 5]
Sibling: 1 Func: showIntArray returns type int [line: 8]
.   Child: 0 Parm: x of array of type int [line: 8]
.   Sibling: 1 Parm: size of type int [line: 8]
.   Child: 1 Compound [line: 9]
.   .   Child: 0 Var: i of type int [line: 10]
.   .   Child: 1 Assign: <=  [line: 11]
.   .   .   Child: 0 Id: i  [line: 11]
.   .   .   Child: 1 Const 0 [line: 11]
.   .   Sibling: 1 While [line: 12]
.   .   .   Child: 0 Op: < [line: 12]
.   .   .   .   Child: 0 Id: i  [line: 12]
.   .   .   .   Child: 1 Id: size  [line: 12]
.   .   .   Child: 1 Compound [line: 12]
.   .   .   .   Child: 1 Call: output  [line: 13]
.   .   .   .   .   Child: 0 Op: [ [line: 13]
.   .   .   .   .   .   Child: 0 Id: x  [line: 13]
.   .   .   .   .   .   Child: 1 Id: i  [line: 13]
.   .   .   .   Sibling: 1 Assign: <=  [line: 14]
.   .   .   .   .   Child: 0 Id: i  [line: 14]
.   .   .   .   .   Child: 1 Op: + [line: 14]
.   .   .   .   .   .   Child: 0 Id: i  [line: 14]
.   .   .   .   .   .   Child: 1 Const 1 [line: 14]
.   .   Sibling: 2 Call: outnl  [line: 16]
Sibling: 2 Func: showBool returns type int [line: 19]
.   Child: 0 Parm: x of type bool [line: 19]
.   Child: 1 Compound [line: 20]
.   .   Child: 1 Call: outputb  [line: 21]
.   .   .   Child: 0 Id: x  [line: 21]
.   .   Sibling: 1 Call: outnl  [line: 22]
Sibling: 3 Func: truth returns type bool [line: 25]
.   Child: 1 Compound [line: 26]
.   .   Child: 1 Return [line: 27]
.   .   .   Child: 0 Const true [line: 27]
Sibling: 4 Func: magic returns type int [line: 30]
.   Child: 1 Compound [line: 31]
.   .   Child: 1 Return [line: 32]
.   .   .   Child: 0 Const 666 [line: 32]
Sibling: 5 Func: sqr returns type int [line: 35]
.   Child: 0 Parm: x of type int [line: 35]
.   Child: 1 Compound [line: 36]
.   .   Child: 1 Return [line: 37]
.   .   .   Child: 0 Op: * [line: 37]
.   .   .   .   Child: 0 Id: x  [line: 37]
.   .   .   .   Child: 1 Id: x  [line: 37]
Sibling: 6 Func: add returns type int [line: 40]
.   Child: 0 Parm: x of type int [line: 40]
.   Sibling: 1 Parm: y of type int [line: 40]
.   Child: 1 Compound [line: 41]
.   .   Child: 1 Return [line: 42]
.   .   .   Child: 0 Op: + [line: 42]
.   .   .   .   Child: 0 Id: x  [line: 42]
.   .   .   .   Child: 1 Id: y  [line: 42]
Sibling: 7 Func: mul returns type int [line: 45]
.   Child: 0 Parm: x of type int [line: 45]
.   Sibling: 1 Parm: y of type int [line: 45]
.   Child: 1 Compound [line: 46]
.   .   Child: 1 Return [line: 47]
.   .   .   Child: 0 Op: * [line: 47]
.   .   .   .   Child: 0 Id: x  [line: 47]
.   .   .   .   Child: 1 Id: y  [line: 47]
Sibling: 8 Var: g of type int [line: 50]
Sibling: 9 Func: caller returns type void [line: 52]
.   Child: 0 Parm: x of type int [line: 52]
.   Sibling: 1 Parm: y of array of type int [line: 52]
.   Child: 1 Compound [line: 53]
.   .   Child: 0 Var: z of type int [line: 54]
.   .   Sibling: 1 Var: a of type int [line: 55]
.   .   Child: 1 Assign: <=  [line: 57]
.   .   .   Child: 0 Id: a  [line: 57]
.   .   .   Child: 1 Const 666 [line: 57]
.   .   Sibling: 1 Assign: <=  [line: 58]
.   .   .   Child: 0 Id: g  [line: 58]
.   .   .   Child: 1 Const 777 [line: 58]
.   .   Sibling: 2 Assign: <=  [line: 60]
.   .   .   Child: 0 Id: z  [line: 60]
.   .   .   Child: 1 Call: sqr  [line: 60]
.   .   .   .   Child: 0 Id: x  [line: 60]
.   .   Sibling: 3 Call: output  [line: 61]
.   .   .   Child: 0 Id: z  [line: 61]
.   .   Sibling: 4 Call: outnl  [line: 62]
.   .   Sibling: 5 Assign: <=  [line: 64]
.   .   .   Child: 0 Id: z  [line: 64]
.   .   .   Child: 1 Call: sqr  [line: 64]
.   .   .   .   Child: 0 Op: [ [line: 64]
.   .   .   .   .   Child: 0 Id: y  [line: 64]
.   .   .   .   .   Child: 1 Const 7 [line: 64]
.   .   Sibling: 6 Call: output  [line: 65]
.   .   .   Child: 0 Id: z  [line: 65]
.   .   Sibling: 7 Call: outnl  [line: 66]
.   .   Sibling: 8 Assign: <=  [line: 68]
.   .   .   Child: 0 Id: z  [line: 68]
.   .   .   Child: 1 Call: sqr  [line: 68]
.   .   .   .   Child: 0 Id: a  [line: 68]
.   .   Sibling: 9 Call: output  [line: 69]
.   .   .   Child: 0 Id: z  [line: 69]
.   .   Sibling: 10 Call: outnl  [line: 70]
.   .   Sibling: 11 Assign: <=  [line: 72]
.   .   .   Child: 0 Id: z  [line: 72]
.   .   .   Child: 1 Call: sqr  [line: 72]
.   .   .   .   Child: 0 Id: g  [line: 72]
.   .   Sibling: 12 Call: output  [line: 73]
.   .   .   Child: 0 Id: z  [line: 73]
.   .   Sibling: 13 Call: outnl  [line: 74]
Sibling: 10 Func: swap returns type void [line: 77]
.   Child: 0 Parm: x of array of type int [line: 77]
.   Sibling: 1 Parm: z1 of type int [line: 77]
.   Sibling: 2 Parm: z2 of type int [line: 77]
.   Child: 1 Compound [line: 78]
.   .   Child: 0 Var: tmp of type int [line: 79]
.   .   Child: 1 Assign: <=  [line: 80]
.   .   .   Child: 0 Id: tmp  [line: 80]
.   .   .   Child: 1 Op: [ [line: 80]
.   .   .   .   Child: 0 Id: x  [line: 80]
.   .   .   .   Child: 1 Id: z1  [line: 80]
.   .   Sibling: 1 Assign: <=  [line: 81]
.   .   .   Child: 0 Op: [ [line: 81]
.   .   .   .   Child: 0 Id: x  [line: 81]
.   .   .   .   Child: 1 Id: z1  [line: 81]
.   .   .   Child: 1 Op: [ [line: 81]
.   .   .   .   Child: 0 Id: x  [line: 81]
.   .   .   .   Child: 1 Id: z2  [line: 81]
.   .   Sibling: 2 Assign: <=  [line: 82]
.   .   .   Child: 0 Op: [ [line: 82]
.   .   .   .   Child: 0 Id: x  [line: 82]
.   .   .   .   Child: 1 Id: z2  [line: 82]
.   .   .   Child: 1 Id: tmp  [line: 82]
Sibling: 11 Func: main returns type void [line: 85]
.   Child: 1 Compound [line: 86]
.   .   Child: 0 Var: p of type int [line: 87]
.   .   Sibling: 1 Var: q of type int [line: 87]
.   .   Sibling: 2 Var: r of array of type int [line: 87]
.   .   Sibling: 3 Var: s of array of type int [line: 87]
.   .   Child: 1 Assign: <=  [line: 89]
.   .   .   Child: 0 Id: p  [line: 89]
.   .   .   Child: 1 Const 0 [line: 89]
.   .   Sibling: 1 While [line: 90]
.   .   .   Child: 0 Op: < [line: 90]
.   .   .   .   Child: 0 Id: p  [line: 90]
.   .   .   .   Child: 1 Const 10 [line: 90]
.   .   .   Child: 1 Compound [line: 90]
.   .   .   .   Child: 1 Assign: <=  [line: 91]
.   .   .   .   .   Child: 0 Op: [ [line: 91]
.   .   .   .   .   .   Child: 0 Id: r  [line: 91]
.   .   .   .   .   .   Child: 1 Id: p  [line: 91]
.   .   .   .   .   Child: 1 Id: p  [line: 91]
.   .   .   .   Sibling: 1 Assign: ++  [line: 92]
.   .   .   .   .   Child: 0 Id: p  [line: 92]
.   .   Sibling: 2 Assign: <=  [line: 95]
.   .   .   Child: 0 Id: p  [line: 95]
.   .   .   Child: 1 Const 111 [line: 95]
.   .   Sibling: 3 Assign: <=  [line: 96]
.   .   .   Child: 0 Id: q  [line: 96]
.   .   .   Child: 1 Const 222 [line: 96]
.   .   Sibling: 4 Assign: <=  [line: 97]
.   .   .   Child: 0 Op: [ [line: 97]
.   .   .   .   Child: 0 Id: r  [line: 97]
.   .   .   .   Child: 1 Const 7 [line: 97]
.   .   .   Child: 1 Const 333 [line: 97]
.   .   Sibling: 5 Assign: <=  [line: 98]
.   .   .   Child: 0 Op: [ [line: 98]
.   .   .   .   Child: 0 Id: s  [line: 98]
.   .   .   .   Child: 1 Const 7 [line: 98]
.   .   .   Child: 1 Const 444 [line: 98]
.   .   Sibling: 6 Call: showInt  [line: 100]
.   .   .   Child: 0 Id: p  [line: 100]
.   .   Sibling: 7 Call: showIntArray  [line: 102]
.   .   .   Child: 0 Id: r  [line: 102]
.   .   .   Sibling: 1 Const 10 [line: 102]
.   .   Sibling: 8 Call: showBool  [line: 104]
.   .   .   Child: 0 Call: truth  [line: 104]
.   .   Sibling: 9 Call: output  [line: 106]
.   .   .   Child: 0 Call: showInt  [line: 106]
.   .   .   .   Child: 0 Id: p  [line: 106]
.   .   Sibling: 10 Call: output  [line: 107]
.   .   .   Child: 0 Call: showBool  [line: 107]
.   .   .   .   Child: 0 Call: truth  [line: 107]
.   .   Sibling: 11 Call: caller  [line: 109]
.   .   .   Child: 0 Id: p  [line: 109]
.   .   .   Sibling: 1 Id: r  [line: 109]
.   .   Sibling: 12 Call: output  [line: 111]
.   .   .   Child: 0 Call: add  [line: 111]
.   .   .   .   Child: 0 Call: add  [line: 111]
.   .   .   .   .   Child: 0 Id: p  [line: 111]
.   .   .   .   .   Sibling: 1 Id: q  [line: 111]
.   .   .   .   Sibling: 1 Call: mul  [line: 111]
.   .   .   .   .   Child: 0 Id: p  [line: 111]
.   .   .   .   .   Sibling: 1 Id: q  [line: 111]
.   .   Sibling: 13 Call: outnl  [line: 112]
.   .   Sibling: 14 Assign: <=  [line: 113]
.   .   .   Child: 0 Op: [ [line: 113]
.   .   .   .   Child: 0 Id: r  [line: 113]
.   .   .   .   Child: 1 Const 9 [line: 113]
.   .   .   Child: 1 Const 555 [line: 113]
.   .   Sibling: 15 Call: swap  [line: 114]
.   .   .   Child: 0 Id: r  [line: 114]
.   .   .   Sibling: 1 Const 7 [line: 114]
.   .   .   Sibling: 2 Const 9 [line: 114]
.   .   Sibling: 16 Call: output  [line: 115]
.   .   .   Child: 0 Op: [ [line: 115]
.   .   .   .   Child: 0 Id: r  [line: 115]
.   .   .   .   Child: 1 Const 9 [line: 115]
.   .   Sibling: 17 Call: outnl  [line: 116]
.   .   Sibling: 18 Call: output  [line: 117]
.   .   .   Child: 0 Op: * [line: 117]
.   .   .   .   Child: 0 Const 2 [line: 117]
.   .   .   .   Child: 1 Call: add  [line: 117]
.   .   .   .   .   Child: 0 Op: * [line: 117]
.   .   .   .   .   .   Child: 0 Call: add  [line: 117]
.   .   .   .   .   .   .   Child: 0 Op: * [line: 117]
.   .   .   .   .   .   .   .   Child: 0 Const 3 [line: 117]
.   .   .   .   .   .   .   .   Child: 1 Const 4 [line: 117]
.   .   .   .   .   .   .   Sibling: 1 Op: * [line: 117]
.   .   .   .   .   .   .   .   Child: 0 Const 5 [line: 117]
.   .   .   .   .   .   .   .   Child: 1 Const 6 [line: 117]
.   .   .   .   .   .   Child: 1 Const 7 [line: 117]
.   .   .   .   .   Sibling: 1 Op: * [line: 117]
.   .   .   .   .   .   Child: 0 Call: add  [line: 117]
.   .   .   .   .   .   .   Child: 0 Op: * [line: 117]
.   .   .   .   .   .   .   .   Child: 0 Const 9 [line: 117]
.   .   .   .   .   .   .   .   Child: 1 Const 10 [line: 117]
.   .   .   .   .   .   .   Sibling: 1 Op: * [line: 117]
.   .   .   .   .   .   .   .   Child: 0 Const 11 [line: 117]
.   .   .   .   .   .   .   .   Child: 1 Const 12 [line: 117]
.   .   .   .   .   .   Child: 1 Const 13 [line: 117]
.   .   Sibling: 19 Call: outnl  [line: 118]

==============
==============
./c- -p cover.c-
Var: fahrenheit of type int [line: 2]
.   Child: 0 Const 451 [line: 2]
Sibling: 1 Func: carbon returns type int [line: 4]
.   Child: 1 Compound [line: 4]
.   .   Child: 1 Return [line: 4]
.   .   .   Child: 0 Const 6 [line: 4]
Sibling: 2 Func: fred returns type void [line: 6]
.   Child: 0 Parm: a of type int [line: 6]
.   Sibling: 1 Parm: b of type int [line: 6]
.   Sibling: 2 Parm: c of type char [line: 6]
.   Sibling: 3 Parm: d of array of type char [line: 6]
.   Sibling: 4 Parm: e of type bool [line: 6]
.   Sibling: 5 Parm: f of array of type bool [line: 6]
.   Child: 1 Compound [line: 6]
.   .   Child: 1 For [line: 7]
.   .   .   Child: 0 Var: x of type int [line: 7]
.   .   .   Child: 1 Range [line: 7]
.   .   .   .   Child: 0 Const 1 [line: 7]
.   .   .   .   Child: 1 Const 10 [line: 7]
.   .   .   .   Child: 2 Const 3 [line: 7]
.   .   .   Child: 2 Compound [line: 7]
.   .   .   .   Child: 1 While [line: 8]
.   .   .   .   .   Child: 0 Op: > [line: 8]
.   .   .   .   .   .   Child: 0 Id: x  [line: 8]
.   .   .   .   .   .   Child: 1 Const 3 [line: 8]
.   .   .   .   .   Child: 1 Compound [line: 8]
.   .   .   .   .   .   Child: 1 If [line: 9]
.   .   .   .   .   .   .   Child: 0 Op: < [line: 9]
.   .   .   .   .   .   .   .   Child: 0 Id: x  [line: 9]
.   .   .   .   .   .   .   .   Child: 1 Const 5 [line: 9]
.   .   .   .   .   .   .   Child: 1 Return [line: 9]
.   .   .   .   .   .   .   Child: 2 Break [line: 10]
.   .   .   .   .   .   Sibling: 1 If [line: 11]
.   .   .   .   .   .   .   Child: 0 Const true [line: 11]
.   .   .   .   .   .   .   Child: 1 If [line: 11]
.   .   .   .   .   .   .   .   Child: 0 Op: = [line: 11]
.   .   .   .   .   .   .   .   .   Child: 0 Id: c  [line: 11]
.   .   .   .   .   .   .   .   .   Child: 1 Const  'a' [line: 11]
.   .   .   .   .   .   .   .   Child: 1 Const 666 [line: 11]
.   .   .   .   .   .   .   .   Child: 2 Const 777 [line: 11]
.   .   .   .   .   .   Sibling: 2 Assign: <=  [line: 12]
.   .   .   .   .   .   .   Child: 0 Id: a  [line: 12]
.   .   .   .   .   .   .   Child: 1 Assign: +=  [line: 12]
.   .   .   .   .   .   .   .   Child: 0 Id: b  [line: 12]
.   .   .   .   .   .   .   .   Child: 1 Const 3 [line: 12]
.   .   .   .   .   .   Sibling: 3 Assign: *=  [line: 13]
.   .   .   .   .   .   .   Child: 0 Id: a  [line: 13]
.   .   .   .   .   .   .   Child: 1 Assign: /=  [line: 13]
.   .   .   .   .   .   .   .   Child: 0 Id: b  [line: 13]
.   .   .   .   .   .   .   .   Child: 1 Const 4 [line: 13]
.   .   .   .   .   .   Sibling: 4 Assign: ++  [line: 14]
.   .   .   .   .   .   .   Child: 0 Id: a  [line: 14]
.   .   .   .   .   .   Sibling: 5 Assign: <=  [line: 15]
.   .   .   .   .   .   .   Child: 0 Id: e  [line: 15]
.   .   .   .   .   .   .   Child: 1 Op: or [line: 15]
.   .   .   .   .   .   .   .   Child: 0 Const true [line: 15]
.   .   .   .   .   .   .   .   Child: 1 Op: and [line: 15]
.   .   .   .   .   .   .   .   .   Child: 0 Const false [line: 15]
.   .   .   .   .   .   .   .   .   Child: 1 Op: not [line: 15]
.   .   .   .   .   .   .   .   .   .   Child: 0 Const false [line: 15]
.   .   .   .   .   .   Sibling: 6 Assign: -=  [line: 16]
.   .   .   .   .   .   .   Child: 0 Id: b  [line: 16]
.   .   .   .   .   .   .   Child: 1 Op: % [line: 16]
.   .   .   .   .   .   .   .   Child: 0 Op: / [line: 16]
.   .   .   .   .   .   .   .   .   Child: 0 Op: * [line: 16]
.   .   .   .   .   .   .   .   .   .   Child: 0 Id: a  [line: 16]
.   .   .   .   .   .   .   .   .   .   Child: 1 Id: b  [line: 16]
.   .   .   .   .   .   .   .   .   Child: 1 Const 5 [line: 16]
.   .   .   .   .   .   .   .   Child: 1 Const 13 [line: 16]
.   .   .   .   .   .   Sibling: 7 Assign: --  [line: 17]
.   .   .   .   .   .   .   Child: 0 Id: b  [line: 17]
.   .   .   .   .   .   Sibling: 8 Op: chsign [line: 18]
.   .   .   .   .   .   .   Child: 0 Op: chsign [line: 18]
.   .   .   .   .   .   .   .   Child: 0 Id: b  [line: 18]
.   .   .   .   .   .   Sibling: 9 Op: ? [line: 19]
.   .   .   .   .   .   .   Child: 0 Op: sizeof [line: 19]
.   .   .   .   .   .   .   .   Child: 0 Id: f  [line: 19]
.   .   .   .   .   .   Sibling: 10 Assign: <=  [line: 20]
.   .   .   .   .   .   .   Child: 0 Id: c  [line: 20]
.   .   .   .   .   .   .   Child: 1 Const  'x' [line: 20]
.   .   .   .   .   .   Sibling: 11 Assign: <=  [line: 21]
.   .   .   .   .   .   .   Child: 0 Id: d  [line: 21]
.   .   .   .   .   .   .   Child: 1 Const "horses" [line: 21]
.   .   .   .   .   .   Sibling: 12 Call: carbon  [line: 22]
.   .   .   .   .   .   Sibling: 13 Return [line: 23]
.   .   Sibling: 1 For [line: 26]
.   .   .   Child: 0 Var: i of type int [line: 26]
.   .   .   Child: 1 Range [line: 26]
.   .   .   .   Child: 0 Const 1 [line: 26]
.   .   .   .   Child: 1 Const 107 [line: 26]
.   .   .   Child: 2 Compound [line: 26]
.   .   .   .   Child: 0 Var: x of type int [line: 26]
Sibling: 3 Func: main returns type void [line: 29]
.   Child: 1 Compound [line: 29]
.   .   Child: 0 Var: a of type int [line: 30]
.   .   Sibling: 1 Var: b of array of type int [line: 30]
.   .   Sibling: 2 Var: c of type char [line: 31]
.   .   Sibling: 3 Var: d of array of type char [line: 31]
.   .   Sibling: 4 Var: e of type bool [line: 32]
.   .   Sibling: 5 Var: f of array of type bool [line: 32]
.   .   Sibling: 6 Var: g of static type int [line: 33]
.   .   Child: 1 Call: fred  [line: 34]
.   .   .   Child: 0 Const 101 [line: 34]
.   .   .   Sibling: 1 Op: [ [line: 34]
.   .   .   .   Child: 0 Id: b  [line: 34]
.   .   .   .   Child: 1 Const 4 [line: 34]
.   .   .   Sibling: 2 Const  'q' [line: 34]
.   .   .   Sibling: 3 Id: d  [line: 34]
.   .   .   Sibling: 4 Id: e  [line: 34]
.   .   .   Sibling: 5 Id: f  [line: 34]

==============
==============
./c- -p exp.c-
Func: main returns type void [line: 1]
.   Child: 1 Compound [line: 2]
.   .   Child: 0 Var: x of type bool [line: 3]
.   .   Sibling: 1 Var: array of array of type int [line: 4]
.   .   Child: 1 Compound [line: 6]
.   .   .   Child: 1 Op: or [line: 7]
.   .   .   .   Child: 0 Const false [line: 7]
.   .   .   .   Child: 1 Op: and [line: 7]
.   .   .   .   .   Child: 0 Const true [line: 7]
.   .   .   .   .   Child: 1 Op: < [line: 7]
.   .   .   .   .   .   Child: 0 Const 111 [line: 7]
.   .   .   .   .   .   Child: 1 Op: + [line: 7]
.   .   .   .   .   .   .   Child: 0 Const 222 [line: 7]
.   .   .   .   .   .   .   Child: 1 Op: * [line: 7]
.   .   .   .   .   .   .   .   Child: 0 Const 333 [line: 7]
.   .   .   .   .   .   .   .   Child: 1 Const 444 [line: 7]
.   .   .   Sibling: 1 Op: or [line: 8]
.   .   .   .   Child: 0 Op: and [line: 8]
.   .   .   .   .   Child: 0 Op: > [line: 8]
.   .   .   .   .   .   Child: 0 Op: + [line: 8]
.   .   .   .   .   .   .   Child: 0 Op: * [line: 8]
.   .   .   .   .   .   .   .   Child: 0 Const 444 [line: 8]
.   .   .   .   .   .   .   .   Child: 1 Const 333 [line: 8]
.   .   .   .   .   .   .   Child: 1 Const 222 [line: 8]
.   .   .   .   .   .   Child: 1 Const 111 [line: 8]
.   .   .   .   .   Child: 1 Const true [line: 8]
.   .   .   .   Child: 1 Const false [line: 8]
.   .   .   Sibling: 2 Op: and [line: 9]
.   .   .   .   Child: 0 Op: > [line: 9]
.   .   .   .   .   Child: 0 Op: * [line: 9]
.   .   .   .   .   .   Child: 0 Const 444 [line: 9]
.   .   .   .   .   .   Child: 1 Op: + [line: 9]
.   .   .   .   .   .   .   Child: 0 Const 333 [line: 9]
.   .   .   .   .   .   .   Child: 1 Const 222 [line: 9]
.   .   .   .   .   Child: 1 Const 111 [line: 9]
.   .   .   .   Child: 1 Op: or [line: 9]
.   .   .   .   .   Child: 0 Const true [line: 9]
.   .   .   .   .   Child: 1 Const false [line: 9]
.   .   Sibling: 1 Assign: <=  [line: 11]
.   .   .   Child: 0 Id: x  [line: 11]
.   .   .   Child: 1 Op: or [line: 11]
.   .   .   .   Child: 0 Const true [line: 11]
.   .   .   .   Child: 1 Op: and [line: 11]
.   .   .   .   .   Child: 0 Op: not [line: 11]
.   .   .   .   .   .   Child: 0 Op: = [line: 11]
.   .   .   .   .   .   .   Child: 0 Op: - [line: 11]
.   .   .   .   .   .   .   .   Child: 0 Op: + [line: 11]
.   .   .   .   .   .   .   .   .   Child: 0 Op: - [line: 11]
.   .   .   .   .   .   .   .   .   .   Child: 0 Op: chsign [line: 11]
.   .   .   .   .   .   .   .   .   .   .   Child: 0 Op: ? [line: 11]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 0 Op: [ [line: 11]
.   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0 Id: array  [line: 11]
.   .   .   .   .   .   .   .   .   .   .   .   .   Child: 1 Op: + [line: 11]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0 Const 11 [line: 11]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 1 Op: chsign [line: 11]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0 Const 8 [line: 11]
.   .   .   .   .   .   .   .   .   .   Child: 1 Op: % [line: 11]
.   .   .   .   .   .   .   .   .   .   .   Child: 0 Op: / [line: 11]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 0 Op: chsign [line: 11]
.   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0 Const 42 [line: 11]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 1 Const 13 [line: 11]
.   .   .   .   .   .   .   .   .   .   .   Child: 1 Const 5 [line: 11]
.   .   .   .   .   .   .   .   .   Child: 1 Const 31 [line: 11]
.   .   .   .   .   .   .   .   Child: 1 Const 331 [line: 11]
.   .   .   .   .   .   .   Child: 1 Const 12 [line: 11]
.   .   .   .   .   Child: 1 Op: < [line: 11]
.   .   .   .   .   .   Child: 0 Const 7 [line: 11]
.   .   .   .   .   .   Child: 1 Const 9 [line: 11]

==============
==============
./c- -p fact.c-
Func: fact returns type int [line: 2]
.   Child: 0 Parm: n of type int [line: 2]
.   Child: 1 Compound [line: 3]
.   .   Child: 1 If [line: 4]
.   .   .   Child: 0 Op: !> [line: 4]
.   .   .   .   Child: 0 Id: n  [line: 4]
.   .   .   .   Child: 1 Const 1 [line: 4]
.   .   .   Child: 1 Return [line: 4]
.   .   .   .   Child: 0 Const 1 [line: 4]
.   .   .   Child: 2 Return [line: 5]
.   .   .   .   Child: 0 Op: * [line: 5]
.   .   .   .   .   Child: 0 Call: fact  [line: 5]
.   .   .   .   .   .   Child: 0 Op: - [line: 5]
.   .   .   .   .   .   .   Child: 0 Id: n  [line: 5]
.   .   .   .   .   .   .   Child: 1 Const 1 [line: 5]
.   .   .   .   .   Child: 1 Id: n  [line: 5]
Sibling: 1 Func: main returns type void [line: 8]
.   Child: 1 Compound [line: 9]
.   .   Child: 1 For [line: 10]
.   .   .   Child: 0 Var: i of type int [line: 10]
.   .   .   Child: 1 Range [line: 10]
.   .   .   .   Child: 0 Const 1 [line: 10]
.   .   .   .   Child: 1 Const 20 [line: 10]
.   .   .   Child: 2 Compound [line: 10]
.   .   .   .   Child: 1 Call: output  [line: 11]
.   .   .   .   .   Child: 0 Id: i  [line: 11]
.   .   .   .   Sibling: 1 Call: output  [line: 12]
.   .   .   .   .   Child: 0 Call: fact  [line: 12]
.   .   .   .   .   .   Child: 0 Id: i  [line: 12]
.   .   .   .   Sibling: 2 Call: outnl  [line: 13]

==============
==============
./c- -p factor.c-
Func: main returns type void [line: 1]
.   Child: 1 Compound [line: 2]
.   .   Child: 0 Var: n of type int [line: 3]
.   .   Child: 1 While [line: 5]
.   .   .   Child: 0 Const true [line: 5]
.   .   .   Child: 1 Compound [line: 5]
.   .   .   .   Child: 1 Assign: <=  [line: 6]
.   .   .   .   .   Child: 0 Id: n  [line: 6]
.   .   .   .   .   Child: 1 Call: input  [line: 6]
.   .   .   .   Sibling: 1 If [line: 7]
.   .   .   .   .   Child: 0 Op: < [line: 7]
.   .   .   .   .   .   Child: 0 Id: n  [line: 7]
.   .   .   .   .   .   Child: 1 Const 2 [line: 7]
.   .   .   .   .   Child: 1 Break [line: 7]
.   .   .   .   Sibling: 2 While [line: 9]
.   .   .   .   .   Child: 0 Op: = [line: 9]
.   .   .   .   .   .   Child: 0 Op: % [line: 9]
.   .   .   .   .   .   .   Child: 0 Id: n  [line: 9]
.   .   .   .   .   .   .   Child: 1 Const 2 [line: 9]
.   .   .   .   .   .   Child: 1 Const 0 [line: 9]
.   .   .   .   .   Child: 1 Compound [line: 9]
.   .   .   .   .   .   Child: 1 Call: output  [line: 10]
.   .   .   .   .   .   .   Child: 0 Const 2 [line: 10]
.   .   .   .   .   .   Sibling: 1 Assign: /=  [line: 11]
.   .   .   .   .   .   .   Child: 0 Id: n  [line: 11]
.   .   .   .   .   .   .   Child: 1 Const 2 [line: 11]
.   .   .   .   Sibling: 3 For [line: 14]
.   .   .   .   .   Child: 0 Var: i of type int [line: 14]
.   .   .   .   .   Child: 1 Range [line: 14]
.   .   .   .   .   .   Child: 0 Const 3 [line: 14]
.   .   .   .   .   .   Child: 1 Id: n  [line: 14]
.   .   .   .   .   .   Child: 2 Const 2 [line: 14]
.   .   .   .   .   Child: 2 Compound [line: 14]
.   .   .   .   .   .   Child: 1 If [line: 15]
.   .   .   .   .   .   .   Child: 0 Op: > [line: 15]
.   .   .   .   .   .   .   .   Child: 0 Op: * [line: 15]
.   .   .   .   .   .   .   .   .   Child: 0 Id: i  [line: 15]
.   .   .   .   .   .   .   .   .   Child: 1 Id: i  [line: 15]
.   .   .   .   .   .   .   .   Child: 1 Id: n  [line: 15]
.   .   .   .   .   .   .   Child: 1 Break [line: 15]
.   .   .   .   .   .   Sibling: 1 While [line: 16]
.   .   .   .   .   .   .   Child: 0 Op: = [line: 16]
.   .   .   .   .   .   .   .   Child: 0 Op: % [line: 16]
.   .   .   .   .   .   .   .   .   Child: 0 Id: n  [line: 16]
.   .   .   .   .   .   .   .   .   Child: 1 Id: i  [line: 16]
.   .   .   .   .   .   .   .   Child: 1 Const 0 [line: 16]
.   .   .   .   .   .   .   Child: 1 Compound [line: 16]
.   .   .   .   .   .   .   .   Child: 1 Call: output  [line: 17]
.   .   .   .   .   .   .   .   .   Child: 0 Id: i  [line: 17]
.   .   .   .   .   .   .   .   Sibling: 1 Assign: /=  [line: 18]
.   .   .   .   .   .   .   .   .   Child: 0 Id: n  [line: 18]
.   .   .   .   .   .   .   .   .   Child: 1 Id: i  [line: 18]
.   .   .   .   Sibling: 4 If [line: 21]
.   .   .   .   .   Child: 0 Op: > [line: 21]
.   .   .   .   .   .   Child: 0 Id: n  [line: 21]
.   .   .   .   .   .   Child: 1 Const 1 [line: 21]
.   .   .   .   .   Child: 1 Call: output  [line: 21]
.   .   .   .   .   .   Child: 0 Id: n  [line: 21]
.   .   .   .   Sibling: 5 Call: outnl  [line: 22]

==============
==============
./c- -p gcd.c-
Func: gcd returns type int [line: 2]
.   Child: 0 Parm: u of type int [line: 2]
.   Sibling: 1 Parm: v of type int [line: 2]
.   Child: 1 Compound [line: 2]
.   .   Child: 1 If [line: 4]
.   .   .   Child: 0 Op: = [line: 4]
.   .   .   .   Child: 0 Id: v  [line: 4]
.   .   .   .   Child: 1 Const 0 [line: 4]
.   .   .   Child: 1 Return [line: 4]
.   .   .   .   Child: 0 Id: u  [line: 4]
.   .   .   Child: 2 Return [line: 4]
.   .   .   .   Child: 0 Call: gcd  [line: 4]
.   .   .   .   .   Child: 0 Id: v  [line: 4]
.   .   .   .   .   Sibling: 1 Op: - [line: 4]
.   .   .   .   .   .   Child: 0 Id: u  [line: 4]
.   .   .   .   .   .   Child: 1 Op: * [line: 4]
.   .   .   .   .   .   .   Child: 0 Op: / [line: 4]
.   .   .   .   .   .   .   .   Child: 0 Id: u  [line: 4]
.   .   .   .   .   .   .   .   Child: 1 Id: v  [line: 4]
.   .   .   .   .   .   .   Child: 1 Id: v  [line: 4]
Sibling: 1 Func: main returns type void [line: 6]
.   Child: 1 Compound [line: 7]
.   .   Child: 1 Call: output  [line: 8]
.   .   .   Child: 0 Call: gcd  [line: 8]
.   .   .   .   Child: 0 Call: input  [line: 8]
.   .   .   .   Sibling: 1 Call: input  [line: 8]

==============
==============
./c- -p if.c-
Func: main returns type int [line: 1]
.   Child: 1 Compound [line: 2]
.   .   Child: 1 If [line: 3]
.   .   .   Child: 0 Op: > [line: 3]
.   .   .   .   Child: 0 Const 1 [line: 3]
.   .   .   .   Child: 1 Const 2 [line: 3]
.   .   .   Child: 1 Const 3 [line: 3]
.   .   Sibling: 1 If [line: 4]
.   .   .   Child: 0 Op: < [line: 4]
.   .   .   .   Child: 0 Const 21 [line: 4]
.   .   .   .   Child: 1 Const 22 [line: 4]
.   .   .   Child: 1 Const 23 [line: 4]
.   .   .   Child: 2 Const 24 [line: 4]
.   .   Sibling: 2 If [line: 5]
.   .   .   Child: 0 Op: = [line: 5]
.   .   .   .   Child: 0 Const 31 [line: 5]
.   .   .   .   Child: 1 Const 32 [line: 5]
.   .   .   Child: 1 If [line: 5]
.   .   .   .   Child: 0 Op: = [line: 5]
.   .   .   .   .   Child: 0 Const 33 [line: 5]
.   .   .   .   .   Child: 1 Const 34 [line: 5]
.   .   .   .   Child: 1 Const 35 [line: 5]
.   .   .   .   Child: 2 Const 36 [line: 5]
.   .   Sibling: 3 If [line: 6]
.   .   .   Child: 0 Op: = [line: 6]
.   .   .   .   Child: 0 Const 41 [line: 6]
.   .   .   .   Child: 1 Const 42 [line: 6]
.   .   .   Child: 1 If [line: 6]
.   .   .   .   Child: 0 Op: = [line: 6]
.   .   .   .   .   Child: 0 Const 43 [line: 6]
.   .   .   .   .   Child: 1 Const 44 [line: 6]
.   .   .   .   Child: 1 Const 45 [line: 6]
.   .   .   .   Child: 2 Const 46 [line: 6]
.   .   .   Child: 2 Const 47 [line: 6]
.   .   Sibling: 4 If [line: 8]
.   .   .   Child: 0 Op: = [line: 8]
.   .   .   .   Child: 0 Const 51 [line: 8]
.   .   .   .   Child: 1 Const 52 [line: 8]
.   .   .   Child: 1 If [line: 9]
.   .   .   .   Child: 0 Op: = [line: 9]
.   .   .   .   .   Child: 0 Const 53 [line: 9]
.   .   .   .   .   Child: 1 Const 54 [line: 9]
.   .   .   .   Child: 1 Const 151 [line: 9]
.   .   .   .   Child: 2 Const 152 [line: 10]
.   .   .   Child: 2 If [line: 12]
.   .   .   .   Child: 0 Op: = [line: 12]
.   .   .   .   .   Child: 0 Const 56 [line: 12]
.   .   .   .   .   Child: 1 Const 57 [line: 12]
.   .   .   .   Child: 1 Const 58 [line: 12]
.   .   .   .   Child: 2 Const 59 [line: 13]
.   .   Sibling: 5 If [line: 15]
.   .   .   Child: 0 Op: = [line: 15]
.   .   .   .   Child: 0 Const 61 [line: 15]
.   .   .   .   Child: 1 Const 1 [line: 15]
.   .   .   Child: 1 Const 11 [line: 15]
.   .   .   Child: 2 If [line: 16]
.   .   .   .   Child: 0 Op: = [line: 16]
.   .   .   .   .   Child: 0 Const 62 [line: 16]
.   .   .   .   .   Child: 1 Const 1 [line: 16]
.   .   .   .   Child: 1 Const 12 [line: 16]
.   .   .   .   Child: 2 If [line: 17]
.   .   .   .   .   Child: 0 Op: = [line: 17]
.   .   .   .   .   .   Child: 0 Const 63 [line: 17]
.   .   .   .   .   .   Child: 1 Const 1 [line: 17]
.   .   .   .   .   Child: 1 Const 13 [line: 17]
.   .   .   .   .   Child: 2 Const 14 [line: 18]

==============
==============
./c- -p ifs.c-
Func: ant returns type void [line: 1]
.   Child: 1 Compound [line: 2]
.   .   Child: 0 Var: x of type bool [line: 3]
.   .   Sibling: 1 Var: y of type bool [line: 3]
.   .   Child: 1 If [line: 5]
.   .   .   Child: 0 Id: x  [line: 5]
.   .   .   Child: 1 Const 999 [line: 5]
.   .   Sibling: 1 If [line: 7]
.   .   .   Child: 0 Id: x  [line: 7]
.   .   .   Child: 1 Const 999 [line: 7]
.   .   .   Child: 2 Const 111 [line: 7]
.   .   Sibling: 2 If [line: 9]
.   .   .   Child: 0 Id: x  [line: 9]
.   .   .   Child: 1 Const 999 [line: 9]
.   .   .   Child: 2 If [line: 10]
.   .   .   .   Child: 0 Id: y  [line: 10]
.   .   .   .   Child: 1 Const 888 [line: 10]
.   .   .   .   Child: 2 Const 555 [line: 11]
.   .   Sibling: 3 If [line: 13]
.   .   .   Child: 0 Id: x  [line: 13]
.   .   .   Child: 1 Const 999 [line: 13]
.   .   .   Child: 2 If [line: 14]
.   .   .   .   Child: 0 Id: y  [line: 14]
.   .   .   .   Child: 1 Const 888 [line: 14]
.   .   Sibling: 4 If [line: 16]
.   .   .   Child: 0 Id: x  [line: 16]
.   .   .   Child: 1 If [line: 16]
.   .   .   .   Child: 0 Id: y  [line: 16]
.   .   .   .   Child: 1 Const 222 [line: 16]
.   .   Sibling: 5 If [line: 18]
.   .   .   Child: 0 Id: x  [line: 18]
.   .   .   Child: 1 Const 222 [line: 18]
.   .   .   Child: 2 If [line: 18]
.   .   .   .   Child: 0 Id: y  [line: 18]
.   .   .   .   Child: 1 Const 333 [line: 18]
.   .   Sibling: 6 If [line: 20]
.   .   .   Child: 0 Id: x  [line: 20]
.   .   .   Child: 1 If [line: 20]
.   .   .   .   Child: 0 Id: y  [line: 20]
.   .   .   .   Child: 1 Const 222 [line: 20]
.   .   .   .   Child: 2 Const 444 [line: 20]

==============
==============
./c- -p init.c-
Var: s of type int [line: 2]
.   Child: 0 Const 73 [line: 2]
Sibling: 1 Var: t of type char [line: 3]
.   Child: 0 Const  'A' [line: 3]
Sibling: 2 Var: u of type char [line: 3]
.   Child: 0 Const  'Z' [line: 3]
Sibling: 3 Func: main returns type void [line: 5]
.   Child: 1 Compound [line: 5]
.   .   Child: 0 Var: i of type int [line: 6]
.   .   .   Child: 0 Const 666 [line: 6]
.   .   Sibling: 1 Var: a of static type int [line: 7]
.   .   .   Child: 0 Const 666 [line: 7]
.   .   Sibling: 2 Var: y of type char [line: 8]
.   .   .   Child: 0 Const  'a' [line: 8]
.   .   Sibling: 3 Var: b of array of type char [line: 8]
.   .   Sibling: 4 Var: x of array of type int [line: 9]
.   .   Sibling: 5 Var: k of type int [line: 10]
.   .   .   Child: 0 Op: + [line: 10]
.   .   .   .   Child: 0 Op: * [line: 10]
.   .   .   .   .   Child: 0 Const 4 [line: 10]
.   .   .   .   .   Child: 1 Const 5 [line: 10]
.   .   .   .   Child: 1 Const 3 [line: 10]
.   .   Sibling: 6 Var: ba of type bool [line: 11]
.   .   .   Child: 0 Const true [line: 11]
.   .   Sibling: 7 Var: bb of type bool [line: 11]
.   .   .   Child: 0 Op: and [line: 11]
.   .   .   .   Child: 0 Const true [line: 11]
.   .   .   .   Child: 1 Op: not [line: 11]
.   .   .   .   .   Child: 0 Const false [line: 11]
.   .   Sibling: 8 Var: bc of type bool [line: 11]
.   .   .   Child: 0 Op: > [line: 11]
.   .   .   .   Child: 0 Const 5 [line: 11]
.   .   .   .   Child: 1 Const 4 [line: 11]
.   .   Sibling: 9 Var: ca of type char [line: 12]
.   .   .   Child: 0 Const  'a' [line: 12]
.   .   Child: 1 Assign: <=  [line: 14]
.   .   .   Child: 0 Op: [ [line: 14]
.   .   .   .   Child: 0 Id: x  [line: 14]
.   .   .   .   Child: 1 Const 1 [line: 14]
.   .   .   Child: 1 Const 111 [line: 14]
.   .   Sibling: 1 Assign: <=  [line: 15]
.   .   .   Child: 0 Id: a  [line: 15]
.   .   .   Child: 1 Op: sizeof [line: 15]
.   .   .   .   Child: 0 Id: b  [line: 15]
.   .   Sibling: 2 While [line: 16]
.   .   .   Child: 0 Op: < [line: 16]
.   .   .   .   Child: 0 Id: i  [line: 16]
.   .   .   .   Child: 1 Const 10 [line: 16]
.   .   .   Child: 1 Compound [line: 16]
.   .   .   .   Child: 0 Var: y of array of type int [line: 17]
.   .   .   .   Sibling: 1 Var: t of type bool [line: 18]
.   .   .   .   Child: 1 If [line: 19]
.   .   .   .   .   Child: 0 Id: t  [line: 19]
.   .   .   .   .   Child: 1 Break [line: 19]
.   .   .   .   Sibling: 1 If [line: 20]
.   .   .   .   .   Child: 0 Id: t  [line: 20]
.   .   .   .   .   Child: 1 Break [line: 20]
.   .   .   .   .   Child: 2 Return [line: 20]
.   .   .   .   Sibling: 2 Assign: <=  [line: 21]
.   .   .   .   .   Child: 0 Op: [ [line: 21]
.   .   .   .   .   .   Child: 0 Id: y  [line: 21]
.   .   .   .   .   .   Child: 1 Const 2 [line: 21]
.   .   .   .   .   Child: 1 Const 222 [line: 21]
.   .   Sibling: 3 Compound [line: 23]
.   .   .   Child: 1 Compound [line: 24]
.   .   .   .   Child: 0 Var: z of array of type int [line: 25]
.   .   .   .   Child: 1 Assign: <=  [line: 26]
.   .   .   .   .   Child: 0 Op: [ [line: 26]
.   .   .   .   .   .   Child: 0 Id: z  [line: 26]
.   .   .   .   .   .   Child: 1 Const 3 [line: 26]
.   .   .   .   .   Child: 1 Const 333 [line: 26]
.   .   Sibling: 4 Call: output  [line: 29]
.   .   .   Child: 0 Const 666 [line: 29]

==============
==============
./c- -p loops.c-
Var: iorek of type int [line: 2]
Sibling: 1 Func: dog returns type int [line: 4]
.   Child: 0 Parm: b of type bool [line: 4]
.   Sibling: 1 Parm: c of type char [line: 4]
.   Sibling: 2 Parm: d of type char [line: 4]
.   Child: 1 Compound [line: 5]
.   .   Child: 0 Var: x of type int [line: 6]
.   .   .   Child: 0 Const 666 [line: 6]
.   .   Sibling: 1 Var: w of type int [line: 6]
.   .   .   Child: 0 Const 777 [line: 6]
.   .   Sibling: 2 Var: z of type int [line: 6]
.   .   Sibling: 3 Var: y of type int [line: 7]
.   .   Child: 1 For [line: 9]
.   .   .   Child: 0 Var: y of type int [line: 9]
.   .   .   Child: 1 Range [line: 9]
.   .   .   .   Child: 0 Const 103 [line: 9]
.   .   .   .   Child: 1 Const 107 [line: 9]
.   .   .   Child: 2 Assign: <=  [line: 9]
.   .   .   .   Child: 0 Id: z  [line: 9]
.   .   .   .   Child: 1 Const 900 [line: 9]
.   .   Sibling: 1 For [line: 10]
.   .   .   Child: 0 Var: y of type int [line: 10]
.   .   .   Child: 1 Range [line: 10]
.   .   .   .   Child: 0 Const 217 [line: 10]
.   .   .   .   Child: 1 Const 13 [line: 10]
.   .   .   .   Child: 2 Op: chsign [line: 10]
.   .   .   .   .   Child: 0 Const 63 [line: 10]
.   .   .   Child: 2 Assign: <=  [line: 10]
.   .   .   .   Child: 0 Id: z  [line: 10]
.   .   .   .   Child: 1 Id: x  [line: 10]
.   .   Sibling: 2 For [line: 11]
.   .   .   Child: 0 Var: lyra of type int [line: 11]
.   .   .   Child: 1 Range [line: 11]
.   .   .   .   Child: 0 Op: * [line: 11]
.   .   .   .   .   Child: 0 Const 3 [line: 11]
.   .   .   .   .   Child: 1 Id: x  [line: 11]
.   .   .   .   Child: 1 Op: + [line: 11]
.   .   .   .   .   Child: 0 Id: w  [line: 11]
.   .   .   .   .   Child: 1 Const 13 [line: 11]
.   .   .   .   Child: 2 Op: * [line: 11]
.   .   .   .   .   Child: 0 Id: x  [line: 11]
.   .   .   .   .   Child: 1 Id: w  [line: 11]
.   .   .   Child: 2 Compound [line: 11]
.   .   .   .   Child: 1 Assign: <=  [line: 13]
.   .   .   .   .   Child: 0 Id: lyra  [line: 13]
.   .   .   .   .   Child: 1 Id: iorek  [line: 13]
.   .   Sibling: 3 While [line: 16]
.   .   .   Child: 0 Op: > [line: 16]
.   .   .   .   Child: 0 Id: x  [line: 16]
.   .   .   .   Child: 1 Op: + [line: 16]
.   .   .   .   .   Child: 0 Id: y  [line: 16]
.   .   .   .   .   Child: 1 Id: z  [line: 16]
.   .   .   Child: 1 Assign: <=  [line: 16]
.   .   .   .   Child: 0 Id: x  [line: 16]
.   .   .   .   Child: 1 Const 6031 [line: 16]
.   .   Sibling: 4 While [line: 17]
.   .   .   Child: 0 Op: > [line: 17]
.   .   .   .   Child: 0 Id: x  [line: 17]
.   .   .   .   Child: 1 Op: + [line: 17]
.   .   .   .   .   Child: 0 Id: y  [line: 17]
.   .   .   .   .   Child: 1 Id: z  [line: 17]
.   .   .   Child: 1 Compound [line: 17]
.   .   .   .   Child: 0 Var: x of type int [line: 18]
.   .   .   .   Sibling: 1 Var: y of type int [line: 18]
.   .   .   .   Sibling: 2 Var: z of type int [line: 18]
.   .   .   .   Child: 1 Assign: <=  [line: 19]
.   .   .   .   .   Child: 0 Id: x  [line: 19]
.   .   .   .   .   Child: 1 Const 6031 [line: 19]
.   .   Sibling: 5 While [line: 21]
.   .   .   Child: 0 Id: b  [line: 21]
.   .   .   Child: 1 While [line: 21]
.   .   .   .   Child: 0 Id: b  [line: 21]

==============
==============
./c- -p matchunmatch.c-
Func: main returns type void [line: 1]
.   Child: 1 Compound [line: 2]
.   .   Child: 0 Var: s of type bool [line: 3]
.   .   Sibling: 1 Var: t of type bool [line: 3]
.   .   Sibling: 2 Var: u of type bool [line: 3]
.   .   Sibling: 3 Var: v of type bool [line: 3]
.   .   Sibling: 4 Var: a of type char [line: 4]
.   .   Sibling: 5 Var: b of type char [line: 4]
.   .   Sibling: 6 Var: c of type char [line: 4]
.   .   Sibling: 7 Var: d of type char [line: 4]
.   .   Child: 1 If [line: 6]
.   .   .   Child: 0 Op: = [line: 6]
.   .   .   .   Child: 0 Const 1 [line: 6]
.   .   .   .   Child: 1 Const 1 [line: 6]
.   .   .   Child: 1 While [line: 6]
.   .   .   .   Child: 0 Id: t  [line: 6]
.   .   .   .   Child: 1 Id: a  [line: 6]
.   .   .   Child: 2 Id: b  [line: 6]
.   .   Sibling: 1 If [line: 7]
.   .   .   Child: 0 Op: = [line: 7]
.   .   .   .   Child: 0 Const 2 [line: 7]
.   .   .   .   Child: 1 Const 1 [line: 7]
.   .   .   Child: 1 While [line: 7]
.   .   .   .   Child: 0 Id: t  [line: 7]
.   .   .   .   Child: 1 If [line: 7]
.   .   .   .   .   Child: 0 Id: u  [line: 7]
.   .   .   .   .   Child: 1 Id: a  [line: 7]
.   .   .   .   .   Child: 2 Id: b  [line: 7]
.   .   Sibling: 2 If [line: 8]
.   .   .   Child: 0 Op: < [line: 8]
.   .   .   .   Child: 0 Const 3 [line: 8]
.   .   .   .   Child: 1 Const 2 [line: 8]
.   .   .   Child: 1 Id: a  [line: 8]
.   .   .   Child: 2 If [line: 8]
.   .   .   .   Child: 0 Id: u  [line: 8]
.   .   .   .   Child: 1 Id: b  [line: 8]
.   .   .   .   Child: 2 If [line: 8]
.   .   .   .   .   Child: 0 Id: v  [line: 8]
.   .   .   .   .   Child: 1 Id: c  [line: 8]
.   .   .   .   .   Child: 2 Id: d  [line: 8]
.   .   Sibling: 3 If [line: 9]
.   .   .   Child: 0 Op: = [line: 9]
.   .   .   .   Child: 0 Const 4 [line: 9]
.   .   .   .   Child: 1 Const 4 [line: 9]
.   .   .   Child: 1 While [line: 9]
.   .   .   .   Child: 0 Id: t  [line: 9]
.   .   .   .   Child: 1 If [line: 9]
.   .   .   .   .   Child: 0 Id: u  [line: 9]
.   .   .   .   .   Child: 1 Id: b  [line: 9]
.   .   .   .   .   Child: 2 If [line: 9]
.   .   .   .   .   .   Child: 0 Id: v  [line: 9]
.   .   .   .   .   .   Child: 1 Id: c  [line: 9]
.   .   .   .   .   .   Child: 2 Id: d  [line: 9]
.   .   Sibling: 4 If [line: 10]
.   .   .   Child: 0 Op: !< [line: 10]
.   .   .   .   Child: 0 Const 5 [line: 10]
.   .   .   .   Child: 1 Const 7 [line: 10]
.   .   .   Child: 1 While [line: 10]
.   .   .   .   Child: 0 Id: t  [line: 10]
.   .   .   .   Child: 1 For [line: 10]
.   .   .   .   .   Child: 0 Var: i of type int [line: 10]
.   .   .   .   .   Child: 1 Range [line: 10]
.   .   .   .   .   .   Child: 0 Const 1 [line: 10]
.   .   .   .   .   .   Child: 1 Const 10 [line: 10]
.   .   .   .   .   Child: 2 Id: b  [line: 10]
.   .   .   Child: 2 Id: c  [line: 10]
.   .   Sibling: 5 If [line: 11]
.   .   .   Child: 0 Op: = [line: 11]
.   .   .   .   Child: 0 Const 6 [line: 11]
.   .   .   .   Child: 1 Const 6 [line: 11]
.   .   .   Child: 1 While [line: 11]
.   .   .   .   Child: 0 Id: t  [line: 11]
.   .   .   .   Child: 1 If [line: 11]
.   .   .   .   .   Child: 0 Id: u  [line: 11]
.   .   .   .   .   Child: 1 For [line: 11]
.   .   .   .   .   .   Child: 0 Var: k of type int [line: 11]
.   .   .   .   .   .   Child: 1 Range [line: 11]
.   .   .   .   .   .   .   Child: 0 Const 0 [line: 11]
.   .   .   .   .   .   .   Child: 1 Const 1 [line: 11]
.   .   .   .   .   .   Child: 2 Id: b  [line: 11]
.   .   .   .   .   Child: 2 Id: c  [line: 11]

==============
==============
./c- -p oware21.c-
Var: cups of array of type int [line: 100]
Sibling: 1 Var: sumPlayerT of type int [line: 101]
Sibling: 2 Var: sumPlayerF of type int [line: 102]
Sibling: 3 Var: winnerPlayerT of type bool [line: 103]
Sibling: 4 Var: winnerPlayerF of type bool [line: 104]
Sibling: 5 Var: winner of type bool [line: 105]
Sibling: 6 Var: turn of type bool [line: 106]
Sibling: 7 Func: debug returns type void [line: 108]
.   Child: 0 Parm: type of type bool [line: 108]
.   Child: 1 Compound [line: 108]
.   .   Child: 0 Var: count of type int [line: 109]
.   .   Child: 1 Assign: <=  [line: 110]
.   .   .   Child: 0 Id: count  [line: 110]
.   .   .   Child: 1 Const 10 [line: 110]
.   .   Sibling: 1 While [line: 111]
.   .   .   Child: 0 Op: > [line: 111]
.   .   .   .   Child: 0 Id: count  [line: 111]
.   .   .   .   Child: 1 Const 0 [line: 111]
.   .   .   Child: 1 Compound [line: 111]
.   .   .   .   Child: 1 Call: outputb  [line: 112]
.   .   .   .   .   Child: 0 Id: type  [line: 112]
.   .   .   .   Sibling: 1 Assign: --  [line: 113]
.   .   .   .   .   Child: 0 Id: count  [line: 113]
.   .   .   .   Sibling: 2 If [line: 114]
.   .   .   .   .   Child: 0 Op: = [line: 114]
.   .   .   .   .   .   Child: 0 Id: count  [line: 114]
.   .   .   .   .   .   Child: 1 Const 0 [line: 114]
.   .   .   .   .   Child: 1 Call: outnl  [line: 114]
Sibling: 8 Func: initGame returns type void [line: 118]
.   Child: 1 Compound [line: 118]
.   .   Child: 0 Var: index of type int [line: 119]
.   .   Child: 1 Assign: <=  [line: 120]
.   .   .   Child: 0 Id: index  [line: 120]
.   .   .   Child: 1 Const 0 [line: 120]
.   .   Sibling: 1 While [line: 123]
.   .   .   Child: 0 Op: < [line: 123]
.   .   .   .   Child: 0 Id: index  [line: 123]
.   .   .   .   Child: 1 Const 12 [line: 123]
.   .   .   Child: 1 Compound [line: 123]
.   .   .   .   Child: 1 Assign: <=  [line: 124]
.   .   .   .   .   Child: 0 Op: [ [line: 124]
.   .   .   .   .   .   Child: 0 Id: cups  [line: 124]
.   .   .   .   .   .   Child: 1 Id: index  [line: 124]
.   .   .   .   .   Child: 1 Const 4 [line: 124]
.   .   .   .   Sibling: 1 Assign: ++  [line: 125]
.   .   .   .   .   Child: 0 Id: index  [line: 125]
.   .   Sibling: 2 Return [line: 127]
Sibling: 9 Func: printBoard returns type void [line: 130]
.   Child: 1 Compound [line: 130]
.   .   Child: 0 Var: index of type int [line: 131]
.   .   Child: 1 Assign: <=  [line: 132]
.   .   .   Child: 0 Id: index  [line: 132]
.   .   .   Child: 1 Const 5 [line: 132]
.   .   Sibling: 1 While [line: 134]
.   .   .   Child: 0 Op: !< [line: 134]
.   .   .   .   Child: 0 Id: index  [line: 134]
.   .   .   .   Child: 1 Const 0 [line: 134]
.   .   .   Child: 1 Compound [line: 134]
.   .   .   .   Child: 1 If [line: 135]
.   .   .   .   .   Child: 0 Op: = [line: 135]
.   .   .   .   .   .   Child: 0 Id: index  [line: 135]
.   .   .   .   .   .   Child: 1 Const 5 [line: 135]
.   .   .   .   .   Child: 1 Compound [line: 135]
.   .   .   .   .   .   Child: 1 Call: outputb  [line: 136]
.   .   .   .   .   .   .   Child: 0 Const true [line: 136]
.   .   .   .   .   .   Sibling: 1 Call: output  [line: 137]
.   .   .   .   .   .   .   Child: 0 Id: sumPlayerT  [line: 137]
.   .   .   .   .   .   Sibling: 2 Call: outputb  [line: 138]
.   .   .   .   .   .   .   Child: 0 Const true [line: 138]
.   .   .   .   Sibling: 1 Call: output  [line: 140]
.   .   .   .   .   Child: 0 Op: [ [line: 140]
.   .   .   .   .   .   Child: 0 Id: cups  [line: 140]
.   .   .   .   .   .   Child: 1 Id: index  [line: 140]
.   .   .   .   Sibling: 2 Assign: --  [line: 141]
.   .   .   .   .   Child: 0 Id: index  [line: 141]
.   .   Sibling: 2 Call: outnl  [line: 144]
.   .   Sibling: 3 Assign: <=  [line: 145]
.   .   .   Child: 0 Id: index  [line: 145]
.   .   .   Child: 1 Const 6 [line: 145]
.   .   Sibling: 4 While [line: 148]
.   .   .   Child: 0 Op: < [line: 148]
.   .   .   .   Child: 0 Id: index  [line: 148]
.   .   .   .   Child: 1 Const 12 [line: 148]
.   .   .   Child: 1 Compound [line: 148]
.   .   .   .   Child: 1 If [line: 149]
.   .   .   .   .   Child: 0 Op: = [line: 149]
.   .   .   .   .   .   Child: 0 Id: index  [line: 149]
.   .   .   .   .   .   Child: 1 Const 6 [line: 149]
.   .   .   .   .   Child: 1 Compound [line: 149]
.   .   .   .   .   .   Child: 1 Call: outputb  [line: 150]
.   .   .   .   .   .   .   Child: 0 Const false [line: 150]
.   .   .   .   .   .   Sibling: 1 Call: output  [line: 151]
.   .   .   .   .   .   .   Child: 0 Id: sumPlayerF  [line: 151]
.   .   .   .   .   .   Sibling: 2 Call: outputb  [line: 152]
.   .   .   .   .   .   .   Child: 0 Const false [line: 152]
.   .   .   .   Sibling: 1 Call: output  [line: 154]
.   .   .   .   .   Child: 0 Op: [ [line: 154]
.   .   .   .   .   .   Child: 0 Id: cups  [line: 154]
.   .   .   .   .   .   Child: 1 Id: index  [line: 154]
.   .   .   .   Sibling: 2 Assign: ++  [line: 155]
.   .   .   .   .   Child: 0 Id: index  [line: 155]
.   .   Sibling: 5 Call: outnl  [line: 157]
.   .   Sibling: 6 Return [line: 158]
Sibling: 10 Func: tryPlayerT returns type void [line: 161]
.   Child: 1 Compound [line: 161]
.   .   Child: 1 If [line: 168]
.   .   .   Child: 0 Op: > [line: 168]
.   .   .   .   Child: 0 Id: sumPlayerT  [line: 168]
.   .   .   .   Child: 1 Const 24 [line: 168]
.   .   .   Child: 1 Compound [line: 168]
.   .   .   .   Child: 1 Assign: <=  [line: 169]
.   .   .   .   .   Child: 0 Id: winnerPlayerT  [line: 169]
.   .   .   .   .   Child: 1 Const true [line: 169]
.   .   .   .   Sibling: 1 Assign: <=  [line: 170]
.   .   .   .   .   Child: 0 Id: winner  [line: 170]
.   .   .   .   .   Child: 1 Const true [line: 170]
.   .   Sibling: 1 Return [line: 172]
Sibling: 11 Func: tryPlayerF returns type void [line: 175]
.   Child: 1 Compound [line: 175]
.   .   Child: 1 If [line: 182]
.   .   .   Child: 0 Op: > [line: 182]
.   .   .   .   Child: 0 Id: sumPlayerF  [line: 182]
.   .   .   .   Child: 1 Const 24 [line: 182]
.   .   .   Child: 1 Compound [line: 182]
.   .   .   .   Child: 1 Assign: <=  [line: 183]
.   .   .   .   .   Child: 0 Id: winnerPlayerF  [line: 183]
.   .   .   .   .   Child: 1 Const true [line: 183]
.   .   .   .   Sibling: 1 Assign: <=  [line: 184]
.   .   .   .   .   Child: 0 Id: winner  [line: 184]
.   .   .   .   .   Child: 1 Const true [line: 184]
.   .   Sibling: 1 Return [line: 186]
Sibling: 12 Func: moveSeeds returns type void [line: 189]
.   Child: 0 Parm: cup of type int [line: 189]
.   Sibling: 1 Parm: player of type bool [line: 189]
.   Child: 1 Compound [line: 189]
.   .   Child: 0 Var: index of type int [line: 190]
.   .   Sibling: 1 Var: numSeeds of type int [line: 190]
.   .   Sibling: 2 Var: numSeeds2 of type int [line: 190]
.   .   Sibling: 3 Var: consecutive of type bool [line: 191]
.   .   Child: 1 Assign: <=  [line: 193]
.   .   .   Child: 0 Id: consecutive  [line: 193]
.   .   .   Child: 1 Const true [line: 193]
.   .   Sibling: 1 Assign: <=  [line: 194]
.   .   .   Child: 0 Id: numSeeds  [line: 194]
.   .   .   Child: 1 Assign: <=  [line: 194]
.   .   .   .   Child: 0 Id: numSeeds2  [line: 194]
.   .   .   .   Child: 1 Op: [ [line: 194]
.   .   .   .   .   Child: 0 Id: cups  [line: 194]
.   .   .   .   .   Child: 1 Id: cup  [line: 194]
.   .   Sibling: 2 Assign: <=  [line: 195]
.   .   .   Child: 0 Op: [ [line: 195]
.   .   .   .   Child: 0 Id: cups  [line: 195]
.   .   .   .   Child: 1 Id: cup  [line: 195]
.   .   .   Child: 1 Const 0 [line: 195]
.   .   Sibling: 3 Assign: <=  [line: 196]
.   .   .   Child: 0 Id: index  [line: 196]
.   .   .   Child: 1 Id: cup  [line: 196]
.   .   Sibling: 4 While [line: 198]
.   .   .   Child: 0 Op: != [line: 198]
.   .   .   .   Child: 0 Id: numSeeds  [line: 198]
.   .   .   .   Child: 1 Const 0 [line: 198]
.   .   .   Child: 1 Compound [line: 198]
.   .   .   .   Child: 1 Assign: ++  [line: 199]
.   .   .   .   .   Child: 0 Id: index  [line: 199]
.   .   .   .   Sibling: 1 If [line: 200]
.   .   .   .   .   Child: 0 Op: or [line: 200]
.   .   .   .   .   .   Child: 0 Op: > [line: 200]
.   .   .   .   .   .   .   Child: 0 Id: index  [line: 200]
.   .   .   .   .   .   .   Child: 1 Const 11 [line: 200]
.   .   .   .   .   .   Child: 1 Op: < [line: 200]
.   .   .   .   .   .   .   Child: 0 Id: index  [line: 200]
.   .   .   .   .   .   .   Child: 1 Const 0 [line: 200]
.   .   .   .   .   Child: 1 Compound [line: 200]
.   .   .   .   .   .   Child: 1 Assign: <=  [line: 201]
.   .   .   .   .   .   .   Child: 0 Id: index  [line: 201]
.   .   .   .   .   .   .   Child: 1 Const 0 [line: 201]
.   .   .   .   Sibling: 2 If [line: 204]
.   .   .   .   .   Child: 0 Op: != [line: 204]
.   .   .   .   .   .   Child: 0 Id: index  [line: 204]
.   .   .   .   .   .   Child: 1 Id: cup  [line: 204]
.   .   .   .   .   Child: 1 Compound [line: 204]
.   .   .   .   .   .   Child: 1 Assign: ++  [line: 205]
.   .   .   .   .   .   .   Child: 0 Op: [ [line: 205]
.   .   .   .   .   .   .   .   Child: 0 Id: cups  [line: 205]
.   .   .   .   .   .   .   .   Child: 1 Id: index  [line: 205]
.   .   .   .   Sibling: 3 Assign: --  [line: 208]
.   .   .   .   .   Child: 0 Id: numSeeds  [line: 208]
.   .   Sibling: 5 While [line: 212]
.   .   .   Child: 0 Op: and [line: 212]
.   .   .   .   Child: 0 Op: > [line: 212]
.   .   .   .   .   Child: 0 Id: numSeeds2  [line: 212]
.   .   .   .   .   Child: 1 Const 0 [line: 212]
.   .   .   .   Child: 1 Id: consecutive  [line: 212]
.   .   .   Child: 1 Compound [line: 212]
.   .   .   .   Child: 1 If [line: 213]
.   .   .   .   .   Child: 0 Id: turn  [line: 213]
.   .   .   .   .   Child: 1 Compound [line: 213]
.   .   .   .   .   .   Child: 1 If [line: 214]
.   .   .   .   .   .   .   Child: 0 Op: and [line: 214]
.   .   .   .   .   .   .   .   Child: 0 Op: !< [line: 214]
.   .   .   .   .   .   .   .   .   Child: 0 Id: index  [line: 214]
.   .   .   .   .   .   .   .   .   Child: 1 Const 6 [line: 214]
.   .   .   .   .   .   .   .   Child: 1 Op: < [line: 214]
.   .   .   .   .   .   .   .   .   Child: 0 Id: index  [line: 214]
.   .   .   .   .   .   .   .   .   Child: 1 Const 12 [line: 214]
.   .   .   .   .   .   .   Child: 1 Compound [line: 214]
.   .   .   .   .   .   .   .   Child: 1 If [line: 215]
.   .   .   .   .   .   .   .   .   Child: 0 Op: or [line: 215]
.   .   .   .   .   .   .   .   .   .   Child: 0 Op: = [line: 215]
.   .   .   .   .   .   .   .   .   .   .   Child: 0 Op: [ [line: 215]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 0 Id: cups  [line: 215]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 1 Id: index  [line: 215]
.   .   .   .   .   .   .   .   .   .   .   Child: 1 Const 2 [line: 215]
.   .   .   .   .   .   .   .   .   .   Child: 1 Op: = [line: 215]
.   .   .   .   .   .   .   .   .   .   .   Child: 0 Op: [ [line: 215]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 0 Id: cups  [line: 215]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 1 Id: index  [line: 215]
.   .   .   .   .   .   .   .   .   .   .   Child: 1 Const 3 [line: 215]
.   .   .   .   .   .   .   .   .   Child: 1 Compound [line: 215]
.   .   .   .   .   .   .   .   .   .   Child: 1 If [line: 216]
.   .   .   .   .   .   .   .   .   .   .   Child: 0 Id: consecutive  [line: 216]
.   .   .   .   .   .   .   .   .   .   .   Child: 1 Compound [line: 216]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 1 Assign: +=  [line: 217]
.   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0 Id: sumPlayerT  [line: 217]
.   .   .   .   .   .   .   .   .   .   .   .   .   Child: 1 Op: [ [line: 217]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0 Id: cups  [line: 217]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 1 Id: index  [line: 217]
.   .   .   .   .   .   .   .   .   .   .   .   Sibling: 1 Assign: <=  [line: 218]
.   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0 Op: [ [line: 218]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0 Id: cups  [line: 218]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 1 Id: index  [line: 218]
.   .   .   .   .   .   .   .   .   .   .   .   .   Child: 1 Const 0 [line: 218]
.   .   .   .   .   .   .   .   .   .   .   .   Sibling: 2 Assign: <=  [line: 219]
.   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0 Id: consecutive  [line: 219]
.   .   .   .   .   .   .   .   .   .   .   .   .   Child: 1 Const true [line: 219]
.   .   .   .   .   .   .   .   .   Child: 2 Compound [line: 222]
.   .   .   .   .   .   .   .   .   .   Child: 1 Assign: <=  [line: 223]
.   .   .   .   .   .   .   .   .   .   .   Child: 0 Id: consecutive  [line: 223]
.   .   .   .   .   .   .   .   .   .   .   Child: 1 Const false [line: 223]
.   .   .   .   .   .   .   Child: 2 Compound [line: 226]
.   .   .   .   .   .   .   .   Child: 1 Assign: <=  [line: 227]
.   .   .   .   .   .   .   .   .   Child: 0 Id: consecutive  [line: 227]
.   .   .   .   .   .   .   .   .   Child: 1 Const false [line: 227]
.   .   .   .   .   Child: 2 Compound [line: 230]
.   .   .   .   .   .   Child: 1 If [line: 231]
.   .   .   .   .   .   .   Child: 0 Op: and [line: 231]
.   .   .   .   .   .   .   .   Child: 0 Op: !< [line: 231]
.   .   .   .   .   .   .   .   .   Child: 0 Id: index  [line: 231]
.   .   .   .   .   .   .   .   .   Child: 1 Const 0 [line: 231]
.   .   .   .   .   .   .   .   Child: 1 Op: < [line: 231]
.   .   .   .   .   .   .   .   .   Child: 0 Id: index  [line: 231]
.   .   .   .   .   .   .   .   .   Child: 1 Const 6 [line: 231]
.   .   .   .   .   .   .   Child: 1 Compound [line: 231]
.   .   .   .   .   .   .   .   Child: 1 If [line: 232]
.   .   .   .   .   .   .   .   .   Child: 0 Op: or [line: 232]
.   .   .   .   .   .   .   .   .   .   Child: 0 Op: = [line: 232]
.   .   .   .   .   .   .   .   .   .   .   Child: 0 Op: [ [line: 232]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 0 Id: cups  [line: 232]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 1 Id: index  [line: 232]
.   .   .   .   .   .   .   .   .   .   .   Child: 1 Const 2 [line: 232]
.   .   .   .   .   .   .   .   .   .   Child: 1 Op: = [line: 232]
.   .   .   .   .   .   .   .   .   .   .   Child: 0 Op: [ [line: 232]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 0 Id: cups  [line: 232]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 1 Id: index  [line: 232]
.   .   .   .   .   .   .   .   .   .   .   Child: 1 Const 3 [line: 232]
.   .   .   .   .   .   .   .   .   Child: 1 Compound [line: 232]
.   .   .   .   .   .   .   .   .   .   Child: 1 If [line: 233]
.   .   .   .   .   .   .   .   .   .   .   Child: 0 Id: consecutive  [line: 233]
.   .   .   .   .   .   .   .   .   .   .   Child: 1 Compound [line: 233]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 1 Assign: +=  [line: 234]
.   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0 Id: sumPlayerF  [line: 234]
.   .   .   .   .   .   .   .   .   .   .   .   .   Child: 1 Op: [ [line: 234]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0 Id: cups  [line: 234]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 1 Id: index  [line: 234]
.   .   .   .   .   .   .   .   .   .   .   .   Sibling: 1 Assign: <=  [line: 235]
.   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0 Op: [ [line: 235]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0 Id: cups  [line: 235]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 1 Id: index  [line: 235]
.   .   .   .   .   .   .   .   .   .   .   .   .   Child: 1 Const 0 [line: 235]
.   .   .   .   .   .   .   .   .   .   .   .   Sibling: 2 Assign: <=  [line: 236]
.   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0 Id: consecutive  [line: 236]
.   .   .   .   .   .   .   .   .   .   .   .   .   Child: 1 Const true [line: 236]
.   .   .   .   .   .   .   .   .   Child: 2 Compound [line: 240]
.   .   .   .   .   .   .   .   .   .   Child: 1 Assign: <=  [line: 241]
.   .   .   .   .   .   .   .   .   .   .   Child: 0 Id: consecutive  [line: 241]
.   .   .   .   .   .   .   .   .   .   .   Child: 1 Const false [line: 241]
.   .   .   .   .   .   .   Child: 2 Compound [line: 244]
.   .   .   .   .   .   .   .   Child: 1 Assign: <=  [line: 245]
.   .   .   .   .   .   .   .   .   Child: 0 Id: consecutive  [line: 245]
.   .   .   .   .   .   .   .   .   Child: 1 Const false [line: 245]
.   .   .   .   Sibling: 1 Assign: --  [line: 249]
.   .   .   .   .   Child: 0 Id: index  [line: 249]
.   .   .   .   Sibling: 2 If [line: 250]
.   .   .   .   .   Child: 0 Op: < [line: 250]
.   .   .   .   .   .   Child: 0 Id: index  [line: 250]
.   .   .   .   .   .   Child: 1 Const 0 [line: 250]
.   .   .   .   .   Child: 1 Compound [line: 250]
.   .   .   .   .   .   Child: 1 Assign: <=  [line: 251]
.   .   .   .   .   .   .   Child: 0 Id: index  [line: 251]
.   .   .   .   .   .   .   Child: 1 Const 11 [line: 251]
.   .   .   .   Sibling: 3 Assign: --  [line: 254]
.   .   .   .   .   Child: 0 Id: numSeeds2  [line: 254]
Sibling: 13 Func: main returns type void [line: 258]
.   Child: 1 Compound [line: 258]
.   .   Child: 0 Var: play of type int [line: 259]
.   .   Sibling: 1 Var: playConverted of type bool [line: 260]
.   .   Child: 1 Assign: <=  [line: 263]
.   .   .   Child: 0 Id: play  [line: 263]
.   .   .   Child: 1 Const 0 [line: 263]
.   .   Sibling: 1 Assign: <=  [line: 264]
.   .   .   Child: 0 Id: playConverted  [line: 264]
.   .   .   Child: 1 Const false [line: 264]
.   .   Sibling: 2 Assign: <=  [line: 265]
.   .   .   Child: 0 Id: turn  [line: 265]
.   .   .   Child: 1 Const true [line: 265]
.   .   Sibling: 3 Assign: <=  [line: 266]
.   .   .   Child: 0 Id: winner  [line: 266]
.   .   .   Child: 1 Const false [line: 266]
.   .   Sibling: 4 Assign: <=  [line: 267]
.   .   .   Child: 0 Id: sumPlayerT  [line: 267]
.   .   .   Child: 1 Const 0 [line: 267]
.   .   Sibling: 5 Assign: <=  [line: 268]
.   .   .   Child: 0 Id: sumPlayerF  [line: 268]
.   .   .   Child: 1 Const 0 [line: 268]
.   .   Sibling: 6 Assign: <=  [line: 269]
.   .   .   Child: 0 Id: winnerPlayerT  [line: 269]
.   .   .   Child: 1 Const false [line: 269]
.   .   Sibling: 7 Assign: <=  [line: 270]
.   .   .   Child: 0 Id: winnerPlayerF  [line: 270]
.   .   .   Child: 1 Const false [line: 270]
.   .   Sibling: 8 Call: initGame  [line: 272]
.   .   Sibling: 9 While [line: 275]
.   .   .   Child: 0 Op: not [line: 275]
.   .   .   .   Child: 0 Id: winner  [line: 275]
.   .   .   Child: 1 Compound [line: 275]
.   .   .   .   Child: 1 Call: printBoard  [line: 276]
.   .   .   .   Sibling: 1 If [line: 277]
.   .   .   .   .   Child: 0 Id: turn  [line: 277]
.   .   .   .   .   Child: 1 Compound [line: 277]
.   .   .   .   .   .   Child: 1 Call: outputb  [line: 278]
.   .   .   .   .   .   .   Child: 0 Const true [line: 278]
.   .   .   .   .   Child: 2 Compound [line: 280]
.   .   .   .   .   .   Child: 1 Call: outputb  [line: 281]
.   .   .   .   .   .   .   Child: 0 Const false [line: 281]
.   .   .   .   Sibling: 2 Assign: <=  [line: 284]
.   .   .   .   .   Child: 0 Id: play  [line: 284]
.   .   .   .   .   Child: 1 Call: input  [line: 284]
.   .   .   .   Sibling: 3 While [line: 285]
.   .   .   .   .   Child: 0 Op: or [line: 285]
.   .   .   .   .   .   Child: 0 Op: > [line: 285]
.   .   .   .   .   .   .   Child: 0 Id: play  [line: 285]
.   .   .   .   .   .   .   Child: 1 Const 6 [line: 285]
.   .   .   .   .   .   Child: 1 Op: < [line: 285]
.   .   .   .   .   .   .   Child: 0 Id: play  [line: 285]
.   .   .   .   .   .   .   Child: 1 Const 1 [line: 285]
.   .   .   .   .   Child: 1 Compound [line: 285]
.   .   .   .   .   .   Child: 1 Assign: <=  [line: 286]
.   .   .   .   .   .   .   Child: 0 Id: play  [line: 286]
.   .   .   .   .   .   .   Child: 1 Call: input  [line: 286]
.   .   .   .   Sibling: 4 Assign: -=  [line: 289]
.   .   .   .   .   Child: 0 Id: play  [line: 289]
.   .   .   .   .   Child: 1 Const 1 [line: 289]
.   .   .   .   Sibling: 5 If [line: 291]
.   .   .   .   .   Child: 0 Id: turn  [line: 291]
.   .   .   .   .   Child: 1 Compound [line: 291]
.   .   .   .   .   .   Child: 1 If [line: 292]
.   .   .   .   .   .   .   Child: 0 Op: and [line: 292]
.   .   .   .   .   .   .   .   Child: 0 Op: = [line: 292]
.   .   .   .   .   .   .   .   .   Child: 0 Id: play  [line: 292]
.   .   .   .   .   .   .   .   .   Child: 1 Const 0 [line: 292]
.   .   .   .   .   .   .   .   Child: 1 Op: not [line: 292]
.   .   .   .   .   .   .   .   .   Child: 0 Id: playConverted  [line: 292]
.   .   .   .   .   .   .   Child: 1 Compound [line: 292]
.   .   .   .   .   .   .   .   Child: 1 Assign: <=  [line: 293]
.   .   .   .   .   .   .   .   .   Child: 0 Id: play  [line: 293]
.   .   .   .   .   .   .   .   .   Child: 1 Const 5 [line: 293]
.   .   .   .   .   .   .   .   Sibling: 1 Assign: <=  [line: 294]
.   .   .   .   .   .   .   .   .   Child: 0 Id: playConverted  [line: 294]
.   .   .   .   .   .   .   .   .   Child: 1 Const true [line: 294]
.   .   .   .   .   .   Sibling: 1 If [line: 296]
.   .   .   .   .   .   .   Child: 0 Op: and [line: 296]
.   .   .   .   .   .   .   .   Child: 0 Op: = [line: 296]
.   .   .   .   .   .   .   .   .   Child: 0 Id: play  [line: 296]
.   .   .   .   .   .   .   .   .   Child: 1 Const 1 [line: 296]
.   .   .   .   .   .   .   .   Child: 1 Op: not [line: 296]
.   .   .   .   .   .   .   .   .   Child: 0 Id: playConverted  [line: 296]
.   .   .   .   .   .   .   Child: 1 Compound [line: 296]
.   .   .   .   .   .   .   .   Child: 1 Assign: <=  [line: 297]
.   .   .   .   .   .   .   .   .   Child: 0 Id: play  [line: 297]
.   .   .   .   .   .   .   .   .   Child: 1 Const 4 [line: 297]
.   .   .   .   .   .   .   .   Sibling: 1 Assign: <=  [line: 298]
.   .   .   .   .   .   .   .   .   Child: 0 Id: playConverted  [line: 298]
.   .   .   .   .   .   .   .   .   Child: 1 Const true [line: 298]
.   .   .   .   .   .   Sibling: 2 If [line: 300]
.   .   .   .   .   .   .   Child: 0 Op: and [line: 300]
.   .   .   .   .   .   .   .   Child: 0 Op: = [line: 300]
.   .   .   .   .   .   .   .   .   Child: 0 Id: play  [line: 300]
.   .   .   .   .   .   .   .   .   Child: 1 Const 2 [line: 300]
.   .   .   .   .   .   .   .   Child: 1 Op: not [line: 300]
.   .   .   .   .   .   .   .   .   Child: 0 Id: playConverted  [line: 300]
.   .   .   .   .   .   .   Child: 1 Compound [line: 300]
.   .   .   .   .   .   .   .   Child: 1 Assign: <=  [line: 301]
.   .   .   .   .   .   .   .   .   Child: 0 Id: play  [line: 301]
.   .   .   .   .   .   .   .   .   Child: 1 Const 3 [line: 301]
.   .   .   .   .   .   .   .   Sibling: 1 Assign: <=  [line: 302]
.   .   .   .   .   .   .   .   .   Child: 0 Id: playConverted  [line: 302]
.   .   .   .   .   .   .   .   .   Child: 1 Const true [line: 302]
.   .   .   .   .   .   Sibling: 3 If [line: 304]
.   .   .   .   .   .   .   Child: 0 Op: and [line: 304]
.   .   .   .   .   .   .   .   Child: 0 Op: = [line: 304]
.   .   .   .   .   .   .   .   .   Child: 0 Id: play  [line: 304]
.   .   .   .   .   .   .   .   .   Child: 1 Const 3 [line: 304]
.   .   .   .   .   .   .   .   Child: 1 Op: not [line: 304]
.   .   .   .   .   .   .   .   .   Child: 0 Id: playConverted  [line: 304]
.   .   .   .   .   .   .   Child: 1 Compound [line: 304]
.   .   .   .   .   .   .   .   Child: 1 Assign: <=  [line: 305]
.   .   .   .   .   .   .   .   .   Child: 0 Id: play  [line: 305]
.   .   .   .   .   .   .   .   .   Child: 1 Const 2 [line: 305]
.   .   .   .   .   .   .   .   Sibling: 1 Assign: <=  [line: 306]
.   .   .   .   .   .   .   .   .   Child: 0 Id: playConverted  [line: 306]
.   .   .   .   .   .   .   .   .   Child: 1 Const true [line: 306]
.   .   .   .   .   .   Sibling: 4 If [line: 308]
.   .   .   .   .   .   .   Child: 0 Op: and [line: 308]
.   .   .   .   .   .   .   .   Child: 0 Op: = [line: 308]
.   .   .   .   .   .   .   .   .   Child: 0 Id: play  [line: 308]
.   .   .   .   .   .   .   .   .   Child: 1 Const 4 [line: 308]
.   .   .   .   .   .   .   .   Child: 1 Op: not [line: 308]
.   .   .   .   .   .   .   .   .   Child: 0 Id: playConverted  [line: 308]
.   .   .   .   .   .   .   Child: 1 Compound [line: 308]
.   .   .   .   .   .   .   .   Child: 1 Assign: <=  [line: 309]
.   .   .   .   .   .   .   .   .   Child: 0 Id: play  [line: 309]
.   .   .   .   .   .   .   .   .   Child: 1 Const 1 [line: 309]
.   .   .   .   .   .   .   .   Sibling: 1 Assign: <=  [line: 310]
.   .   .   .   .   .   .   .   .   Child: 0 Id: playConverted  [line: 310]
.   .   .   .   .   .   .   .   .   Child: 1 Const true [line: 310]
.   .   .   .   .   .   Sibling: 5 If [line: 312]
.   .   .   .   .   .   .   Child: 0 Op: and [line: 312]
.   .   .   .   .   .   .   .   Child: 0 Op: = [line: 312]
.   .   .   .   .   .   .   .   .   Child: 0 Id: play  [line: 312]
.   .   .   .   .   .   .   .   .   Child: 1 Const 5 [line: 312]
.   .   .   .   .   .   .   .   Child: 1 Op: not [line: 312]
.   .   .   .   .   .   .   .   .   Child: 0 Id: playConverted  [line: 312]
.   .   .   .   .   .   .   Child: 1 Compound [line: 312]
.   .   .   .   .   .   .   .   Child: 1 Assign: <=  [line: 313]
.   .   .   .   .   .   .   .   .   Child: 0 Id: play  [line: 313]
.   .   .   .   .   .   .   .   .   Child: 1 Const 0 [line: 313]
.   .   .   .   .   .   .   .   Sibling: 1 Assign: <=  [line: 314]
.   .   .   .   .   .   .   .   .   Child: 0 Id: playConverted  [line: 314]
.   .   .   .   .   .   .   .   .   Child: 1 Const true [line: 314]
.   .   .   .   .   .   Sibling: 6 Assign: <=  [line: 316]
.   .   .   .   .   .   .   Child: 0 Id: playConverted  [line: 316]
.   .   .   .   .   .   .   Child: 1 Const false [line: 316]
.   .   .   .   .   .   Sibling: 7 Call: moveSeeds  [line: 317]
.   .   .   .   .   .   .   Child: 0 Id: play  [line: 317]
.   .   .   .   .   .   .   Sibling: 1 Const true [line: 317]
.   .   .   .   .   .   Sibling: 8 Assign: <=  [line: 318]
.   .   .   .   .   .   .   Child: 0 Id: turn  [line: 318]
.   .   .   .   .   .   .   Child: 1 Const false [line: 318]
.   .   .   .   .   Child: 2 Compound [line: 320]
.   .   .   .   .   .   Child: 1 Assign: <=  [line: 321]
.   .   .   .   .   .   .   Child: 0 Id: play  [line: 321]
.   .   .   .   .   .   .   Child: 1 Op: + [line: 321]
.   .   .   .   .   .   .   .   Child: 0 Id: play  [line: 321]
.   .   .   .   .   .   .   .   Child: 1 Const 6 [line: 321]
.   .   .   .   .   .   Sibling: 1 Call: moveSeeds  [line: 322]
.   .   .   .   .   .   .   Child: 0 Id: play  [line: 322]
.   .   .   .   .   .   .   Sibling: 1 Const false [line: 322]
.   .   .   .   .   .   Sibling: 2 Assign: <=  [line: 323]
.   .   .   .   .   .   .   Child: 0 Id: turn  [line: 323]
.   .   .   .   .   .   .   Child: 1 Const true [line: 323]
.   .   .   .   Sibling: 6 Call: tryPlayerT  [line: 325]
.   .   .   .   Sibling: 7 Call: tryPlayerF  [line: 326]
.   .   Sibling: 10 If [line: 330]
.   .   .   Child: 0 Id: winnerPlayerT  [line: 330]
.   .   .   Child: 1 Compound [line: 330]
.   .   .   .   Child: 1 Call: outnl  [line: 331]
.   .   .   .   Sibling: 1 Call: outputb  [line: 332]
.   .   .   .   .   Child: 0 Const true [line: 332]
.   .   .   .   Sibling: 2 Call: output  [line: 333]
.   .   .   .   .   Child: 0 Id: sumPlayerT  [line: 333]
.   .   .   .   Sibling: 3 Call: outnl  [line: 334]
.   .   .   .   Sibling: 4 Call: outputb  [line: 335]
.   .   .   .   .   Child: 0 Const false [line: 335]
.   .   .   .   Sibling: 5 Call: output  [line: 336]
.   .   .   .   .   Child: 0 Id: sumPlayerF  [line: 336]
.   .   .   .   Sibling: 6 Call: outnl  [line: 337]
.   .   .   Child: 2 Compound [line: 340]
.   .   .   .   Child: 1 Call: outnl  [line: 341]
.   .   .   .   Sibling: 1 Call: outputb  [line: 342]
.   .   .   .   .   Child: 0 Const false [line: 342]
.   .   .   .   Sibling: 2 Call: output  [line: 343]
.   .   .   .   .   Child: 0 Id: sumPlayerF  [line: 343]
.   .   .   .   Sibling: 3 Call: outnl  [line: 344]
.   .   .   .   Sibling: 4 Call: outputb  [line: 345]
.   .   .   .   .   Child: 0 Const true [line: 345]
.   .   .   .   Sibling: 5 Call: output  [line: 346]
.   .   .   .   .   Child: 0 Id: sumPlayerT  [line: 346]
.   .   .   .   Sibling: 6 Call: outnl  [line: 347]
.   .   Sibling: 11 Return [line: 349]

==============
==============
./c- -p precassoc.c-
Var: w of type int [line: 2]
Sibling: 1 Func: dog returns type int [line: 4]
.   Child: 0 Parm: x of type int [line: 4]
.   Child: 1 Compound [line: 4]
.   .   Child: 0 Var: y of type int [line: 5]
.   .   Sibling: 1 Var: z of type int [line: 5]
.   .   Child: 1 Assign: <=  [line: 7]
.   .   .   Child: 0 Id: y  [line: 7]
.   .   .   Child: 1 Op: + [line: 7]
.   .   .   .   Child: 0 Op: * [line: 7]
.   .   .   .   .   Child: 0 Id: x  [line: 7]
.   .   .   .   .   Child: 1 Const 111 [line: 7]
.   .   .   .   Child: 1 Const 222 [line: 7]
.   .   Sibling: 1 Assign: <=  [line: 9]
.   .   .   Child: 0 Id: z  [line: 9]
.   .   .   Child: 1 Op: + [line: 9]
.   .   .   .   Child: 0 Id: y  [line: 9]
.   .   .   .   Child: 1 Op: * [line: 9]
.   .   .   .   .   Child: 0 Const 333 [line: 9]
.   .   .   .   .   Child: 1 Op: + [line: 9]
.   .   .   .   .   .   Child: 0 Const 444 [line: 9]
.   .   .   .   .   .   Child: 1 Const 555 [line: 9]
.   .   Sibling: 2 Assign: <=  [line: 11]
.   .   .   Child: 0 Id: w  [line: 11]
.   .   .   Child: 1 Op: * [line: 11]
.   .   .   .   Child: 0 Op: + [line: 11]
.   .   .   .   .   Child: 0 Const 111 [line: 11]
.   .   .   .   .   Child: 1 Const 222 [line: 11]
.   .   .   .   Child: 1 Op: + [line: 11]
.   .   .   .   .   Child: 0 Const 333 [line: 11]
.   .   .   .   .   Child: 1 Const 444 [line: 11]
.   .   Sibling: 3 Assign: <=  [line: 13]
.   .   .   Child: 0 Id: w  [line: 13]
.   .   .   Child: 1 Op: * [line: 13]
.   .   .   .   Child: 0 Call: dog  [line: 13]
.   .   .   .   .   Child: 0 Const 3 [line: 13]
.   .   .   .   Child: 1 Call: dog  [line: 13]
.   .   .   .   .   Child: 0 Const 3 [line: 13]
.   .   Sibling: 4 Return [line: 15]
.   .   .   Child: 0 Id: z  [line: 15]
Sibling: 2 Func: main returns type void [line: 18]
.   Child: 1 Compound [line: 18]
.   .   Child: 1 Call: dog  [line: 19]
.   .   .   Child: 0 Const 666 [line: 19]

==============
==============
./c- -p scope.c-
Var: g of type int [line: 2]
Sibling: 1 Func: main returns type void [line: 4]
.   Child: 1 Compound [line: 4]
.   .   Child: 0 Var: a of type int [line: 5]
.   .   Child: 1 Compound [line: 6]
.   .   .   Child: 0 Var: b of type int [line: 7]
.   .   .   Child: 1 Compound [line: 8]
.   .   .   .   Child: 0 Var: c of type int [line: 9]
.   .   Sibling: 1 Compound [line: 12]
.   .   .   Child: 0 Var: d of type int [line: 13]
.   .   .   Child: 1 Compound [line: 14]
.   .   .   .   Child: 0 Var: e of type int [line: 15]
.   .   .   .   Sibling: 1 Var: f of type int [line: 16]

==============
==============
./c- -p simple.c-
Func: main returns type void [line: 1]
.   Child: 1 Compound [line: 2]
.   .   Child: 0 Var: x of type int [line: 5]
.   .   Sibling: 1 Var: y of type int [line: 6]
.   .   Sibling: 2 Var: z of type int [line: 6]
.   .   Child: 1 Assign: <=  [line: 8]
.   .   .   Child: 0 Id: x  [line: 8]
.   .   .   Child: 1 Const 111 [line: 8]
.   .   Sibling: 1 Assign: <=  [line: 9]
.   .   .   Child: 0 Id: y  [line: 9]
.   .   .   Child: 1 Const 222 [line: 9]
.   .   Sibling: 2 Assign: <=  [line: 10]
.   .   .   Child: 0 Id: z  [line: 10]
.   .   .   Child: 1 Const 333 [line: 10]

==============
==============
./c- -p small.c-
Var: x of array of type int [line: 1]
Sibling: 1 Var: y of type int [line: 1]
Sibling: 2 Var: z of type int [line: 1]
Sibling: 3 Func: dog returns type int [line: 2]
.   Child: 0 Parm: a of array of type int [line: 2]
.   Sibling: 1 Parm: b of type int [line: 2]
.   Sibling: 2 Parm: c of type char [line: 2]
.   Child: 1 Compound [line: 2]
.   .   Child: 1 Return [line: 2]
.   .   .   Child: 0 Id: b  [line: 2]
Sibling: 4 Func: fox returns type int [line: 3]
.   Child: 0 Parm: civet of type int [line: 3]
.   Child: 1 Compound [line: 3]
.   .   Child: 0 Var: i of type int [line: 4]
.   .   Child: 1 If [line: 6]
.   .   .   Child: 0 Op: > [line: 6]
.   .   .   .   Child: 0 Id: civet  [line: 6]
.   .   .   .   Child: 1 Const 3 [line: 6]
.   .   .   Child: 1 Return [line: 6]
.   .   .   .   Child: 0 Id: x  [line: 6]
.   .   .   Child: 2 Return [line: 6]
.   .   .   .   Child: 0 Id: y  [line: 6]
.   .   Sibling: 1 Assign: <=  [line: 7]
.   .   .   Child: 0 Id: i  [line: 7]
.   .   .   Child: 1 Const 0 [line: 7]
.   .   Sibling: 2 While [line: 8]
.   .   .   Child: 0 Op: < [line: 8]
.   .   .   .   Child: 0 Id: i  [line: 8]
.   .   .   .   Child: 1 Const 10 [line: 8]
.   .   .   Child: 1 Assign: ++  [line: 8]
.   .   .   .   Child: 0 Id: i  [line: 8]

==============
==============
./c- -p testExample.c-
Var: zev of array of type char [line: 1]
.   Child: 0 Const "corgis" [line: 1]
Sibling: 1 Var: x of type int [line: 2]
.   Child: 0 Const 42 [line: 2]
Sibling: 2 Var: y of type int [line: 2]
.   Child: 0 Const 666 [line: 2]
Sibling: 3 Var: yurt of array of type char [line: 3]
Sibling: 4 Func: max returns type int [line: 7]
.   Child: 0 Parm: a of type int [line: 7]
.   Sibling: 1 Parm: b of type int [line: 7]
.   Child: 1 Compound [line: 7]
.   .   Child: 1 If [line: 8]
.   .   .   Child: 0 Op: > [line: 8]
.   .   .   .   Child: 0 Id: a  [line: 8]
.   .   .   .   Child: 1 Id: b  [line: 8]
.   .   .   Child: 1 Return [line: 8]
.   .   .   .   Child: 0 Id: a  [line: 8]
.   .   .   Child: 2 Return [line: 8]
.   .   .   .   Child: 0 Id: b  [line: 8]
Sibling: 5 Func: fred returns type int [line: 10]
.   Child: 0 Parm: x of type int [line: 11]
.   Sibling: 1 Parm: y of type int [line: 12]
.   Child: 1 Compound [line: 13]
.   .   Child: 1 If [line: 14]
.   .   .   Child: 0 Op: != [line: 14]
.   .   .   .   Child: 0 Id: y  [line: 14]
.   .   .   .   Child: 1 Op: chsign [line: 14]
.   .   .   .   .   Child: 0 Id: x  [line: 14]
.   .   .   Child: 1 Return [line: 14]
.   .   .   .   Child: 0 Id: y  [line: 14]
.   .   Sibling: 1 Return [line: 14]
.   .   .   Child: 0 Assign: --  [line: 14]
.   .   .   .   Child: 0 Id: x  [line: 14]
Sibling: 6 Func: ant returns type int [line: 16]
.   Child: 0 Parm: bat of type int [line: 16]
.   Sibling: 1 Parm: cat of array of type int [line: 16]
.   Sibling: 2 Parm: dog of type bool [line: 16]
.   Sibling: 3 Parm: elk of type bool [line: 16]
.   Sibling: 4 Parm: fox of type int [line: 16]
.   Sibling: 5 Parm: gnu of type char [line: 16]
.   Child: 1 Compound [line: 17]
.   .   Child: 0 Var: goat of type int [line: 18]
.   .   Sibling: 1 Var: hog of array of type int [line: 18]
.   .   Child: 1 Assign: <=  [line: 20]
.   .   .   Child: 0 Id: gnu  [line: 20]
.   .   .   Child: 1 Const  'W' [line: 20]
.   .   Sibling: 1 Assign: <=  [line: 21]
.   .   .   Child: 0 Id: goat  [line: 21]
.   .   .   Child: 1 Assign: <=  [line: 21]
.   .   .   .   Child: 0 Op: [ [line: 21]
.   .   .   .   .   Child: 0 Id: hog  [line: 21]
.   .   .   .   .   Child: 1 Const 2 [line: 21]
.   .   .   .   Child: 1 Op: * [line: 21]
.   .   .   .   .   Child: 0 Const 3 [line: 21]
.   .   .   .   .   Child: 1 Op: sizeof [line: 21]
.   .   .   .   .   .   Child: 0 Id: cat  [line: 21]
.   .   Sibling: 2 If [line: 22]
.   .   .   Child: 0 Op: or [line: 22]
.   .   .   .   Child: 0 Op: and [line: 22]
.   .   .   .   .   Child: 0 Id: dog  [line: 22]
.   .   .   .   .   Child: 1 Id: elk  [line: 22]
.   .   .   .   Child: 1 Op: > [line: 22]
.   .   .   .   .   Child: 0 Id: bat  [line: 22]
.   .   .   .   .   Child: 1 Op: [ [line: 22]
.   .   .   .   .   .   Child: 0 Id: cat  [line: 22]
.   .   .   .   .   .   Child: 1 Const 3 [line: 22]
.   .   .   Child: 1 Assign: <=  [line: 22]
.   .   .   .   Child: 0 Id: dog  [line: 22]
.   .   .   .   Child: 1 Op: not [line: 22]
.   .   .   .   .   Child: 0 Id: dog  [line: 22]
.   .   .   Child: 2 Assign: ++  [line: 23]
.   .   .   .   Child: 0 Id: fox  [line: 23]
.   .   Sibling: 3 If [line: 24]
.   .   .   Child: 0 Op: !> [line: 24]
.   .   .   .   Child: 0 Id: bat  [line: 24]
.   .   .   .   Child: 1 Id: fox  [line: 24]
.   .   .   Child: 1 Compound [line: 24]
.   .   .   .   Child: 1 While [line: 25]
.   .   .   .   .   Child: 0 Id: dog  [line: 25]
.   .   .   .   .   Child: 1 Compound [line: 25]
.   .   .   .   .   .   Child: 0 Var: hog of static type int [line: 26]
.   .   .   .   .   .   Child: 1 Assign: <=  [line: 28]
.   .   .   .   .   .   .   Child: 0 Id: hog  [line: 28]
.   .   .   .   .   .   .   Child: 1 Id: fox  [line: 28]
.   .   .   .   .   .   Sibling: 1 Assign: <=  [line: 29]
.   .   .   .   .   .   .   Child: 0 Id: dog  [line: 29]
.   .   .   .   .   .   .   Child: 1 Op: > [line: 29]
.   .   .   .   .   .   .   .   Child: 0 Call: fred  [line: 29]
.   .   .   .   .   .   .   .   .   Child: 0 Assign: ++  [line: 29]
.   .   .   .   .   .   .   .   .   .   Child: 0 Id: fox  [line: 29]
.   .   .   .   .   .   .   .   .   Sibling: 1 Op: [ [line: 29]
.   .   .   .   .   .   .   .   .   .   Child: 0 Id: cat  [line: 29]
.   .   .   .   .   .   .   .   .   .   Child: 1 Const 1 [line: 29]
.   .   .   .   .   .   .   .   Child: 1 Const 666 [line: 29]
.   .   .   .   .   .   Sibling: 2 If [line: 30]
.   .   .   .   .   .   .   Child: 0 Op: > [line: 30]
.   .   .   .   .   .   .   .   Child: 0 Id: hog  [line: 30]
.   .   .   .   .   .   .   .   Child: 1 Id: bat  [line: 30]
.   .   .   .   .   .   .   Child: 1 Break [line: 30]
.   .   .   .   .   .   .   Child: 2 If [line: 31]
.   .   .   .   .   .   .   .   Child: 0 Op: != [line: 31]
.   .   .   .   .   .   .   .   .   Child: 0 Id: fox  [line: 31]
.   .   .   .   .   .   .   .   .   Child: 1 Const 0 [line: 31]
.   .   .   .   .   .   .   .   Child: 1 Assign: +=  [line: 31]
.   .   .   .   .   .   .   .   .   Child: 0 Id: fox  [line: 31]
.   .   .   .   .   .   .   .   .   Child: 1 Const 7 [line: 31]
.   .   Sibling: 4 For [line: 35]
.   .   .   Child: 0 Var: i of type int [line: 35]
.   .   .   Child: 1 Range [line: 35]
.   .   .   .   Child: 0 Const 1 [line: 35]
.   .   .   .   Child: 1 Const 10 [line: 35]
.   .   .   .   Child: 2 Const 3 [line: 35]
.   .   .   Child: 2 Compound [line: 35]
.   .   .   .   Child: 1 If [line: 36]
.   .   .   .   .   Child: 0 Op: = [line: 36]
.   .   .   .   .   .   Child: 0 Id: x  [line: 36]
.   .   .   .   .   .   Child: 1 Const 1 [line: 36]
.   .   .   .   .   Child: 1 Assign: <=  [line: 36]
.   .   .   .   .   .   Child: 0 Op: [ [line: 36]
.   .   .   .   .   .   .   Child: 0 Id: cat  [line: 36]
.   .   .   .   .   .   .   Child: 1 Id: i  [line: 36]
.   .   .   .   .   .   Child: 1 Id: bat  [line: 36]
.   .   .   .   .   Child: 2 If [line: 37]
.   .   .   .   .   .   Child: 0 Op: = [line: 37]
.   .   .   .   .   .   .   Child: 0 Id: x  [line: 37]
.   .   .   .   .   .   .   Child: 1 Const 2 [line: 37]
.   .   .   .   .   .   Child: 1 Assign: <=  [line: 37]
.   .   .   .   .   .   .   Child: 0 Op: [ [line: 37]
.   .   .   .   .   .   .   .   Child: 0 Id: cat  [line: 37]
.   .   .   .   .   .   .   .   Child: 1 Id: i  [line: 37]
.   .   .   .   .   .   .   Child: 1 Op: % [line: 37]
.   .   .   .   .   .   .   .   Child: 0 Id: bat  [line: 37]
.   .   .   .   .   .   .   .   Child: 1 Const 17 [line: 37]
.   .   .   .   .   .   Child: 2 If [line: 38]
.   .   .   .   .   .   .   Child: 0 Op: = [line: 38]
.   .   .   .   .   .   .   .   Child: 0 Id: x  [line: 38]
.   .   .   .   .   .   .   .   Child: 1 Const 3 [line: 38]
.   .   .   .   .   .   .   Child: 1 Assign: <=  [line: 38]
.   .   .   .   .   .   .   .   Child: 0 Op: [ [line: 38]
.   .   .   .   .   .   .   .   .   Child: 0 Id: cat  [line: 38]
.   .   .   .   .   .   .   .   .   Child: 1 Id: i  [line: 38]
.   .   .   .   .   .   .   .   Child: 1 Const 78 [line: 38]
.   .   .   .   .   .   .   Child: 2 Assign: ++  [line: 39]
.   .   .   .   .   .   .   .   Child: 0 Id: x  [line: 39]
.   .   Sibling: 5 While [line: 42]
.   .   .   Child: 0 Const true [line: 42]
.   .   .   Child: 1 If [line: 42]
.   .   .   .   Child: 0 Op: > [line: 42]
.   .   .   .   .   Child: 0 Id: x  [line: 42]
.   .   .   .   .   Child: 1 Const 333 [line: 42]
.   .   .   .   Child: 1 Break [line: 42]
.   .   .   .   Child: 2 Assign: ++  [line: 42]
.   .   .   .   .   Child: 0 Id: x  [line: 42]
.   .   Sibling: 6 Assign: <=  [line: 44]
.   .   .   Child: 0 Id: yurt  [line: 44]
.   .   .   Child: 1 Id: zev  [line: 44]
.   .   Sibling: 7 Assign: <=  [line: 45]
.   .   .   Child: 0 Op: [ [line: 45]
.   .   .   .   Child: 0 Id: yurt  [line: 45]
.   .   .   .   Child: 1 Const 3 [line: 45]
.   .   .   Child: 1 Op: [ [line: 45]
.   .   .   .   Child: 0 Id: zev  [line: 45]
.   .   .   .   Child: 1 Op: ? [line: 45]
.   .   .   .   .   Child: 0 Op: sizeof [line: 45]
.   .   .   .   .   .   Child: 0 Id: zev  [line: 45]
.   .   Sibling: 8 Return [line: 47]
.   .   .   Child: 0 Op: / [line: 47]
.   .   .   .   Child: 0 Op: + [line: 47]
.   .   .   .   .   Child: 0 Id: fox  [line: 47]
.   .   .   .   .   Child: 1 Op: * [line: 47]
.   .   .   .   .   .   Child: 0 Id: bat  [line: 47]
.   .   .   .   .   .   Child: 1 Op: [ [line: 47]
.   .   .   .   .   .   .   Child: 0 Id: cat  [line: 47]
.   .   .   .   .   .   .   Child: 1 Id: bat  [line: 47]
.   .   .   .   Child: 1 Op: chsign [line: 47]
.   .   .   .   .   Child: 0 Id: fox  [line: 47]

==============
==============
./c- -p tiny.c-
Var: walace of type int [line: 1]
Sibling: 1 Var: gromit of type int [line: 1]
Sibling: 2 Var: preston of type char [line: 2]
Sibling: 3 Func: dog returns type int [line: 4]
.   Child: 0 Parm: corgi of type bool [line: 4]
.   Child: 1 Compound [line: 4]
.   .   Child: 0 Var: cat of type int [line: 5]
.   .   Child: 1 Assign: <=  [line: 6]
.   .   .   Child: 0 Id: cat  [line: 6]
.   .   .   Child: 1 Const 666 [line: 6]
.   .   Sibling: 1 Return [line: 8]
.   .   .   Child: 0 Id: cat  [line: 8]

==============
==============
./c- -p whileif.c-
Func: main returns type int [line: 2]
.   Child: 1 Compound [line: 3]
.   .   Child: 0 Var: x of type int [line: 4]
.   .   Sibling: 1 Var: y of type int [line: 5]
.   .   Sibling: 2 Var: z of type int [line: 6]
.   .   Sibling: 3 Var: a of type bool [line: 7]
.   .   Sibling: 4 Var: b of type bool [line: 7]
.   .   Sibling: 5 Var: c of type bool [line: 7]
.   .   Sibling: 6 Var: d of type bool [line: 7]
.   .   Sibling: 7 Var: e of type bool [line: 7]
.   .   Child: 1 If [line: 9]
.   .   .   Child: 0 Op: > [line: 9]
.   .   .   .   Child: 0 Id: x  [line: 9]
.   .   .   .   Child: 1 Const 2 [line: 9]
.   .   Sibling: 1 While [line: 10]
.   .   .   Child: 0 Id: b  [line: 10]
.   .   Sibling: 2 If [line: 12]
.   .   .   Child: 0 Op: > [line: 12]
.   .   .   .   Child: 0 Id: x  [line: 12]
.   .   .   .   Child: 1 Const 1 [line: 12]
.   .   .   Child: 1 Assign: <=  [line: 12]
.   .   .   .   Child: 0 Id: z  [line: 12]
.   .   .   .   Child: 1 Const 1 [line: 12]
.   .   Sibling: 3 If [line: 13]
.   .   .   Child: 0 Op: > [line: 13]
.   .   .   .   Child: 0 Id: x  [line: 13]
.   .   .   .   Child: 1 Const 2 [line: 13]
.   .   .   Child: 1 Assign: <=  [line: 13]
.   .   .   .   Child: 0 Id: z  [line: 13]
.   .   .   .   Child: 1 Const 1 [line: 13]
.   .   .   Child: 2 Assign: <=  [line: 13]
.   .   .   .   Child: 0 Id: z  [line: 13]
.   .   .   .   Child: 1 Const 2 [line: 13]
.   .   Sibling: 4 If [line: 14]
.   .   .   Child: 0 Op: > [line: 14]
.   .   .   .   Child: 0 Id: x  [line: 14]
.   .   .   .   Child: 1 Const 3 [line: 14]
.   .   .   Child: 1 If [line: 14]
.   .   .   .   Child: 0 Op: > [line: 14]
.   .   .   .   .   Child: 0 Id: y  [line: 14]
.   .   .   .   .   Child: 1 Const 4 [line: 14]
.   .   .   .   Child: 1 Assign: <=  [line: 14]
.   .   .   .   .   Child: 0 Id: z  [line: 14]
.   .   .   .   .   Child: 1 Const 3 [line: 14]
.   .   Sibling: 5 If [line: 15]
.   .   .   Child: 0 Op: > [line: 15]
.   .   .   .   Child: 0 Id: x  [line: 15]
.   .   .   .   Child: 1 Const 5 [line: 15]
.   .   .   Child: 1 If [line: 15]
.   .   .   .   Child: 0 Op: > [line: 15]
.   .   .   .   .   Child: 0 Id: y  [line: 15]
.   .   .   .   .   Child: 1 Const 6 [line: 15]
.   .   .   .   Child: 1 Assign: <=  [line: 15]
.   .   .   .   .   Child: 0 Id: z  [line: 15]
.   .   .   .   .   Child: 1 Const 4 [line: 15]
.   .   .   .   Child: 2 Assign: <=  [line: 15]
.   .   .   .   .   Child: 0 Id: z  [line: 15]
.   .   .   .   .   Child: 1 Const 5 [line: 15]
.   .   Sibling: 6 If [line: 16]
.   .   .   Child: 0 Op: > [line: 16]
.   .   .   .   Child: 0 Id: x  [line: 16]
.   .   .   .   Child: 1 Const 7 [line: 16]
.   .   .   Child: 1 If [line: 16]
.   .   .   .   Child: 0 Op: > [line: 16]
.   .   .   .   .   Child: 0 Id: y  [line: 16]
.   .   .   .   .   Child: 1 Const 8 [line: 16]
.   .   .   .   Child: 1 Assign: <=  [line: 16]
.   .   .   .   .   Child: 0 Id: z  [line: 16]
.   .   .   .   .   Child: 1 Const 6 [line: 16]
.   .   .   .   Child: 2 Assign: <=  [line: 16]
.   .   .   .   .   Child: 0 Id: z  [line: 16]
.   .   .   .   .   Child: 1 Const 7 [line: 16]
.   .   .   Child: 2 Assign: <=  [line: 16]
.   .   .   .   Child: 0 Id: z  [line: 16]
.   .   .   .   Child: 1 Const 8 [line: 16]
.   .   Sibling: 7 If [line: 17]
.   .   .   Child: 0 Op: < [line: 17]
.   .   .   .   Child: 0 Id: x  [line: 17]
.   .   .   .   Child: 1 Const 9 [line: 17]
.   .   .   Child: 1 While [line: 17]
.   .   .   .   Child: 0 Op: > [line: 17]
.   .   .   .   .   Child: 0 Id: y  [line: 17]
.   .   .   .   .   Child: 1 Const 10 [line: 17]
.   .   .   .   Child: 1 Const 9 [line: 17]
.   .   Sibling: 8 While [line: 18]
.   .   .   Child: 0 Op: > [line: 18]
.   .   .   .   Child: 0 Id: y  [line: 18]
.   .   .   .   Child: 1 Const 10 [line: 18]
.   .   .   Child: 1 If [line: 18]
.   .   .   .   Child: 0 Op: < [line: 18]
.   .   .   .   .   Child: 0 Id: x  [line: 18]
.   .   .   .   .   Child: 1 Const 3 [line: 18]
.   .   .   .   Child: 1 Const 3 [line: 18]
.   .   Sibling: 9 While [line: 19]
.   .   .   Child: 0 Op: > [line: 19]
.   .   .   .   Child: 0 Id: y  [line: 19]
.   .   .   .   Child: 1 Const 10 [line: 19]
.   .   .   Child: 1 If [line: 19]
.   .   .   .   Child: 0 Op: < [line: 19]
.   .   .   .   .   Child: 0 Id: x  [line: 19]
.   .   .   .   .   Child: 1 Const 3 [line: 19]
.   .   .   .   Child: 1 Const 3 [line: 19]
.   .   .   .   Child: 2 Const 9 [line: 19]
.   .   Sibling: 10 If [line: 20]
.   .   .   Child: 0 Op: < [line: 20]
.   .   .   .   Child: 0 Id: x  [line: 20]
.   .   .   .   Child: 1 Const 9 [line: 20]
.   .   .   Child: 1 While [line: 20]
.   .   .   .   Child: 0 Op: > [line: 20]
.   .   .   .   .   Child: 0 Id: y  [line: 20]
.   .   .   .   .   Child: 1 Const 10 [line: 20]
.   .   .   .   Child: 1 If [line: 20]
.   .   .   .   .   Child: 0 Op: < [line: 20]
.   .   .   .   .   .   Child: 0 Id: x  [line: 20]
.   .   .   .   .   .   Child: 1 Const 3 [line: 20]
.   .   .   .   .   Child: 1 Const 3 [line: 20]
.   .   .   .   .   Child: 2 Const 9 [line: 20]
.   .   Sibling: 11 While [line: 21]
.   .   .   Child: 0 Op: < [line: 21]
.   .   .   .   Child: 0 Id: y  [line: 21]
.   .   .   .   Child: 1 Const 11 [line: 21]
.   .   .   Child: 1 If [line: 21]
.   .   .   .   Child: 0 Op: < [line: 21]
.   .   .   .   .   Child: 0 Id: x  [line: 21]
.   .   .   .   .   Child: 1 Const 12 [line: 21]
.   .   .   .   Child: 1 While [line: 21]
.   .   .   .   .   Child: 0 Op: > [line: 21]
.   .   .   .   .   .   Child: 0 Id: y  [line: 21]
.   .   .   .   .   .   Child: 1 Const 13 [line: 21]
.   .   .   .   .   Child: 1 Const 10 [line: 21]
.   .   Sibling: 12 If [line: 22]
.   .   .   Child: 0 Op: < [line: 22]
.   .   .   .   Child: 0 Id: x  [line: 22]
.   .   .   .   Child: 1 Const 13 [line: 22]
.   .   .   Child: 1 While [line: 22]
.   .   .   .   Child: 0 Op: > [line: 22]
.   .   .   .   .   Child: 0 Id: y  [line: 22]
.   .   .   .   .   Child: 1 Const 14 [line: 22]
.   .   .   .   Child: 1 Const 20 [line: 22]
.   .   .   Child: 2 Const 21 [line: 22]
.   .   Sibling: 13 While [line: 23]
.   .   .   Child: 0 Op: > [line: 23]
.   .   .   .   Child: 0 Id: y  [line: 23]
.   .   .   .   Child: 1 Const 15 [line: 23]
.   .   .   Child: 1 If [line: 23]
.   .   .   .   Child: 0 Op: < [line: 23]
.   .   .   .   .   Child: 0 Id: x  [line: 23]
.   .   .   .   .   Child: 1 Const 16 [line: 23]
.   .   .   .   Child: 1 Const 22 [line: 23]
.   .   .   .   Child: 2 Const 23 [line: 23]
.   .   Sibling: 14 While [line: 24]
.   .   .   Child: 0 Op: > [line: 24]
.   .   .   .   Child: 0 Id: y  [line: 24]
.   .   .   .   Child: 1 Const 15 [line: 24]
.   .   .   Child: 1 If [line: 24]
.   .   .   .   Child: 0 Op: < [line: 24]
.   .   .   .   .   Child: 0 Id: x  [line: 24]
.   .   .   .   .   Child: 1 Const 16 [line: 24]
.   .   .   .   Child: 1 While [line: 24]
.   .   .   .   .   Child: 0 Op: < [line: 24]
.   .   .   .   .   .   Child: 0 Id: y  [line: 24]
.   .   .   .   .   .   Child: 1 Const 3 [line: 24]
.   .   .   .   .   Child: 1 Const 9 [line: 24]
.   .   .   .   Child: 2 Const 23 [line: 24]
.   .   Sibling: 15 While [line: 25]
.   .   .   Child: 0 Op: > [line: 25]
.   .   .   .   Child: 0 Id: y  [line: 25]
.   .   .   .   Child: 1 Const 15 [line: 25]
.   .   .   Child: 1 If [line: 25]
.   .   .   .   Child: 0 Op: < [line: 25]
.   .   .   .   .   Child: 0 Id: x  [line: 25]
.   .   .   .   .   Child: 1 Const 16 [line: 25]
.   .   .   .   Child: 1 While [line: 25]
.   .   .   .   .   Child: 0 Op: < [line: 25]
.   .   .   .   .   .   Child: 0 Id: y  [line: 25]
.   .   .   .   .   .   Child: 1 Const 3 [line: 25]
.   .   .   .   .   Child: 1 Const 9 [line: 25]
.   .   .   .   Child: 2 While [line: 25]
.   .   .   .   .   Child: 0 Op: > [line: 25]
.   .   .   .   .   .   Child: 0 Id: y  [line: 25]
.   .   .   .   .   .   Child: 1 Const 3 [line: 25]
.   .   .   .   .   Child: 1 Const 23 [line: 25]
.   .   Sibling: 16 While [line: 26]
.   .   .   Child: 0 Op: > [line: 26]
.   .   .   .   Child: 0 Id: y  [line: 26]
.   .   .   .   Child: 1 Const 15 [line: 26]
.   .   .   Child: 1 If [line: 26]
.   .   .   .   Child: 0 Op: < [line: 26]
.   .   .   .   .   Child: 0 Id: x  [line: 26]
.   .   .   .   .   Child: 1 Const 16 [line: 26]
.   .   .   .   Child: 1 While [line: 26]
.   .   .   .   .   Child: 0 Op: < [line: 26]
.   .   .   .   .   .   Child: 0 Id: y  [line: 26]
.   .   .   .   .   .   Child: 1 Const 3 [line: 26]
.   .   .   .   .   Child: 1 If [line: 26]
.   .   .   .   .   .   Child: 0 Id: b  [line: 26]
.   .   .   .   .   .   Child: 1 Const 34 [line: 26]
.   .   .   .   .   .   Child: 2 Const 34 [line: 26]
.   .   .   .   Child: 2 While [line: 26]
.   .   .   .   .   Child: 0 Op: > [line: 26]
.   .   .   .   .   .   Child: 0 Id: y  [line: 26]
.   .   .   .   .   .   Child: 1 Const 3 [line: 26]
.   .   .   .   .   Child: 1 Const 23 [line: 26]
.   .   Sibling: 17 While [line: 27]
.   .   .   Child: 0 Op: > [line: 27]
.   .   .   .   Child: 0 Id: y  [line: 27]
.   .   .   .   Child: 1 Const 15 [line: 27]
.   .   .   Child: 1 If [line: 27]
.   .   .   .   Child: 0 Op: < [line: 27]
.   .   .   .   .   Child: 0 Id: x  [line: 27]
.   .   .   .   .   Child: 1 Const 16 [line: 27]
.   .   .   .   Child: 1 Compound [line: 27]
.   .   .   .   .   Child: 1 While [line: 27]
.   .   .   .   .   .   Child: 0 Op: < [line: 27]
.   .   .   .   .   .   .   Child: 0 Id: y  [line: 27]
.   .   .   .   .   .   .   Child: 1 Const 3 [line: 27]
.   .   .   .   .   .   Child: 1 If [line: 27]
.   .   .   .   .   .   .   Child: 0 Id: b  [line: 27]
.   .   .   .   .   .   .   Child: 1 Const 34 [line: 27]
.   .   .   .   Child: 2 While [line: 27]
.   .   .   .   .   Child: 0 Op: > [line: 27]
.   .   .   .   .   .   Child: 0 Id: y  [line: 27]
.   .   .   .   .   .   Child: 1 Const 3 [line: 27]
.   .   .   .   .   Child: 1 Const 23 [line: 27]
.   .   Sibling: 18 While [line: 29]
.   .   .   Child: 0 Id: b  [line: 29]
.   .   .   Child: 1 While [line: 29]
.   .   .   .   Child: 0 Id: b  [line: 29]
.   .   .   .   Child: 1 If [line: 29]
.   .   .   .   .   Child: 0 Id: b  [line: 29]
.   .   .   .   .   Child: 1 Id: x  [line: 29]
.   .   .   .   .   Child: 2 Id: y  [line: 29]
.   .   Sibling: 19 While [line: 30]
.   .   .   Child: 0 Id: b  [line: 30]
.   .   .   Child: 1 While [line: 30]
.   .   .   .   Child: 0 Id: b  [line: 30]
.   .   .   .   Child: 1 If [line: 30]
.   .   .   .   .   Child: 0 Id: b  [line: 30]
.   .   .   .   .   Child: 1 Id: x  [line: 30]
.   .   Sibling: 20 If [line: 30]
.   .   .   Child: 0 Id: b  [line: 30]
.   .   .   Child: 1 Id: y  [line: 30]
.   .   .   Child: 2 Id: z  [line: 30]
.   .   Sibling: 21 While [line: 32]
.   .   .   Child: 0 Id: b  [line: 32]
.   .   .   Child: 1 While [line: 32]
.   .   .   .   Child: 0 Id: b  [line: 32]
.   .   .   .   Child: 1 If [line: 32]
.   .   .   .   .   Child: 0 Id: b  [line: 32]
.   .   .   .   .   Child: 1 Id: x  [line: 32]
.   .   Sibling: 22 While [line: 33]
.   .   .   Child: 0 Id: b  [line: 33]
.   .   .   Child: 1 While [line: 33]
.   .   .   .   Child: 0 Id: b  [line: 33]
.   .   .   .   Child: 1 If [line: 33]
.   .   .   .   .   Child: 0 Id: b  [line: 33]
.   .   .   .   .   Child: 1 Id: x  [line: 33]
.   .   Sibling: 23 If [line: 33]
.   .   .   Child: 0 Id: b  [line: 33]
.   .   .   Child: 1 Id: y  [line: 33]
.   .   Sibling: 24 While [line: 35]
.   .   .   Child: 0 Id: b  [line: 35]
.   .   .   Child: 1 If [line: 35]
.   .   .   .   Child: 0 Id: c  [line: 35]
.   .   .   .   Child: 1 While [line: 35]
.   .   .   .   .   Child: 0 Id: b  [line: 35]
.   .   .   .   .   Child: 1 If [line: 35]
.   .   .   .   .   .   Child: 0 Id: b  [line: 35]
.   .   .   .   .   .   Child: 1 Id: x  [line: 35]
.   .   .   .   .   .   Child: 2 Id: y  [line: 35]
.   .   Sibling: 25 While [line: 36]
.   .   .   Child: 0 Id: b  [line: 36]
.   .   .   Child: 1 If [line: 36]
.   .   .   .   Child: 0 Id: c  [line: 36]
.   .   .   .   Child: 1 While [line: 36]
.   .   .   .   .   Child: 0 Id: b  [line: 36]
.   .   .   .   .   Child: 1 If [line: 36]
.   .   .   .   .   .   Child: 0 Id: b  [line: 36]
.   .   .   .   .   .   Child: 1 Id: x  [line: 36]
.   .   Sibling: 26 If [line: 36]
.   .   .   Child: 0 Id: b  [line: 36]
.   .   .   Child: 1 Id: y  [line: 36]
.   .   .   Child: 2 Id: z  [line: 36]
.   .   Sibling: 27 If [line: 38]
.   .   .   Child: 0 Id: c  [line: 38]
.   .   .   Child: 1 While [line: 38]
.   .   .   .   Child: 0 Id: b  [line: 38]
.   .   .   .   Child: 1 While [line: 38]
.   .   .   .   .   Child: 0 Id: b  [line: 38]
.   .   .   .   .   Child: 1 If [line: 38]
.   .   .   .   .   .   Child: 0 Id: b  [line: 38]
.   .   .   .   .   .   Child: 1 Id: x  [line: 38]
.   .   .   .   .   .   Child: 2 Id: y  [line: 38]
.   .   Sibling: 28 If [line: 39]
.   .   .   Child: 0 Id: c  [line: 39]
.   .   .   Child: 1 While [line: 39]
.   .   .   .   Child: 0 Id: b  [line: 39]
.   .   .   .   Child: 1 While [line: 39]
.   .   .   .   .   Child: 0 Id: b  [line: 39]
.   .   .   .   .   Child: 1 If [line: 39]
.   .   .   .   .   .   Child: 0 Id: b  [line: 39]
.   .   .   .   .   .   Child: 1 Id: x  [line: 39]
.   .   Sibling: 29 If [line: 39]
.   .   .   Child: 0 Id: b  [line: 39]
.   .   .   Child: 1 Id: y  [line: 39]
.   .   .   Child: 2 Id: z  [line: 39]
.   .   Sibling: 30 If [line: 41]
.   .   .   Child: 0 Id: c  [line: 41]
.   .   .   Child: 1 While [line: 41]
.   .   .   .   Child: 0 Id: b  [line: 41]
.   .   .   .   Child: 1 While [line: 41]
.   .   .   .   .   Child: 0 Id: b  [line: 41]
.   .   .   .   .   Child: 1 If [line: 41]
.   .   .   .   .   .   Child: 0 Id: b  [line: 41]
.   .   .   .   .   .   Child: 1 Id: x  [line: 41]
.   .   .   .   .   .   Child: 2 Id: y  [line: 41]
.   .   .   Child: 2 Id: z  [line: 41]
.   .   Sibling: 31 While [line: 43]
.   .   .   Child: 0 Id: a  [line: 43]
.   .   .   Child: 1 While [line: 43]
.   .   .   .   Child: 0 Id: b  [line: 43]
.   .   .   .   Child: 1 While [line: 43]
.   .   .   .   .   Child: 0 Id: c  [line: 43]
.   .   .   .   .   Child: 1 While [line: 43]
.   .   .   .   .   .   Child: 0 Id: d  [line: 43]
.   .   .   .   .   .   Child: 1 Id: e  [line: 43]
.   .   Sibling: 32 If [line: 44]
.   .   .   Child: 0 Id: a  [line: 44]
.   .   .   Child: 1 If [line: 44]
.   .   .   .   Child: 0 Id: b  [line: 44]
.   .   .   .   Child: 1 If [line: 44]
.   .   .   .   .   Child: 0 Id: c  [line: 44]
.   .   .   .   .   Child: 1 If [line: 44]
.   .   .   .   .   .   Child: 0 Id: d  [line: 44]
.   .   .   .   .   .   Child: 1 Id: e  [line: 44]
.   .   Sibling: 33 If [line: 45]
.   .   .   Child: 0 Id: a  [line: 45]
.   .   .   Child: 2 If [line: 45]
.   .   .   .   Child: 0 Id: b  [line: 45]
.   .   .   .   Child: 2 If [line: 45]
.   .   .   .   .   Child: 0 Id: c  [line: 45]
.   .   .   .   .   Child: 2 If [line: 45]
.   .   .   .   .   .   Child: 0 Id: d  [line: 45]
.   .   .   .   .   .   Child: 2 Id: e  [line: 45]
.   .   Sibling: 34 Return [line: 47]
.   .   .   Child: 0 Const 1184 [line: 47]

* End of testing
Kill all remaining c- processes
=================================================
Output Comparison
** Congratulations!  Your output matches the expected output exactly!
